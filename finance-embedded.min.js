!function(modules) {
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) return installedModules[moduleId].exports;
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: !1,
            exports: {}
        };
        return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), 
        module.l = !0, module.exports;
    }
    var installedModules = {};
    __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.i = function(value) {
        return value;
    }, __webpack_require__.d = function(exports, name, getter) {
        __webpack_require__.o(exports, name) || Object.defineProperty(exports, name, {
            configurable: !1,
            enumerable: !0,
            get: getter
        });
    }, __webpack_require__.n = function(module) {
        var getter = module && module.__esModule ? function() {
            return module.default;
        } : function() {
            return module;
        };
        return __webpack_require__.d(getter, "a", getter), getter;
    }, __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    }, __webpack_require__.p = "", __webpack_require__(__webpack_require__.s = 38);
}([ function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = angular.module("finance.providers", []).provider("FinanceEmbeddedService", __webpack_require__(39));
}, function(module, exports, __webpack_require__) {
    "use strict";
    function CashCheckinEmbeddedService(GumgaRest, FinanceEmbeddedService) {
        var service = new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/cashcheckin");
        return service.getCurrentCheckin = function() {
            return service.extend("get", "/opencheckin");
        }, service.getByCurrentCashCheckin = function(date) {
            return service.extend("get", "/getbycurrentcashcheckin?date=" + date);
        }, service;
    }
    CashCheckinEmbeddedService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], 
    module.exports = CashCheckinEmbeddedService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function EmployeeService(GumgaRest, FinanceEmbeddedService) {
        var Service = new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/employee");
        return Service.getLogged = function() {
            return Service.extend("get", "/getlogged");
        }, Service;
    }
    EmployeeService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = EmployeeService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function FinanceUnitGroupService(GumgaRest, FinanceEmbeddedService) {
        return new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/financeunitgroup");
    }
    FinanceUnitGroupService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = FinanceUnitGroupService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function TitleEmbeddedService(GumgaRest, $http, FinanceEmbeddedService) {
        var Service = new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/title");
        return Service.renegociationParcels = [], Service.setRenegociationParcels = function(values) {
            Service.renegociationParcels = values;
        }, Service.findTitleWithParticipations = function(tipo, page, aqParam) {
            1 !== page && (page = 10 * page - 10), 1 === page && (page = 0);
            var aq = "obj.titleType='" + tipo + "'";
            return aqParam && (aq = aq + " AND " + aqParam), $http.get(FinanceEmbeddedService.getDefaultConfiguration().api + "/title/joinparticipations?aq=" + aq + "&start=" + page);
        }, Service.getRenegociationParcels = function() {
            return Service.renegociationParcels;
        }, Service.getParcelsDTO = function(idParcels) {
            return $http.post(FinanceEmbeddedService.getDefaultConfiguration().api + "/title/parcelsdto", idParcels);
        }, Service.readBarCode = function(barcode) {
            return $http.get(FinanceEmbeddedService.getDefaultConfiguration().api + "/boleto/" + barcode);
        }, Service.getInstance = function() {
            return $http.get(FinanceEmbeddedService.getDefaultConfiguration().api + "/title/new");
        }, Service.saveReplecement = function(entity) {
            return $http.post(FinanceEmbeddedService.getDefaultConfiguration().api + "/title/replacement", entity);
        }, Service.saveRenegotiation = function(entity) {
            return $http.post(FinanceEmbeddedService.getDefaultConfiguration().api + "/title/renegotiation", entity);
        }, Service.getPlanTree = function() {
            return $http.get(FinanceEmbeddedService.getDefaultConfiguration().api + "/plan/plantree");
        }, Service.getLabels = function() {
            return $http.get(FinanceEmbeddedService.getDefaultConfiguration().api + "/titlelabel");
        }, Service.saveLabel = function(label) {
            return $http.post(FinanceEmbeddedService.getDefaultConfiguration().api + "/titlelabel", label);
        }, Service.searchLabels = function(param) {
            return $http.get(FinanceEmbeddedService.getDefaultConfiguration().api + "/titlelabel?" + param);
        }, Service.searchTags = function(label, typeTitle) {
            return $http.get(FinanceEmbeddedService.getDefaultConfiguration().api + "/title/findbylabel/" + label + "/" + typeTitle);
        }, Service;
    }
    TitleEmbeddedService.$inject = [ "GumgaRest", "$http", "FinanceEmbeddedService" ], 
    module.exports = TitleEmbeddedService;
}, function(module, exports, __webpack_require__) {
    (function(module) {
        !function(global, factory) {
            module.exports = factory();
        }(0, function() {
            "use strict";
            function hooks() {
                return hookCallback.apply(null, arguments);
            }
            function isArray(input) {
                return input instanceof Array || "[object Array]" === Object.prototype.toString.call(input);
            }
            function isObject(input) {
                return null != input && "[object Object]" === Object.prototype.toString.call(input);
            }
            function isObjectEmpty(obj) {
                var k;
                for (k in obj) return !1;
                return !0;
            }
            function isUndefined(input) {
                return void 0 === input;
            }
            function isNumber(input) {
                return "number" == typeof input || "[object Number]" === Object.prototype.toString.call(input);
            }
            function isDate(input) {
                return input instanceof Date || "[object Date]" === Object.prototype.toString.call(input);
            }
            function map(arr, fn) {
                var i, res = [];
                for (i = 0; i < arr.length; ++i) res.push(fn(arr[i], i));
                return res;
            }
            function hasOwnProp(a, b) {
                return Object.prototype.hasOwnProperty.call(a, b);
            }
            function extend(a, b) {
                for (var i in b) hasOwnProp(b, i) && (a[i] = b[i]);
                return hasOwnProp(b, "toString") && (a.toString = b.toString), hasOwnProp(b, "valueOf") && (a.valueOf = b.valueOf), 
                a;
            }
            function createUTC(input, format, locale, strict) {
                return createLocalOrUTC(input, format, locale, strict, !0).utc();
            }
            function defaultParsingFlags() {
                return {
                    empty: !1,
                    unusedTokens: [],
                    unusedInput: [],
                    overflow: -2,
                    charsLeftOver: 0,
                    nullInput: !1,
                    invalidMonth: null,
                    invalidFormat: !1,
                    userInvalidated: !1,
                    iso: !1,
                    parsedDateParts: [],
                    meridiem: null,
                    rfc2822: !1,
                    weekdayMismatch: !1
                };
            }
            function getParsingFlags(m) {
                return null == m._pf && (m._pf = defaultParsingFlags()), m._pf;
            }
            function isValid(m) {
                if (null == m._isValid) {
                    var flags = getParsingFlags(m), parsedParts = some$1.call(flags.parsedDateParts, function(i) {
                        return null != i;
                    }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
                    if (m._strict && (isNowValid = isNowValid && 0 === flags.charsLeftOver && 0 === flags.unusedTokens.length && void 0 === flags.bigHour), 
                    null != Object.isFrozen && Object.isFrozen(m)) return isNowValid;
                    m._isValid = isNowValid;
                }
                return m._isValid;
            }
            function createInvalid(flags) {
                var m = createUTC(NaN);
                return null != flags ? extend(getParsingFlags(m), flags) : getParsingFlags(m).userInvalidated = !0, 
                m;
            }
            function copyConfig(to, from) {
                var i, prop, val;
                if (isUndefined(from._isAMomentObject) || (to._isAMomentObject = from._isAMomentObject), 
                isUndefined(from._i) || (to._i = from._i), isUndefined(from._f) || (to._f = from._f), 
                isUndefined(from._l) || (to._l = from._l), isUndefined(from._strict) || (to._strict = from._strict), 
                isUndefined(from._tzm) || (to._tzm = from._tzm), isUndefined(from._isUTC) || (to._isUTC = from._isUTC), 
                isUndefined(from._offset) || (to._offset = from._offset), isUndefined(from._pf) || (to._pf = getParsingFlags(from)), 
                isUndefined(from._locale) || (to._locale = from._locale), momentProperties.length > 0) for (i = 0; i < momentProperties.length; i++) prop = momentProperties[i], 
                val = from[prop], isUndefined(val) || (to[prop] = val);
                return to;
            }
            function Moment(config) {
                copyConfig(this, config), this._d = new Date(null != config._d ? config._d.getTime() : NaN), 
                this.isValid() || (this._d = new Date(NaN)), !1 === updateInProgress && (updateInProgress = !0, 
                hooks.updateOffset(this), updateInProgress = !1);
            }
            function isMoment(obj) {
                return obj instanceof Moment || null != obj && null != obj._isAMomentObject;
            }
            function absFloor(number) {
                return number < 0 ? Math.ceil(number) || 0 : Math.floor(number);
            }
            function toInt(argumentForCoercion) {
                var coercedNumber = +argumentForCoercion, value = 0;
                return 0 !== coercedNumber && isFinite(coercedNumber) && (value = absFloor(coercedNumber)), 
                value;
            }
            function compareArrays(array1, array2, dontConvert) {
                var i, len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0;
                for (i = 0; i < len; i++) (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) && diffs++;
                return diffs + lengthDiff;
            }
            function warn(msg) {
                !1 === hooks.suppressDeprecationWarnings && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + msg);
            }
            function deprecate(msg, fn) {
                var firstTime = !0;
                return extend(function() {
                    if (null != hooks.deprecationHandler && hooks.deprecationHandler(null, msg), firstTime) {
                        for (var arg, args = [], i = 0; i < arguments.length; i++) {
                            if (arg = "", "object" == typeof arguments[i]) {
                                arg += "\n[" + i + "] ";
                                for (var key in arguments[0]) arg += key + ": " + arguments[0][key] + ", ";
                                arg = arg.slice(0, -2);
                            } else arg = arguments[i];
                            args.push(arg);
                        }
                        warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack), 
                        firstTime = !1;
                    }
                    return fn.apply(this, arguments);
                }, fn);
            }
            function deprecateSimple(name, msg) {
                null != hooks.deprecationHandler && hooks.deprecationHandler(name, msg), deprecations[name] || (warn(msg), 
                deprecations[name] = !0);
            }
            function isFunction(input) {
                return input instanceof Function || "[object Function]" === Object.prototype.toString.call(input);
            }
            function set(config) {
                var prop, i;
                for (i in config) prop = config[i], isFunction(prop) ? this[i] = prop : this["_" + i] = prop;
                this._config = config, this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
            }
            function mergeConfigs(parentConfig, childConfig) {
                var prop, res = extend({}, parentConfig);
                for (prop in childConfig) hasOwnProp(childConfig, prop) && (isObject(parentConfig[prop]) && isObject(childConfig[prop]) ? (res[prop] = {}, 
                extend(res[prop], parentConfig[prop]), extend(res[prop], childConfig[prop])) : null != childConfig[prop] ? res[prop] = childConfig[prop] : delete res[prop]);
                for (prop in parentConfig) hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop]) && (res[prop] = extend({}, res[prop]));
                return res;
            }
            function Locale(config) {
                null != config && this.set(config);
            }
            function calendar(key, mom, now) {
                var output = this._calendar[key] || this._calendar.sameElse;
                return isFunction(output) ? output.call(mom, now) : output;
            }
            function longDateFormat(key) {
                var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
                return format || !formatUpper ? format : (this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function(val) {
                    return val.slice(1);
                }), this._longDateFormat[key]);
            }
            function invalidDate() {
                return this._invalidDate;
            }
            function ordinal(number) {
                return this._ordinal.replace("%d", number);
            }
            function relativeTime(number, withoutSuffix, string, isFuture) {
                var output = this._relativeTime[string];
                return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
            }
            function pastFuture(diff, output) {
                var format = this._relativeTime[diff > 0 ? "future" : "past"];
                return isFunction(format) ? format(output) : format.replace(/%s/i, output);
            }
            function addUnitAlias(unit, shorthand) {
                var lowerCase = unit.toLowerCase();
                aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
            }
            function normalizeUnits(units) {
                return "string" == typeof units ? aliases[units] || aliases[units.toLowerCase()] : void 0;
            }
            function normalizeObjectUnits(inputObject) {
                var normalizedProp, prop, normalizedInput = {};
                for (prop in inputObject) hasOwnProp(inputObject, prop) && (normalizedProp = normalizeUnits(prop)) && (normalizedInput[normalizedProp] = inputObject[prop]);
                return normalizedInput;
            }
            function addUnitPriority(unit, priority) {
                priorities[unit] = priority;
            }
            function getPrioritizedUnits(unitsObj) {
                var units = [];
                for (var u in unitsObj) units.push({
                    unit: u,
                    priority: priorities[u]
                });
                return units.sort(function(a, b) {
                    return a.priority - b.priority;
                }), units;
            }
            function makeGetSet(unit, keepTime) {
                return function(value) {
                    return null != value ? (set$1(this, unit, value), hooks.updateOffset(this, keepTime), 
                    this) : get(this, unit);
                };
            }
            function get(mom, unit) {
                return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
            }
            function set$1(mom, unit, value) {
                mom.isValid() && mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
            }
            function stringGet(units) {
                return units = normalizeUnits(units), isFunction(this[units]) ? this[units]() : this;
            }
            function stringSet(units, value) {
                if ("object" == typeof units) {
                    units = normalizeObjectUnits(units);
                    for (var prioritized = getPrioritizedUnits(units), i = 0; i < prioritized.length; i++) this[prioritized[i].unit](units[prioritized[i].unit]);
                } else if (units = normalizeUnits(units), isFunction(this[units])) return this[units](value);
                return this;
            }
            function zeroFill(number, targetLength, forceSign) {
                var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length;
                return (number >= 0 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
            }
            function addFormatToken(token, padded, ordinal, callback) {
                var func = callback;
                "string" == typeof callback && (func = function() {
                    return this[callback]();
                }), token && (formatTokenFunctions[token] = func), padded && (formatTokenFunctions[padded[0]] = function() {
                    return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                }), ordinal && (formatTokenFunctions[ordinal] = function() {
                    return this.localeData().ordinal(func.apply(this, arguments), token);
                });
            }
            function removeFormattingTokens(input) {
                return input.match(/\[[\s\S]/) ? input.replace(/^\[|\]$/g, "") : input.replace(/\\/g, "");
            }
            function makeFormatFunction(format) {
                var i, length, array = format.match(formattingTokens);
                for (i = 0, length = array.length; i < length; i++) formatTokenFunctions[array[i]] ? array[i] = formatTokenFunctions[array[i]] : array[i] = removeFormattingTokens(array[i]);
                return function(mom) {
                    var i, output = "";
                    for (i = 0; i < length; i++) output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
                    return output;
                };
            }
            function formatMoment(m, format) {
                return m.isValid() ? (format = expandFormat(format, m.localeData()), formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format), 
                formatFunctions[format](m)) : m.localeData().invalidDate();
            }
            function expandFormat(format, locale) {
                function replaceLongDateFormatTokens(input) {
                    return locale.longDateFormat(input) || input;
                }
                var i = 5;
                for (localFormattingTokens.lastIndex = 0; i >= 0 && localFormattingTokens.test(format); ) format = format.replace(localFormattingTokens, replaceLongDateFormatTokens), 
                localFormattingTokens.lastIndex = 0, i -= 1;
                return format;
            }
            function addRegexToken(token, regex, strictRegex) {
                regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {
                    return isStrict && strictRegex ? strictRegex : regex;
                };
            }
            function getParseRegexForToken(token, config) {
                return hasOwnProp(regexes, token) ? regexes[token](config._strict, config._locale) : new RegExp(unescapeFormat(token));
            }
            function unescapeFormat(s) {
                return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
                    return p1 || p2 || p3 || p4;
                }));
            }
            function regexEscape(s) {
                return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
            }
            function addParseToken(token, callback) {
                var i, func = callback;
                for ("string" == typeof token && (token = [ token ]), isNumber(callback) && (func = function(input, array) {
                    array[callback] = toInt(input);
                }), i = 0; i < token.length; i++) tokens[token[i]] = func;
            }
            function addWeekParseToken(token, callback) {
                addParseToken(token, function(input, array, config, token) {
                    config._w = config._w || {}, callback(input, config._w, config, token);
                });
            }
            function addTimeToArrayFromToken(token, input, config) {
                null != input && hasOwnProp(tokens, token) && tokens[token](input, config._a, config, token);
            }
            function daysInMonth(year, month) {
                return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
            }
            function localeMonths(m, format) {
                return m ? isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? "format" : "standalone"][m.month()] : isArray(this._months) ? this._months : this._months.standalone;
            }
            function localeMonthsShort(m, format) {
                return m ? isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? "format" : "standalone"][m.month()] : isArray(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone;
            }
            function handleStrictParse(monthName, format, strict) {
                var i, ii, mom, llc = monthName.toLocaleLowerCase();
                if (!this._monthsParse) for (this._monthsParse = [], this._longMonthsParse = [], 
                this._shortMonthsParse = [], i = 0; i < 12; ++i) mom = createUTC([ 2e3, i ]), this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase(), 
                this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
                return strict ? "MMM" === format ? (ii = indexOf$1.call(this._shortMonthsParse, llc), 
                -1 !== ii ? ii : null) : (ii = indexOf$1.call(this._longMonthsParse, llc), -1 !== ii ? ii : null) : "MMM" === format ? -1 !== (ii = indexOf$1.call(this._shortMonthsParse, llc)) ? ii : (ii = indexOf$1.call(this._longMonthsParse, llc), 
                -1 !== ii ? ii : null) : -1 !== (ii = indexOf$1.call(this._longMonthsParse, llc)) ? ii : (ii = indexOf$1.call(this._shortMonthsParse, llc), 
                -1 !== ii ? ii : null);
            }
            function localeMonthsParse(monthName, format, strict) {
                var i, mom, regex;
                if (this._monthsParseExact) return handleStrictParse.call(this, monthName, format, strict);
                for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), 
                i = 0; i < 12; i++) {
                    if (mom = createUTC([ 2e3, i ]), strict && !this._longMonthsParse[i] && (this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i"), 
                    this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i")), 
                    strict || this._monthsParse[i] || (regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, ""), 
                    this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i")), strict && "MMMM" === format && this._longMonthsParse[i].test(monthName)) return i;
                    if (strict && "MMM" === format && this._shortMonthsParse[i].test(monthName)) return i;
                    if (!strict && this._monthsParse[i].test(monthName)) return i;
                }
            }
            function setMonth(mom, value) {
                var dayOfMonth;
                if (!mom.isValid()) return mom;
                if ("string" == typeof value) if (/^\d+$/.test(value)) value = toInt(value); else if (value = mom.localeData().monthsParse(value), 
                !isNumber(value)) return mom;
                return dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value)), mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth), 
                mom;
            }
            function getSetMonth(value) {
                return null != value ? (setMonth(this, value), hooks.updateOffset(this, !0), this) : get(this, "Month");
            }
            function getDaysInMonth() {
                return daysInMonth(this.year(), this.month());
            }
            function monthsShortRegex(isStrict) {
                return this._monthsParseExact ? (hasOwnProp(this, "_monthsRegex") || computeMonthsParse.call(this), 
                isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex) : (hasOwnProp(this, "_monthsShortRegex") || (this._monthsShortRegex = defaultMonthsShortRegex), 
                this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex);
            }
            function monthsRegex(isStrict) {
                return this._monthsParseExact ? (hasOwnProp(this, "_monthsRegex") || computeMonthsParse.call(this), 
                isStrict ? this._monthsStrictRegex : this._monthsRegex) : (hasOwnProp(this, "_monthsRegex") || (this._monthsRegex = defaultMonthsRegex), 
                this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex);
            }
            function computeMonthsParse() {
                function cmpLenRev(a, b) {
                    return b.length - a.length;
                }
                var i, mom, shortPieces = [], longPieces = [], mixedPieces = [];
                for (i = 0; i < 12; i++) mom = createUTC([ 2e3, i ]), shortPieces.push(this.monthsShort(mom, "")), 
                longPieces.push(this.months(mom, "")), mixedPieces.push(this.months(mom, "")), mixedPieces.push(this.monthsShort(mom, ""));
                for (shortPieces.sort(cmpLenRev), longPieces.sort(cmpLenRev), mixedPieces.sort(cmpLenRev), 
                i = 0; i < 12; i++) shortPieces[i] = regexEscape(shortPieces[i]), longPieces[i] = regexEscape(longPieces[i]);
                for (i = 0; i < 24; i++) mixedPieces[i] = regexEscape(mixedPieces[i]);
                this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, 
                this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
            }
            function daysInYear(year) {
                return isLeapYear(year) ? 366 : 365;
            }
            function isLeapYear(year) {
                return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
            }
            function getIsLeapYear() {
                return isLeapYear(this.year());
            }
            function createDate(y, m, d, h, M, s, ms) {
                var date = new Date(y, m, d, h, M, s, ms);
                return y < 100 && y >= 0 && isFinite(date.getFullYear()) && date.setFullYear(y), 
                date;
            }
            function createUTCDate(y) {
                var date = new Date(Date.UTC.apply(null, arguments));
                return y < 100 && y >= 0 && isFinite(date.getUTCFullYear()) && date.setUTCFullYear(y), 
                date;
            }
            function firstWeekOffset(year, dow, doy) {
                var fwd = 7 + dow - doy;
                return -(7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7 + fwd - 1;
            }
            function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
                var resYear, resDayOfYear, localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset;
                return dayOfYear <= 0 ? (resYear = year - 1, resDayOfYear = daysInYear(resYear) + dayOfYear) : dayOfYear > daysInYear(year) ? (resYear = year + 1, 
                resDayOfYear = dayOfYear - daysInYear(year)) : (resYear = year, resDayOfYear = dayOfYear), 
                {
                    year: resYear,
                    dayOfYear: resDayOfYear
                };
            }
            function weekOfYear(mom, dow, doy) {
                var resWeek, resYear, weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1;
                return week < 1 ? (resYear = mom.year() - 1, resWeek = week + weeksInYear(resYear, dow, doy)) : week > weeksInYear(mom.year(), dow, doy) ? (resWeek = week - weeksInYear(mom.year(), dow, doy), 
                resYear = mom.year() + 1) : (resYear = mom.year(), resWeek = week), {
                    week: resWeek,
                    year: resYear
                };
            }
            function weeksInYear(year, dow, doy) {
                var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
                return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
            }
            function localeWeek(mom) {
                return weekOfYear(mom, this._week.dow, this._week.doy).week;
            }
            function localeFirstDayOfWeek() {
                return this._week.dow;
            }
            function localeFirstDayOfYear() {
                return this._week.doy;
            }
            function getSetWeek(input) {
                var week = this.localeData().week(this);
                return null == input ? week : this.add(7 * (input - week), "d");
            }
            function getSetISOWeek(input) {
                var week = weekOfYear(this, 1, 4).week;
                return null == input ? week : this.add(7 * (input - week), "d");
            }
            function parseWeekday(input, locale) {
                return "string" != typeof input ? input : isNaN(input) ? (input = locale.weekdaysParse(input), 
                "number" == typeof input ? input : null) : parseInt(input, 10);
            }
            function parseIsoWeekday(input, locale) {
                return "string" == typeof input ? locale.weekdaysParse(input) % 7 || 7 : isNaN(input) ? null : input;
            }
            function localeWeekdays(m, format) {
                return m ? isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? "format" : "standalone"][m.day()] : isArray(this._weekdays) ? this._weekdays : this._weekdays.standalone;
            }
            function localeWeekdaysShort(m) {
                return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
            }
            function localeWeekdaysMin(m) {
                return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
            }
            function handleStrictParse$1(weekdayName, format, strict) {
                var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
                if (!this._weekdaysParse) for (this._weekdaysParse = [], this._shortWeekdaysParse = [], 
                this._minWeekdaysParse = [], i = 0; i < 7; ++i) mom = createUTC([ 2e3, 1 ]).day(i), 
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase(), this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase(), 
                this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
                return strict ? "dddd" === format ? (ii = indexOf$1.call(this._weekdaysParse, llc), 
                -1 !== ii ? ii : null) : "ddd" === format ? (ii = indexOf$1.call(this._shortWeekdaysParse, llc), 
                -1 !== ii ? ii : null) : (ii = indexOf$1.call(this._minWeekdaysParse, llc), -1 !== ii ? ii : null) : "dddd" === format ? -1 !== (ii = indexOf$1.call(this._weekdaysParse, llc)) ? ii : -1 !== (ii = indexOf$1.call(this._shortWeekdaysParse, llc)) ? ii : (ii = indexOf$1.call(this._minWeekdaysParse, llc), 
                -1 !== ii ? ii : null) : "ddd" === format ? -1 !== (ii = indexOf$1.call(this._shortWeekdaysParse, llc)) ? ii : -1 !== (ii = indexOf$1.call(this._weekdaysParse, llc)) ? ii : (ii = indexOf$1.call(this._minWeekdaysParse, llc), 
                -1 !== ii ? ii : null) : -1 !== (ii = indexOf$1.call(this._minWeekdaysParse, llc)) ? ii : -1 !== (ii = indexOf$1.call(this._weekdaysParse, llc)) ? ii : (ii = indexOf$1.call(this._shortWeekdaysParse, llc), 
                -1 !== ii ? ii : null);
            }
            function localeWeekdaysParse(weekdayName, format, strict) {
                var i, mom, regex;
                if (this._weekdaysParseExact) return handleStrictParse$1.call(this, weekdayName, format, strict);
                for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], 
                this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), i = 0; i < 7; i++) {
                    if (mom = createUTC([ 2e3, 1 ]).day(i), strict && !this._fullWeekdaysParse[i] && (this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", ".?") + "$", "i"), 
                    this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", ".?") + "$", "i"), 
                    this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", ".?") + "$", "i")), 
                    this._weekdaysParse[i] || (regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, ""), 
                    this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i")), strict && "dddd" === format && this._fullWeekdaysParse[i].test(weekdayName)) return i;
                    if (strict && "ddd" === format && this._shortWeekdaysParse[i].test(weekdayName)) return i;
                    if (strict && "dd" === format && this._minWeekdaysParse[i].test(weekdayName)) return i;
                    if (!strict && this._weekdaysParse[i].test(weekdayName)) return i;
                }
            }
            function getSetDayOfWeek(input) {
                if (!this.isValid()) return null != input ? this : NaN;
                var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                return null != input ? (input = parseWeekday(input, this.localeData()), this.add(input - day, "d")) : day;
            }
            function getSetLocaleDayOfWeek(input) {
                if (!this.isValid()) return null != input ? this : NaN;
                var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
                return null == input ? weekday : this.add(input - weekday, "d");
            }
            function getSetISODayOfWeek(input) {
                if (!this.isValid()) return null != input ? this : NaN;
                if (null != input) {
                    var weekday = parseIsoWeekday(input, this.localeData());
                    return this.day(this.day() % 7 ? weekday : weekday - 7);
                }
                return this.day() || 7;
            }
            function weekdaysRegex(isStrict) {
                return this._weekdaysParseExact ? (hasOwnProp(this, "_weekdaysRegex") || computeWeekdaysParse.call(this), 
                isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex) : (hasOwnProp(this, "_weekdaysRegex") || (this._weekdaysRegex = defaultWeekdaysRegex), 
                this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex);
            }
            function weekdaysShortRegex(isStrict) {
                return this._weekdaysParseExact ? (hasOwnProp(this, "_weekdaysRegex") || computeWeekdaysParse.call(this), 
                isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (hasOwnProp(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = defaultWeekdaysShortRegex), 
                this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
            }
            function weekdaysMinRegex(isStrict) {
                return this._weekdaysParseExact ? (hasOwnProp(this, "_weekdaysRegex") || computeWeekdaysParse.call(this), 
                isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (hasOwnProp(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = defaultWeekdaysMinRegex), 
                this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
            }
            function computeWeekdaysParse() {
                function cmpLenRev(a, b) {
                    return b.length - a.length;
                }
                var i, mom, minp, shortp, longp, minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [];
                for (i = 0; i < 7; i++) mom = createUTC([ 2e3, 1 ]).day(i), minp = this.weekdaysMin(mom, ""), 
                shortp = this.weekdaysShort(mom, ""), longp = this.weekdays(mom, ""), minPieces.push(minp), 
                shortPieces.push(shortp), longPieces.push(longp), mixedPieces.push(minp), mixedPieces.push(shortp), 
                mixedPieces.push(longp);
                for (minPieces.sort(cmpLenRev), shortPieces.sort(cmpLenRev), longPieces.sort(cmpLenRev), 
                mixedPieces.sort(cmpLenRev), i = 0; i < 7; i++) shortPieces[i] = regexEscape(shortPieces[i]), 
                longPieces[i] = regexEscape(longPieces[i]), mixedPieces[i] = regexEscape(mixedPieces[i]);
                this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, 
                this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i"), 
                this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i"), 
                this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
            }
            function hFormat() {
                return this.hours() % 12 || 12;
            }
            function kFormat() {
                return this.hours() || 24;
            }
            function meridiem(token, lowercase) {
                addFormatToken(token, 0, 0, function() {
                    return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
                });
            }
            function matchMeridiem(isStrict, locale) {
                return locale._meridiemParse;
            }
            function localeIsPM(input) {
                return "p" === (input + "").toLowerCase().charAt(0);
            }
            function localeMeridiem(hours, minutes, isLower) {
                return hours > 11 ? isLower ? "pm" : "PM" : isLower ? "am" : "AM";
            }
            function normalizeLocale(key) {
                return key ? key.toLowerCase().replace("_", "-") : key;
            }
            function chooseLocale(names) {
                for (var j, next, locale, split, i = 0; i < names.length; ) {
                    for (split = normalizeLocale(names[i]).split("-"), j = split.length, next = normalizeLocale(names[i + 1]), 
                    next = next ? next.split("-") : null; j > 0; ) {
                        if (locale = loadLocale(split.slice(0, j).join("-"))) return locale;
                        if (next && next.length >= j && compareArrays(split, next, !0) >= j - 1) break;
                        j--;
                    }
                    i++;
                }
                return null;
            }
            function loadLocale(name) {
                var oldLocale = null;
                if (!locales[name] && void 0 !== module && module && module.exports) try {
                    oldLocale = globalLocale._abbr, function() {
                        var e = new Error('Cannot find module "./locale"');
                        throw e.code = "MODULE_NOT_FOUND", e;
                    }(), getSetGlobalLocale(oldLocale);
                } catch (e) {}
                return locales[name];
            }
            function getSetGlobalLocale(key, values) {
                var data;
                return key && (data = isUndefined(values) ? getLocale(key) : defineLocale(key, values)) && (globalLocale = data), 
                globalLocale._abbr;
            }
            function defineLocale(name, config) {
                if (null !== config) {
                    var parentConfig = baseConfig;
                    if (config.abbr = name, null != locales[name]) deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), 
                    parentConfig = locales[name]._config; else if (null != config.parentLocale) {
                        if (null == locales[config.parentLocale]) return localeFamilies[config.parentLocale] || (localeFamilies[config.parentLocale] = []), 
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        }), null;
                        parentConfig = locales[config.parentLocale]._config;
                    }
                    return locales[name] = new Locale(mergeConfigs(parentConfig, config)), localeFamilies[name] && localeFamilies[name].forEach(function(x) {
                        defineLocale(x.name, x.config);
                    }), getSetGlobalLocale(name), locales[name];
                }
                return delete locales[name], null;
            }
            function updateLocale(name, config) {
                if (null != config) {
                    var locale, parentConfig = baseConfig;
                    null != locales[name] && (parentConfig = locales[name]._config), config = mergeConfigs(parentConfig, config), 
                    locale = new Locale(config), locale.parentLocale = locales[name], locales[name] = locale, 
                    getSetGlobalLocale(name);
                } else null != locales[name] && (null != locales[name].parentLocale ? locales[name] = locales[name].parentLocale : null != locales[name] && delete locales[name]);
                return locales[name];
            }
            function getLocale(key) {
                var locale;
                if (key && key._locale && key._locale._abbr && (key = key._locale._abbr), !key) return globalLocale;
                if (!isArray(key)) {
                    if (locale = loadLocale(key)) return locale;
                    key = [ key ];
                }
                return chooseLocale(key);
            }
            function listLocales() {
                return keys$1(locales);
            }
            function checkOverflow(m) {
                var overflow, a = m._a;
                return a && -2 === getParsingFlags(m).overflow && (overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || 24 === a[HOUR] && (0 !== a[MINUTE] || 0 !== a[SECOND] || 0 !== a[MILLISECOND]) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1, 
                getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE) && (overflow = DATE), 
                getParsingFlags(m)._overflowWeeks && -1 === overflow && (overflow = WEEK), getParsingFlags(m)._overflowWeekday && -1 === overflow && (overflow = WEEKDAY), 
                getParsingFlags(m).overflow = overflow), m;
            }
            function configFromISO(config) {
                var i, l, allowTime, dateFormat, timeFormat, tzFormat, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string);
                if (match) {
                    for (getParsingFlags(config).iso = !0, i = 0, l = isoDates.length; i < l; i++) if (isoDates[i][1].exec(match[1])) {
                        dateFormat = isoDates[i][0], allowTime = !1 !== isoDates[i][2];
                        break;
                    }
                    if (null == dateFormat) return void (config._isValid = !1);
                    if (match[3]) {
                        for (i = 0, l = isoTimes.length; i < l; i++) if (isoTimes[i][1].exec(match[3])) {
                            timeFormat = (match[2] || " ") + isoTimes[i][0];
                            break;
                        }
                        if (null == timeFormat) return void (config._isValid = !1);
                    }
                    if (!allowTime && null != timeFormat) return void (config._isValid = !1);
                    if (match[4]) {
                        if (!tzRegex.exec(match[4])) return void (config._isValid = !1);
                        tzFormat = "Z";
                    }
                    config._f = dateFormat + (timeFormat || "") + (tzFormat || ""), configFromStringAndFormat(config);
                } else config._isValid = !1;
            }
            function configFromRFC2822(config) {
                var string, match, dayFormat, dateFormat, timeFormat, tzFormat, timezone, timezoneIndex, timezones = {
                    " GMT": " +0000",
                    " EDT": " -0400",
                    " EST": " -0500",
                    " CDT": " -0500",
                    " CST": " -0600",
                    " MDT": " -0600",
                    " MST": " -0700",
                    " PDT": " -0700",
                    " PST": " -0800"
                }, military = "YXWVUTSRQPONZABCDEFGHIKLM";
                if (string = config._i.replace(/\([^\)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s|\s$/g, ""), 
                match = basicRfcRegex.exec(string)) {
                    if (dayFormat = match[1] ? "ddd" + (5 === match[1].length ? ", " : " ") : "", dateFormat = "D MMM " + (match[2].length > 10 ? "YYYY " : "YY "), 
                    timeFormat = "HH:mm" + (match[4] ? ":ss" : ""), match[1]) {
                        var momentDate = new Date(match[2]), momentDay = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ][momentDate.getDay()];
                        if (match[1].substr(0, 3) !== momentDay) return getParsingFlags(config).weekdayMismatch = !0, 
                        void (config._isValid = !1);
                    }
                    switch (match[5].length) {
                      case 2:
                        0 === timezoneIndex ? timezone = " +0000" : (timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12, 
                        timezone = (timezoneIndex < 0 ? " -" : " +") + ("" + timezoneIndex).replace(/^-?/, "0").match(/..$/)[0] + "00");
                        break;

                      case 4:
                        timezone = timezones[match[5]];
                        break;

                      default:
                        timezone = timezones[" GMT"];
                    }
                    match[5] = timezone, config._i = match.splice(1).join(""), tzFormat = " ZZ", config._f = dayFormat + dateFormat + timeFormat + tzFormat, 
                    configFromStringAndFormat(config), getParsingFlags(config).rfc2822 = !0;
                } else config._isValid = !1;
            }
            function configFromString(config) {
                var matched = aspNetJsonRegex.exec(config._i);
                if (null !== matched) return void (config._d = new Date(+matched[1]));
                configFromISO(config), !1 === config._isValid && (delete config._isValid, configFromRFC2822(config), 
                !1 === config._isValid && (delete config._isValid, hooks.createFromInputFallback(config)));
            }
            function defaults(a, b, c) {
                return null != a ? a : null != b ? b : c;
            }
            function currentDateArray(config) {
                var nowValue = new Date(hooks.now());
                return config._useUTC ? [ nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate() ] : [ nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate() ];
            }
            function configFromArray(config) {
                var i, date, currentDate, yearToUse, input = [];
                if (!config._d) {
                    for (currentDate = currentDateArray(config), config._w && null == config._a[DATE] && null == config._a[MONTH] && dayOfYearFromWeekInfo(config), 
                    null != config._dayOfYear && (yearToUse = defaults(config._a[YEAR], currentDate[YEAR]), 
                    (config._dayOfYear > daysInYear(yearToUse) || 0 === config._dayOfYear) && (getParsingFlags(config)._overflowDayOfYear = !0), 
                    date = createUTCDate(yearToUse, 0, config._dayOfYear), config._a[MONTH] = date.getUTCMonth(), 
                    config._a[DATE] = date.getUTCDate()), i = 0; i < 3 && null == config._a[i]; ++i) config._a[i] = input[i] = currentDate[i];
                    for (;i < 7; i++) config._a[i] = input[i] = null == config._a[i] ? 2 === i ? 1 : 0 : config._a[i];
                    24 === config._a[HOUR] && 0 === config._a[MINUTE] && 0 === config._a[SECOND] && 0 === config._a[MILLISECOND] && (config._nextDay = !0, 
                    config._a[HOUR] = 0), config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input), 
                    null != config._tzm && config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm), 
                    config._nextDay && (config._a[HOUR] = 24);
                }
            }
            function dayOfYearFromWeekInfo(config) {
                var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
                if (w = config._w, null != w.GG || null != w.W || null != w.E) dow = 1, doy = 4, 
                weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year), 
                week = defaults(w.W, 1), ((weekday = defaults(w.E, 1)) < 1 || weekday > 7) && (weekdayOverflow = !0); else {
                    dow = config._locale._week.dow, doy = config._locale._week.doy;
                    var curWeek = weekOfYear(createLocal(), dow, doy);
                    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year), week = defaults(w.w, curWeek.week), 
                    null != w.d ? ((weekday = w.d) < 0 || weekday > 6) && (weekdayOverflow = !0) : null != w.e ? (weekday = w.e + dow, 
                    (w.e < 0 || w.e > 6) && (weekdayOverflow = !0)) : weekday = dow;
                }
                week < 1 || week > weeksInYear(weekYear, dow, doy) ? getParsingFlags(config)._overflowWeeks = !0 : null != weekdayOverflow ? getParsingFlags(config)._overflowWeekday = !0 : (temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), 
                config._a[YEAR] = temp.year, config._dayOfYear = temp.dayOfYear);
            }
            function configFromStringAndFormat(config) {
                if (config._f === hooks.ISO_8601) return void configFromISO(config);
                if (config._f === hooks.RFC_2822) return void configFromRFC2822(config);
                config._a = [], getParsingFlags(config).empty = !0;
                var i, parsedInput, tokens, token, skipped, string = "" + config._i, stringLength = string.length, totalParsedInputLength = 0;
                for (tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [], 
                i = 0; i < tokens.length; i++) token = tokens[i], parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0], 
                parsedInput && (skipped = string.substr(0, string.indexOf(parsedInput)), skipped.length > 0 && getParsingFlags(config).unusedInput.push(skipped), 
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length), totalParsedInputLength += parsedInput.length), 
                formatTokenFunctions[token] ? (parsedInput ? getParsingFlags(config).empty = !1 : getParsingFlags(config).unusedTokens.push(token), 
                addTimeToArrayFromToken(token, parsedInput, config)) : config._strict && !parsedInput && getParsingFlags(config).unusedTokens.push(token);
                getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength, string.length > 0 && getParsingFlags(config).unusedInput.push(string), 
                config._a[HOUR] <= 12 && !0 === getParsingFlags(config).bigHour && config._a[HOUR] > 0 && (getParsingFlags(config).bigHour = void 0), 
                getParsingFlags(config).parsedDateParts = config._a.slice(0), getParsingFlags(config).meridiem = config._meridiem, 
                config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem), 
                configFromArray(config), checkOverflow(config);
            }
            function meridiemFixWrap(locale, hour, meridiem) {
                var isPm;
                return null == meridiem ? hour : null != locale.meridiemHour ? locale.meridiemHour(hour, meridiem) : null != locale.isPM ? (isPm = locale.isPM(meridiem), 
                isPm && hour < 12 && (hour += 12), isPm || 12 !== hour || (hour = 0), hour) : hour;
            }
            function configFromStringAndArray(config) {
                var tempConfig, bestMoment, scoreToBeat, i, currentScore;
                if (0 === config._f.length) return getParsingFlags(config).invalidFormat = !0, void (config._d = new Date(NaN));
                for (i = 0; i < config._f.length; i++) currentScore = 0, tempConfig = copyConfig({}, config), 
                null != config._useUTC && (tempConfig._useUTC = config._useUTC), tempConfig._f = config._f[i], 
                configFromStringAndFormat(tempConfig), isValid(tempConfig) && (currentScore += getParsingFlags(tempConfig).charsLeftOver, 
                currentScore += 10 * getParsingFlags(tempConfig).unusedTokens.length, getParsingFlags(tempConfig).score = currentScore, 
                (null == scoreToBeat || currentScore < scoreToBeat) && (scoreToBeat = currentScore, 
                bestMoment = tempConfig));
                extend(config, bestMoment || tempConfig);
            }
            function configFromObject(config) {
                if (!config._d) {
                    var i = normalizeObjectUnits(config._i);
                    config._a = map([ i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond ], function(obj) {
                        return obj && parseInt(obj, 10);
                    }), configFromArray(config);
                }
            }
            function createFromConfig(config) {
                var res = new Moment(checkOverflow(prepareConfig(config)));
                return res._nextDay && (res.add(1, "d"), res._nextDay = void 0), res;
            }
            function prepareConfig(config) {
                var input = config._i, format = config._f;
                return config._locale = config._locale || getLocale(config._l), null === input || void 0 === format && "" === input ? createInvalid({
                    nullInput: !0
                }) : ("string" == typeof input && (config._i = input = config._locale.preparse(input)), 
                isMoment(input) ? new Moment(checkOverflow(input)) : (isDate(input) ? config._d = input : isArray(format) ? configFromStringAndArray(config) : format ? configFromStringAndFormat(config) : configFromInput(config), 
                isValid(config) || (config._d = null), config));
            }
            function configFromInput(config) {
                var input = config._i;
                isUndefined(input) ? config._d = new Date(hooks.now()) : isDate(input) ? config._d = new Date(input.valueOf()) : "string" == typeof input ? configFromString(config) : isArray(input) ? (config._a = map(input.slice(0), function(obj) {
                    return parseInt(obj, 10);
                }), configFromArray(config)) : isObject(input) ? configFromObject(config) : isNumber(input) ? config._d = new Date(input) : hooks.createFromInputFallback(config);
            }
            function createLocalOrUTC(input, format, locale, strict, isUTC) {
                var c = {};
                return !0 !== locale && !1 !== locale || (strict = locale, locale = void 0), (isObject(input) && isObjectEmpty(input) || isArray(input) && 0 === input.length) && (input = void 0), 
                c._isAMomentObject = !0, c._useUTC = c._isUTC = isUTC, c._l = locale, c._i = input, 
                c._f = format, c._strict = strict, createFromConfig(c);
            }
            function createLocal(input, format, locale, strict) {
                return createLocalOrUTC(input, format, locale, strict, !1);
            }
            function pickBy(fn, moments) {
                var res, i;
                if (1 === moments.length && isArray(moments[0]) && (moments = moments[0]), !moments.length) return createLocal();
                for (res = moments[0], i = 1; i < moments.length; ++i) moments[i].isValid() && !moments[i][fn](res) || (res = moments[i]);
                return res;
            }
            function min() {
                return pickBy("isBefore", [].slice.call(arguments, 0));
            }
            function max() {
                return pickBy("isAfter", [].slice.call(arguments, 0));
            }
            function isDurationValid(m) {
                for (var key in m) if (-1 === ordering.indexOf(key) || null != m[key] && isNaN(m[key])) return !1;
                for (var unitHasDecimal = !1, i = 0; i < ordering.length; ++i) if (m[ordering[i]]) {
                    if (unitHasDecimal) return !1;
                    parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]]) && (unitHasDecimal = !0);
                }
                return !0;
            }
            function isValid$1() {
                return this._isValid;
            }
            function createInvalid$1() {
                return createDuration(NaN);
            }
            function Duration(duration) {
                var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
                this._isValid = isDurationValid(normalizedInput), this._milliseconds = +milliseconds + 1e3 * seconds + 6e4 * minutes + 1e3 * hours * 60 * 60, 
                this._days = +days + 7 * weeks, this._months = +months + 3 * quarters + 12 * years, 
                this._data = {}, this._locale = getLocale(), this._bubble();
            }
            function isDuration(obj) {
                return obj instanceof Duration;
            }
            function absRound(number) {
                return number < 0 ? -1 * Math.round(-1 * number) : Math.round(number);
            }
            function offset(token, separator) {
                addFormatToken(token, 0, 0, function() {
                    var offset = this.utcOffset(), sign = "+";
                    return offset < 0 && (offset = -offset, sign = "-"), sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
                });
            }
            function offsetFromString(matcher, string) {
                var matches = (string || "").match(matcher);
                if (null === matches) return null;
                var chunk = matches[matches.length - 1] || [], parts = (chunk + "").match(chunkOffset) || [ "-", 0, 0 ], minutes = 60 * parts[1] + toInt(parts[2]);
                return 0 === minutes ? 0 : "+" === parts[0] ? minutes : -minutes;
            }
            function cloneWithOffset(input, model) {
                var res, diff;
                return model._isUTC ? (res = model.clone(), diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(), 
                res._d.setTime(res._d.valueOf() + diff), hooks.updateOffset(res, !1), res) : createLocal(input).local();
            }
            function getDateOffset(m) {
                return 15 * -Math.round(m._d.getTimezoneOffset() / 15);
            }
            function getSetOffset(input, keepLocalTime, keepMinutes) {
                var localAdjust, offset = this._offset || 0;
                if (!this.isValid()) return null != input ? this : NaN;
                if (null != input) {
                    if ("string" == typeof input) {
                        if (null === (input = offsetFromString(matchShortOffset, input))) return this;
                    } else Math.abs(input) < 16 && !keepMinutes && (input *= 60);
                    return !this._isUTC && keepLocalTime && (localAdjust = getDateOffset(this)), this._offset = input, 
                    this._isUTC = !0, null != localAdjust && this.add(localAdjust, "m"), offset !== input && (!keepLocalTime || this._changeInProgress ? addSubtract(this, createDuration(input - offset, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, 
                    hooks.updateOffset(this, !0), this._changeInProgress = null)), this;
                }
                return this._isUTC ? offset : getDateOffset(this);
            }
            function getSetZone(input, keepLocalTime) {
                return null != input ? ("string" != typeof input && (input = -input), this.utcOffset(input, keepLocalTime), 
                this) : -this.utcOffset();
            }
            function setOffsetToUTC(keepLocalTime) {
                return this.utcOffset(0, keepLocalTime);
            }
            function setOffsetToLocal(keepLocalTime) {
                return this._isUTC && (this.utcOffset(0, keepLocalTime), this._isUTC = !1, keepLocalTime && this.subtract(getDateOffset(this), "m")), 
                this;
            }
            function setOffsetToParsedOffset() {
                if (null != this._tzm) this.utcOffset(this._tzm, !1, !0); else if ("string" == typeof this._i) {
                    var tZone = offsetFromString(matchOffset, this._i);
                    null != tZone ? this.utcOffset(tZone) : this.utcOffset(0, !0);
                }
                return this;
            }
            function hasAlignedHourOffset(input) {
                return !!this.isValid() && (input = input ? createLocal(input).utcOffset() : 0, 
                (this.utcOffset() - input) % 60 == 0);
            }
            function isDaylightSavingTime() {
                return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
            }
            function isDaylightSavingTimeShifted() {
                if (!isUndefined(this._isDSTShifted)) return this._isDSTShifted;
                var c = {};
                if (copyConfig(c, this), c = prepareConfig(c), c._a) {
                    var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
                } else this._isDSTShifted = !1;
                return this._isDSTShifted;
            }
            function isLocal() {
                return !!this.isValid() && !this._isUTC;
            }
            function isUtcOffset() {
                return !!this.isValid() && this._isUTC;
            }
            function isUtc() {
                return !!this.isValid() && (this._isUTC && 0 === this._offset);
            }
            function createDuration(input, key) {
                var sign, ret, diffRes, duration = input, match = null;
                return isDuration(input) ? duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months
                } : isNumber(input) ? (duration = {}, key ? duration[key] = input : duration.milliseconds = input) : (match = aspNetRegex.exec(input)) ? (sign = "-" === match[1] ? -1 : 1, 
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(absRound(1e3 * match[MILLISECOND])) * sign
                }) : (match = isoRegex.exec(input)) ? (sign = "-" === match[1] ? -1 : 1, duration = {
                    y: parseIso(match[2], sign),
                    M: parseIso(match[3], sign),
                    w: parseIso(match[4], sign),
                    d: parseIso(match[5], sign),
                    h: parseIso(match[6], sign),
                    m: parseIso(match[7], sign),
                    s: parseIso(match[8], sign)
                }) : null == duration ? duration = {} : "object" == typeof duration && ("from" in duration || "to" in duration) && (diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to)), 
                duration = {}, duration.ms = diffRes.milliseconds, duration.M = diffRes.months), 
                ret = new Duration(duration), isDuration(input) && hasOwnProp(input, "_locale") && (ret._locale = input._locale), 
                ret;
            }
            function parseIso(inp, sign) {
                var res = inp && parseFloat(inp.replace(",", "."));
                return (isNaN(res) ? 0 : res) * sign;
            }
            function positiveMomentsDifference(base, other) {
                var res = {
                    milliseconds: 0,
                    months: 0
                };
                return res.months = other.month() - base.month() + 12 * (other.year() - base.year()), 
                base.clone().add(res.months, "M").isAfter(other) && --res.months, res.milliseconds = +other - +base.clone().add(res.months, "M"), 
                res;
            }
            function momentsDifference(base, other) {
                var res;
                return base.isValid() && other.isValid() ? (other = cloneWithOffset(other, base), 
                base.isBefore(other) ? res = positiveMomentsDifference(base, other) : (res = positiveMomentsDifference(other, base), 
                res.milliseconds = -res.milliseconds, res.months = -res.months), res) : {
                    milliseconds: 0,
                    months: 0
                };
            }
            function createAdder(direction, name) {
                return function(val, period) {
                    var dur, tmp;
                    return null === period || isNaN(+period) || (deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), 
                    tmp = val, val = period, period = tmp), val = "string" == typeof val ? +val : val, 
                    dur = createDuration(val, period), addSubtract(this, dur, direction), this;
                };
            }
            function addSubtract(mom, duration, isAdding, updateOffset) {
                var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
                mom.isValid() && (updateOffset = null == updateOffset || updateOffset, milliseconds && mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding), 
                days && set$1(mom, "Date", get(mom, "Date") + days * isAdding), months && setMonth(mom, get(mom, "Month") + months * isAdding), 
                updateOffset && hooks.updateOffset(mom, days || months));
            }
            function getCalendarFormat(myMoment, now) {
                var diff = myMoment.diff(now, "days", !0);
                return diff < -6 ? "sameElse" : diff < -1 ? "lastWeek" : diff < 0 ? "lastDay" : diff < 1 ? "sameDay" : diff < 2 ? "nextDay" : diff < 7 ? "nextWeek" : "sameElse";
            }
            function calendar$1(time, formats) {
                var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf("day"), format = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
                return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
            }
            function clone() {
                return new Moment(this);
            }
            function isAfter(input, units) {
                var localInput = isMoment(input) ? input : createLocal(input);
                return !(!this.isValid() || !localInput.isValid()) && (units = normalizeUnits(isUndefined(units) ? "millisecond" : units), 
                "millisecond" === units ? this.valueOf() > localInput.valueOf() : localInput.valueOf() < this.clone().startOf(units).valueOf());
            }
            function isBefore(input, units) {
                var localInput = isMoment(input) ? input : createLocal(input);
                return !(!this.isValid() || !localInput.isValid()) && (units = normalizeUnits(isUndefined(units) ? "millisecond" : units), 
                "millisecond" === units ? this.valueOf() < localInput.valueOf() : this.clone().endOf(units).valueOf() < localInput.valueOf());
            }
            function isBetween(from, to, units, inclusivity) {
                return inclusivity = inclusivity || "()", ("(" === inclusivity[0] ? this.isAfter(from, units) : !this.isBefore(from, units)) && (")" === inclusivity[1] ? this.isBefore(to, units) : !this.isAfter(to, units));
            }
            function isSame(input, units) {
                var inputMs, localInput = isMoment(input) ? input : createLocal(input);
                return !(!this.isValid() || !localInput.isValid()) && (units = normalizeUnits(units || "millisecond"), 
                "millisecond" === units ? this.valueOf() === localInput.valueOf() : (inputMs = localInput.valueOf(), 
                this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf()));
            }
            function isSameOrAfter(input, units) {
                return this.isSame(input, units) || this.isAfter(input, units);
            }
            function isSameOrBefore(input, units) {
                return this.isSame(input, units) || this.isBefore(input, units);
            }
            function diff(input, units, asFloat) {
                var that, zoneDelta, delta, output;
                return this.isValid() ? (that = cloneWithOffset(input, this), that.isValid() ? (zoneDelta = 6e4 * (that.utcOffset() - this.utcOffset()), 
                units = normalizeUnits(units), "year" === units || "month" === units || "quarter" === units ? (output = monthDiff(this, that), 
                "quarter" === units ? output /= 3 : "year" === units && (output /= 12)) : (delta = this - that, 
                output = "second" === units ? delta / 1e3 : "minute" === units ? delta / 6e4 : "hour" === units ? delta / 36e5 : "day" === units ? (delta - zoneDelta) / 864e5 : "week" === units ? (delta - zoneDelta) / 6048e5 : delta), 
                asFloat ? output : absFloor(output)) : NaN) : NaN;
            }
            function monthDiff(a, b) {
                var anchor2, adjust, wholeMonthDiff = 12 * (b.year() - a.year()) + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months");
                return b - anchor < 0 ? (anchor2 = a.clone().add(wholeMonthDiff - 1, "months"), 
                adjust = (b - anchor) / (anchor - anchor2)) : (anchor2 = a.clone().add(wholeMonthDiff + 1, "months"), 
                adjust = (b - anchor) / (anchor2 - anchor)), -(wholeMonthDiff + adjust) || 0;
            }
            function toString() {
                return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
            }
            function toISOString() {
                if (!this.isValid()) return null;
                var m = this.clone().utc();
                return m.year() < 0 || m.year() > 9999 ? formatMoment(m, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]") : isFunction(Date.prototype.toISOString) ? this.toDate().toISOString() : formatMoment(m, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
            }
            function inspect() {
                if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)";
                var func = "moment", zone = "";
                this.isLocal() || (func = 0 === this.utcOffset() ? "moment.utc" : "moment.parseZone", 
                zone = "Z");
                var prefix = "[" + func + '("]', year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY", suffix = zone + '[")]';
                return this.format(prefix + year + "-MM-DD[T]HH:mm:ss.SSS" + suffix);
            }
            function format(inputString) {
                inputString || (inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat);
                var output = formatMoment(this, inputString);
                return this.localeData().postformat(output);
            }
            function from(time, withoutSuffix) {
                return this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid()) ? createDuration({
                    to: this,
                    from: time
                }).locale(this.locale()).humanize(!withoutSuffix) : this.localeData().invalidDate();
            }
            function fromNow(withoutSuffix) {
                return this.from(createLocal(), withoutSuffix);
            }
            function to(time, withoutSuffix) {
                return this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid()) ? createDuration({
                    from: this,
                    to: time
                }).locale(this.locale()).humanize(!withoutSuffix) : this.localeData().invalidDate();
            }
            function toNow(withoutSuffix) {
                return this.to(createLocal(), withoutSuffix);
            }
            function locale(key) {
                var newLocaleData;
                return void 0 === key ? this._locale._abbr : (newLocaleData = getLocale(key), null != newLocaleData && (this._locale = newLocaleData), 
                this);
            }
            function localeData() {
                return this._locale;
            }
            function startOf(units) {
                switch (units = normalizeUnits(units)) {
                  case "year":
                    this.month(0);

                  case "quarter":
                  case "month":
                    this.date(1);

                  case "week":
                  case "isoWeek":
                  case "day":
                  case "date":
                    this.hours(0);

                  case "hour":
                    this.minutes(0);

                  case "minute":
                    this.seconds(0);

                  case "second":
                    this.milliseconds(0);
                }
                return "week" === units && this.weekday(0), "isoWeek" === units && this.isoWeekday(1), 
                "quarter" === units && this.month(3 * Math.floor(this.month() / 3)), this;
            }
            function endOf(units) {
                return void 0 === (units = normalizeUnits(units)) || "millisecond" === units ? this : ("date" === units && (units = "day"), 
                this.startOf(units).add(1, "isoWeek" === units ? "week" : units).subtract(1, "ms"));
            }
            function valueOf() {
                return this._d.valueOf() - 6e4 * (this._offset || 0);
            }
            function unix() {
                return Math.floor(this.valueOf() / 1e3);
            }
            function toDate() {
                return new Date(this.valueOf());
            }
            function toArray() {
                var m = this;
                return [ m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond() ];
            }
            function toObject() {
                var m = this;
                return {
                    years: m.year(),
                    months: m.month(),
                    date: m.date(),
                    hours: m.hours(),
                    minutes: m.minutes(),
                    seconds: m.seconds(),
                    milliseconds: m.milliseconds()
                };
            }
            function toJSON() {
                return this.isValid() ? this.toISOString() : null;
            }
            function isValid$2() {
                return isValid(this);
            }
            function parsingFlags() {
                return extend({}, getParsingFlags(this));
            }
            function invalidAt() {
                return getParsingFlags(this).overflow;
            }
            function creationData() {
                return {
                    input: this._i,
                    format: this._f,
                    locale: this._locale,
                    isUTC: this._isUTC,
                    strict: this._strict
                };
            }
            function addWeekYearFormatToken(token, getter) {
                addFormatToken(0, [ token, token.length ], 0, getter);
            }
            function getSetWeekYear(input) {
                return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
            }
            function getSetISOWeekYear(input) {
                return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
            }
            function getISOWeeksInYear() {
                return weeksInYear(this.year(), 1, 4);
            }
            function getWeeksInYear() {
                var weekInfo = this.localeData()._week;
                return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
            }
            function getSetWeekYearHelper(input, week, weekday, dow, doy) {
                var weeksTarget;
                return null == input ? weekOfYear(this, dow, doy).year : (weeksTarget = weeksInYear(input, dow, doy), 
                week > weeksTarget && (week = weeksTarget), setWeekAll.call(this, input, week, weekday, dow, doy));
            }
            function setWeekAll(weekYear, week, weekday, dow, doy) {
                var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
                return this.year(date.getUTCFullYear()), this.month(date.getUTCMonth()), this.date(date.getUTCDate()), 
                this;
            }
            function getSetQuarter(input) {
                return null == input ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (input - 1) + this.month() % 3);
            }
            function getSetDayOfYear(input) {
                var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
                return null == input ? dayOfYear : this.add(input - dayOfYear, "d");
            }
            function parseMs(input, array) {
                array[MILLISECOND] = toInt(1e3 * ("0." + input));
            }
            function getZoneAbbr() {
                return this._isUTC ? "UTC" : "";
            }
            function getZoneName() {
                return this._isUTC ? "Coordinated Universal Time" : "";
            }
            function createUnix(input) {
                return createLocal(1e3 * input);
            }
            function createInZone() {
                return createLocal.apply(null, arguments).parseZone();
            }
            function preParsePostFormat(string) {
                return string;
            }
            function get$1(format, index, field, setter) {
                var locale = getLocale(), utc = createUTC().set(setter, index);
                return locale[field](utc, format);
            }
            function listMonthsImpl(format, index, field) {
                if (isNumber(format) && (index = format, format = void 0), format = format || "", 
                null != index) return get$1(format, index, field, "month");
                var i, out = [];
                for (i = 0; i < 12; i++) out[i] = get$1(format, i, field, "month");
                return out;
            }
            function listWeekdaysImpl(localeSorted, format, index, field) {
                "boolean" == typeof localeSorted ? (isNumber(format) && (index = format, format = void 0), 
                format = format || "") : (format = localeSorted, index = format, localeSorted = !1, 
                isNumber(format) && (index = format, format = void 0), format = format || "");
                var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0;
                if (null != index) return get$1(format, (index + shift) % 7, field, "day");
                var i, out = [];
                for (i = 0; i < 7; i++) out[i] = get$1(format, (i + shift) % 7, field, "day");
                return out;
            }
            function listMonths(format, index) {
                return listMonthsImpl(format, index, "months");
            }
            function listMonthsShort(format, index) {
                return listMonthsImpl(format, index, "monthsShort");
            }
            function listWeekdays(localeSorted, format, index) {
                return listWeekdaysImpl(localeSorted, format, index, "weekdays");
            }
            function listWeekdaysShort(localeSorted, format, index) {
                return listWeekdaysImpl(localeSorted, format, index, "weekdaysShort");
            }
            function listWeekdaysMin(localeSorted, format, index) {
                return listWeekdaysImpl(localeSorted, format, index, "weekdaysMin");
            }
            function abs() {
                var data = this._data;
                return this._milliseconds = mathAbs(this._milliseconds), this._days = mathAbs(this._days), 
                this._months = mathAbs(this._months), data.milliseconds = mathAbs(data.milliseconds), 
                data.seconds = mathAbs(data.seconds), data.minutes = mathAbs(data.minutes), data.hours = mathAbs(data.hours), 
                data.months = mathAbs(data.months), data.years = mathAbs(data.years), this;
            }
            function addSubtract$1(duration, input, value, direction) {
                var other = createDuration(input, value);
                return duration._milliseconds += direction * other._milliseconds, duration._days += direction * other._days, 
                duration._months += direction * other._months, duration._bubble();
            }
            function add$1(input, value) {
                return addSubtract$1(this, input, value, 1);
            }
            function subtract$1(input, value) {
                return addSubtract$1(this, input, value, -1);
            }
            function absCeil(number) {
                return number < 0 ? Math.floor(number) : Math.ceil(number);
            }
            function bubble() {
                var seconds, minutes, hours, years, monthsFromDays, milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data;
                return milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0 || (milliseconds += 864e5 * absCeil(monthsToDays(months) + days), 
                days = 0, months = 0), data.milliseconds = milliseconds % 1e3, seconds = absFloor(milliseconds / 1e3), 
                data.seconds = seconds % 60, minutes = absFloor(seconds / 60), data.minutes = minutes % 60, 
                hours = absFloor(minutes / 60), data.hours = hours % 24, days += absFloor(hours / 24), 
                monthsFromDays = absFloor(daysToMonths(days)), months += monthsFromDays, days -= absCeil(monthsToDays(monthsFromDays)), 
                years = absFloor(months / 12), months %= 12, data.days = days, data.months = months, 
                data.years = years, this;
            }
            function daysToMonths(days) {
                return 4800 * days / 146097;
            }
            function monthsToDays(months) {
                return 146097 * months / 4800;
            }
            function as(units) {
                if (!this.isValid()) return NaN;
                var days, months, milliseconds = this._milliseconds;
                if ("month" === (units = normalizeUnits(units)) || "year" === units) return days = this._days + milliseconds / 864e5, 
                months = this._months + daysToMonths(days), "month" === units ? months : months / 12;
                switch (days = this._days + Math.round(monthsToDays(this._months)), units) {
                  case "week":
                    return days / 7 + milliseconds / 6048e5;

                  case "day":
                    return days + milliseconds / 864e5;

                  case "hour":
                    return 24 * days + milliseconds / 36e5;

                  case "minute":
                    return 1440 * days + milliseconds / 6e4;

                  case "second":
                    return 86400 * days + milliseconds / 1e3;

                  case "millisecond":
                    return Math.floor(864e5 * days) + milliseconds;

                  default:
                    throw new Error("Unknown unit " + units);
                }
            }
            function valueOf$1() {
                return this.isValid() ? this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * toInt(this._months / 12) : NaN;
            }
            function makeAs(alias) {
                return function() {
                    return this.as(alias);
                };
            }
            function get$2(units) {
                return units = normalizeUnits(units), this.isValid() ? this[units + "s"]() : NaN;
            }
            function makeGetter(name) {
                return function() {
                    return this.isValid() ? this._data[name] : NaN;
                };
            }
            function weeks() {
                return absFloor(this.days() / 7);
            }
            function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
                return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
            }
            function relativeTime$1(posNegDuration, withoutSuffix, locale) {
                var duration = createDuration(posNegDuration).abs(), seconds = round(duration.as("s")), minutes = round(duration.as("m")), hours = round(duration.as("h")), days = round(duration.as("d")), months = round(duration.as("M")), years = round(duration.as("y")), a = seconds <= thresholds.ss && [ "s", seconds ] || seconds < thresholds.s && [ "ss", seconds ] || minutes <= 1 && [ "m" ] || minutes < thresholds.m && [ "mm", minutes ] || hours <= 1 && [ "h" ] || hours < thresholds.h && [ "hh", hours ] || days <= 1 && [ "d" ] || days < thresholds.d && [ "dd", days ] || months <= 1 && [ "M" ] || months < thresholds.M && [ "MM", months ] || years <= 1 && [ "y" ] || [ "yy", years ];
                return a[2] = withoutSuffix, a[3] = +posNegDuration > 0, a[4] = locale, substituteTimeAgo.apply(null, a);
            }
            function getSetRelativeTimeRounding(roundingFunction) {
                return void 0 === roundingFunction ? round : "function" == typeof roundingFunction && (round = roundingFunction, 
                !0);
            }
            function getSetRelativeTimeThreshold(threshold, limit) {
                return void 0 !== thresholds[threshold] && (void 0 === limit ? thresholds[threshold] : (thresholds[threshold] = limit, 
                "s" === threshold && (thresholds.ss = limit - 1), !0));
            }
            function humanize(withSuffix) {
                if (!this.isValid()) return this.localeData().invalidDate();
                var locale = this.localeData(), output = relativeTime$1(this, !withSuffix, locale);
                return withSuffix && (output = locale.pastFuture(+this, output)), locale.postformat(output);
            }
            function toISOString$1() {
                if (!this.isValid()) return this.localeData().invalidDate();
                var minutes, hours, years, seconds = abs$1(this._milliseconds) / 1e3, days = abs$1(this._days), months = abs$1(this._months);
                minutes = absFloor(seconds / 60), hours = absFloor(minutes / 60), seconds %= 60, 
                minutes %= 60, years = absFloor(months / 12), months %= 12;
                var Y = years, M = months, D = days, h = hours, m = minutes, s = seconds, total = this.asSeconds();
                return total ? (total < 0 ? "-" : "") + "P" + (Y ? Y + "Y" : "") + (M ? M + "M" : "") + (D ? D + "D" : "") + (h || m || s ? "T" : "") + (h ? h + "H" : "") + (m ? m + "M" : "") + (s ? s + "S" : "") : "P0D";
            }
            var hookCallback, some;
            some = Array.prototype.some ? Array.prototype.some : function(fun) {
                for (var t = Object(this), len = t.length >>> 0, i = 0; i < len; i++) if (i in t && fun.call(this, t[i], i, t)) return !0;
                return !1;
            };
            var some$1 = some, momentProperties = hooks.momentProperties = [], updateInProgress = !1, deprecations = {};
            hooks.suppressDeprecationWarnings = !1, hooks.deprecationHandler = null;
            var keys;
            keys = Object.keys ? Object.keys : function(obj) {
                var i, res = [];
                for (i in obj) hasOwnProp(obj, i) && res.push(i);
                return res;
            };
            var indexOf, keys$1 = keys, defaultCalendar = {
                sameDay: "[Today at] LT",
                nextDay: "[Tomorrow at] LT",
                nextWeek: "dddd [at] LT",
                lastDay: "[Yesterday at] LT",
                lastWeek: "[Last] dddd [at] LT",
                sameElse: "L"
            }, defaultLongDateFormat = {
                LTS: "h:mm:ss A",
                LT: "h:mm A",
                L: "MM/DD/YYYY",
                LL: "MMMM D, YYYY",
                LLL: "MMMM D, YYYY h:mm A",
                LLLL: "dddd, MMMM D, YYYY h:mm A"
            }, defaultDayOfMonthOrdinalParse = /\d{1,2}/, defaultRelativeTime = {
                future: "in %s",
                past: "%s ago",
                s: "a few seconds",
                ss: "%d seconds",
                m: "a minute",
                mm: "%d minutes",
                h: "an hour",
                hh: "%d hours",
                d: "a day",
                dd: "%d days",
                M: "a month",
                MM: "%d months",
                y: "a year",
                yy: "%d years"
            }, aliases = {}, priorities = {}, formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {}, match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, regexes = {}, tokens = {}, YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
            indexOf = Array.prototype.indexOf ? Array.prototype.indexOf : function(o) {
                var i;
                for (i = 0; i < this.length; ++i) if (this[i] === o) return i;
                return -1;
            };
            var indexOf$1 = indexOf;
            addFormatToken("M", [ "MM", 2 ], "Mo", function() {
                return this.month() + 1;
            }), addFormatToken("MMM", 0, 0, function(format) {
                return this.localeData().monthsShort(this, format);
            }), addFormatToken("MMMM", 0, 0, function(format) {
                return this.localeData().months(this, format);
            }), addUnitAlias("month", "M"), addUnitPriority("month", 8), addRegexToken("M", match1to2), 
            addRegexToken("MM", match1to2, match2), addRegexToken("MMM", function(isStrict, locale) {
                return locale.monthsShortRegex(isStrict);
            }), addRegexToken("MMMM", function(isStrict, locale) {
                return locale.monthsRegex(isStrict);
            }), addParseToken([ "M", "MM" ], function(input, array) {
                array[MONTH] = toInt(input) - 1;
            }), addParseToken([ "MMM", "MMMM" ], function(input, array, config, token) {
                var month = config._locale.monthsParse(input, token, config._strict);
                null != month ? array[MONTH] = month : getParsingFlags(config).invalidMonth = input;
            });
            var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
            addFormatToken("Y", 0, 0, function() {
                var y = this.year();
                return y <= 9999 ? "" + y : "+" + y;
            }), addFormatToken(0, [ "YY", 2 ], 0, function() {
                return this.year() % 100;
            }), addFormatToken(0, [ "YYYY", 4 ], 0, "year"), addFormatToken(0, [ "YYYYY", 5 ], 0, "year"), 
            addFormatToken(0, [ "YYYYYY", 6, !0 ], 0, "year"), addUnitAlias("year", "y"), addUnitPriority("year", 1), 
            addRegexToken("Y", matchSigned), addRegexToken("YY", match1to2, match2), addRegexToken("YYYY", match1to4, match4), 
            addRegexToken("YYYYY", match1to6, match6), addRegexToken("YYYYYY", match1to6, match6), 
            addParseToken([ "YYYYY", "YYYYYY" ], YEAR), addParseToken("YYYY", function(input, array) {
                array[YEAR] = 2 === input.length ? hooks.parseTwoDigitYear(input) : toInt(input);
            }), addParseToken("YY", function(input, array) {
                array[YEAR] = hooks.parseTwoDigitYear(input);
            }), addParseToken("Y", function(input, array) {
                array[YEAR] = parseInt(input, 10);
            }), hooks.parseTwoDigitYear = function(input) {
                return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
            };
            var getSetYear = makeGetSet("FullYear", !0);
            addFormatToken("w", [ "ww", 2 ], "wo", "week"), addFormatToken("W", [ "WW", 2 ], "Wo", "isoWeek"), 
            addUnitAlias("week", "w"), addUnitAlias("isoWeek", "W"), addUnitPriority("week", 5), 
            addUnitPriority("isoWeek", 5), addRegexToken("w", match1to2), addRegexToken("ww", match1to2, match2), 
            addRegexToken("W", match1to2), addRegexToken("WW", match1to2, match2), addWeekParseToken([ "w", "ww", "W", "WW" ], function(input, week, config, token) {
                week[token.substr(0, 1)] = toInt(input);
            });
            var defaultLocaleWeek = {
                dow: 0,
                doy: 6
            };
            addFormatToken("d", 0, "do", "day"), addFormatToken("dd", 0, 0, function(format) {
                return this.localeData().weekdaysMin(this, format);
            }), addFormatToken("ddd", 0, 0, function(format) {
                return this.localeData().weekdaysShort(this, format);
            }), addFormatToken("dddd", 0, 0, function(format) {
                return this.localeData().weekdays(this, format);
            }), addFormatToken("e", 0, 0, "weekday"), addFormatToken("E", 0, 0, "isoWeekday"), 
            addUnitAlias("day", "d"), addUnitAlias("weekday", "e"), addUnitAlias("isoWeekday", "E"), 
            addUnitPriority("day", 11), addUnitPriority("weekday", 11), addUnitPriority("isoWeekday", 11), 
            addRegexToken("d", match1to2), addRegexToken("e", match1to2), addRegexToken("E", match1to2), 
            addRegexToken("dd", function(isStrict, locale) {
                return locale.weekdaysMinRegex(isStrict);
            }), addRegexToken("ddd", function(isStrict, locale) {
                return locale.weekdaysShortRegex(isStrict);
            }), addRegexToken("dddd", function(isStrict, locale) {
                return locale.weekdaysRegex(isStrict);
            }), addWeekParseToken([ "dd", "ddd", "dddd" ], function(input, week, config, token) {
                var weekday = config._locale.weekdaysParse(input, token, config._strict);
                null != weekday ? week.d = weekday : getParsingFlags(config).invalidWeekday = input;
            }), addWeekParseToken([ "d", "e", "E" ], function(input, week, config, token) {
                week[token] = toInt(input);
            });
            var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
            addFormatToken("H", [ "HH", 2 ], 0, "hour"), addFormatToken("h", [ "hh", 2 ], 0, hFormat), 
            addFormatToken("k", [ "kk", 2 ], 0, kFormat), addFormatToken("hmm", 0, 0, function() {
                return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
            }), addFormatToken("hmmss", 0, 0, function() {
                return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
            }), addFormatToken("Hmm", 0, 0, function() {
                return "" + this.hours() + zeroFill(this.minutes(), 2);
            }), addFormatToken("Hmmss", 0, 0, function() {
                return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
            }), meridiem("a", !0), meridiem("A", !1), addUnitAlias("hour", "h"), addUnitPriority("hour", 13), 
            addRegexToken("a", matchMeridiem), addRegexToken("A", matchMeridiem), addRegexToken("H", match1to2), 
            addRegexToken("h", match1to2), addRegexToken("k", match1to2), addRegexToken("HH", match1to2, match2), 
            addRegexToken("hh", match1to2, match2), addRegexToken("kk", match1to2, match2), 
            addRegexToken("hmm", match3to4), addRegexToken("hmmss", match5to6), addRegexToken("Hmm", match3to4), 
            addRegexToken("Hmmss", match5to6), addParseToken([ "H", "HH" ], HOUR), addParseToken([ "k", "kk" ], function(input, array, config) {
                var kInput = toInt(input);
                array[HOUR] = 24 === kInput ? 0 : kInput;
            }), addParseToken([ "a", "A" ], function(input, array, config) {
                config._isPm = config._locale.isPM(input), config._meridiem = input;
            }), addParseToken([ "h", "hh" ], function(input, array, config) {
                array[HOUR] = toInt(input), getParsingFlags(config).bigHour = !0;
            }), addParseToken("hmm", function(input, array, config) {
                var pos = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos)), array[MINUTE] = toInt(input.substr(pos)), 
                getParsingFlags(config).bigHour = !0;
            }), addParseToken("hmmss", function(input, array, config) {
                var pos1 = input.length - 4, pos2 = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos1)), array[MINUTE] = toInt(input.substr(pos1, 2)), 
                array[SECOND] = toInt(input.substr(pos2)), getParsingFlags(config).bigHour = !0;
            }), addParseToken("Hmm", function(input, array, config) {
                var pos = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos)), array[MINUTE] = toInt(input.substr(pos));
            }), addParseToken("Hmmss", function(input, array, config) {
                var pos1 = input.length - 4, pos2 = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos1)), array[MINUTE] = toInt(input.substr(pos1, 2)), 
                array[SECOND] = toInt(input.substr(pos2));
            });
            var globalLocale, defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", !0), baseConfig = {
                calendar: defaultCalendar,
                longDateFormat: defaultLongDateFormat,
                invalidDate: "Invalid date",
                ordinal: "%d",
                dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
                relativeTime: defaultRelativeTime,
                months: defaultLocaleMonths,
                monthsShort: defaultLocaleMonthsShort,
                week: defaultLocaleWeek,
                weekdays: defaultLocaleWeekdays,
                weekdaysMin: defaultLocaleWeekdaysMin,
                weekdaysShort: defaultLocaleWeekdaysShort,
                meridiemParse: defaultLocaleMeridiemParse
            }, locales = {}, localeFamilies = {}, extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [ [ "YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/ ], [ "YYYY-MM-DD", /\d{4}-\d\d-\d\d/ ], [ "GGGG-[W]WW-E", /\d{4}-W\d\d-\d/ ], [ "GGGG-[W]WW", /\d{4}-W\d\d/, !1 ], [ "YYYY-DDD", /\d{4}-\d{3}/ ], [ "YYYY-MM", /\d{4}-\d\d/, !1 ], [ "YYYYYYMMDD", /[+-]\d{10}/ ], [ "YYYYMMDD", /\d{8}/ ], [ "GGGG[W]WWE", /\d{4}W\d{3}/ ], [ "GGGG[W]WW", /\d{4}W\d{2}/, !1 ], [ "YYYYDDD", /\d{7}/ ] ], isoTimes = [ [ "HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/ ], [ "HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/ ], [ "HH:mm:ss", /\d\d:\d\d:\d\d/ ], [ "HH:mm", /\d\d:\d\d/ ], [ "HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/ ], [ "HHmmss,SSSS", /\d\d\d\d\d\d,\d+/ ], [ "HHmmss", /\d\d\d\d\d\d/ ], [ "HHmm", /\d\d\d\d/ ], [ "HH", /\d\d/ ] ], aspNetJsonRegex = /^\/?Date\((\-?\d+)/i, basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;
            hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
                config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
            }), hooks.ISO_8601 = function() {}, hooks.RFC_2822 = function() {};
            var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
                var other = createLocal.apply(null, arguments);
                return this.isValid() && other.isValid() ? other < this ? this : other : createInvalid();
            }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
                var other = createLocal.apply(null, arguments);
                return this.isValid() && other.isValid() ? other > this ? this : other : createInvalid();
            }), now = function() {
                return Date.now ? Date.now() : +new Date();
            }, ordering = [ "year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond" ];
            offset("Z", ":"), offset("ZZ", ""), addRegexToken("Z", matchShortOffset), addRegexToken("ZZ", matchShortOffset), 
            addParseToken([ "Z", "ZZ" ], function(input, array, config) {
                config._useUTC = !0, config._tzm = offsetFromString(matchShortOffset, input);
            });
            var chunkOffset = /([\+\-]|\d\d)/gi;
            hooks.updateOffset = function() {};
            var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/, isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
            createDuration.fn = Duration.prototype, createDuration.invalid = createInvalid$1;
            var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
            hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ", hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
            var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
                return void 0 === key ? this.localeData() : this.locale(key);
            });
            addFormatToken(0, [ "gg", 2 ], 0, function() {
                return this.weekYear() % 100;
            }), addFormatToken(0, [ "GG", 2 ], 0, function() {
                return this.isoWeekYear() % 100;
            }), addWeekYearFormatToken("gggg", "weekYear"), addWeekYearFormatToken("ggggg", "weekYear"), 
            addWeekYearFormatToken("GGGG", "isoWeekYear"), addWeekYearFormatToken("GGGGG", "isoWeekYear"), 
            addUnitAlias("weekYear", "gg"), addUnitAlias("isoWeekYear", "GG"), addUnitPriority("weekYear", 1), 
            addUnitPriority("isoWeekYear", 1), addRegexToken("G", matchSigned), addRegexToken("g", matchSigned), 
            addRegexToken("GG", match1to2, match2), addRegexToken("gg", match1to2, match2), 
            addRegexToken("GGGG", match1to4, match4), addRegexToken("gggg", match1to4, match4), 
            addRegexToken("GGGGG", match1to6, match6), addRegexToken("ggggg", match1to6, match6), 
            addWeekParseToken([ "gggg", "ggggg", "GGGG", "GGGGG" ], function(input, week, config, token) {
                week[token.substr(0, 2)] = toInt(input);
            }), addWeekParseToken([ "gg", "GG" ], function(input, week, config, token) {
                week[token] = hooks.parseTwoDigitYear(input);
            }), addFormatToken("Q", 0, "Qo", "quarter"), addUnitAlias("quarter", "Q"), addUnitPriority("quarter", 7), 
            addRegexToken("Q", match1), addParseToken("Q", function(input, array) {
                array[MONTH] = 3 * (toInt(input) - 1);
            }), addFormatToken("D", [ "DD", 2 ], "Do", "date"), addUnitAlias("date", "D"), addUnitPriority("date", 9), 
            addRegexToken("D", match1to2), addRegexToken("DD", match1to2, match2), addRegexToken("Do", function(isStrict, locale) {
                return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
            }), addParseToken([ "D", "DD" ], DATE), addParseToken("Do", function(input, array) {
                array[DATE] = toInt(input.match(match1to2)[0], 10);
            });
            var getSetDayOfMonth = makeGetSet("Date", !0);
            addFormatToken("DDD", [ "DDDD", 3 ], "DDDo", "dayOfYear"), addUnitAlias("dayOfYear", "DDD"), 
            addUnitPriority("dayOfYear", 4), addRegexToken("DDD", match1to3), addRegexToken("DDDD", match3), 
            addParseToken([ "DDD", "DDDD" ], function(input, array, config) {
                config._dayOfYear = toInt(input);
            }), addFormatToken("m", [ "mm", 2 ], 0, "minute"), addUnitAlias("minute", "m"), 
            addUnitPriority("minute", 14), addRegexToken("m", match1to2), addRegexToken("mm", match1to2, match2), 
            addParseToken([ "m", "mm" ], MINUTE);
            var getSetMinute = makeGetSet("Minutes", !1);
            addFormatToken("s", [ "ss", 2 ], 0, "second"), addUnitAlias("second", "s"), addUnitPriority("second", 15), 
            addRegexToken("s", match1to2), addRegexToken("ss", match1to2, match2), addParseToken([ "s", "ss" ], SECOND);
            var getSetSecond = makeGetSet("Seconds", !1);
            addFormatToken("S", 0, 0, function() {
                return ~~(this.millisecond() / 100);
            }), addFormatToken(0, [ "SS", 2 ], 0, function() {
                return ~~(this.millisecond() / 10);
            }), addFormatToken(0, [ "SSS", 3 ], 0, "millisecond"), addFormatToken(0, [ "SSSS", 4 ], 0, function() {
                return 10 * this.millisecond();
            }), addFormatToken(0, [ "SSSSS", 5 ], 0, function() {
                return 100 * this.millisecond();
            }), addFormatToken(0, [ "SSSSSS", 6 ], 0, function() {
                return 1e3 * this.millisecond();
            }), addFormatToken(0, [ "SSSSSSS", 7 ], 0, function() {
                return 1e4 * this.millisecond();
            }), addFormatToken(0, [ "SSSSSSSS", 8 ], 0, function() {
                return 1e5 * this.millisecond();
            }), addFormatToken(0, [ "SSSSSSSSS", 9 ], 0, function() {
                return 1e6 * this.millisecond();
            }), addUnitAlias("millisecond", "ms"), addUnitPriority("millisecond", 16), addRegexToken("S", match1to3, match1), 
            addRegexToken("SS", match1to3, match2), addRegexToken("SSS", match1to3, match3);
            var token;
            for (token = "SSSS"; token.length <= 9; token += "S") addRegexToken(token, matchUnsigned);
            for (token = "S"; token.length <= 9; token += "S") addParseToken(token, parseMs);
            var getSetMillisecond = makeGetSet("Milliseconds", !1);
            addFormatToken("z", 0, 0, "zoneAbbr"), addFormatToken("zz", 0, 0, "zoneName");
            var proto = Moment.prototype;
            proto.add = add, proto.calendar = calendar$1, proto.clone = clone, proto.diff = diff, 
            proto.endOf = endOf, proto.format = format, proto.from = from, proto.fromNow = fromNow, 
            proto.to = to, proto.toNow = toNow, proto.get = stringGet, proto.invalidAt = invalidAt, 
            proto.isAfter = isAfter, proto.isBefore = isBefore, proto.isBetween = isBetween, 
            proto.isSame = isSame, proto.isSameOrAfter = isSameOrAfter, proto.isSameOrBefore = isSameOrBefore, 
            proto.isValid = isValid$2, proto.lang = lang, proto.locale = locale, proto.localeData = localeData, 
            proto.max = prototypeMax, proto.min = prototypeMin, proto.parsingFlags = parsingFlags, 
            proto.set = stringSet, proto.startOf = startOf, proto.subtract = subtract, proto.toArray = toArray, 
            proto.toObject = toObject, proto.toDate = toDate, proto.toISOString = toISOString, 
            proto.inspect = inspect, proto.toJSON = toJSON, proto.toString = toString, proto.unix = unix, 
            proto.valueOf = valueOf, proto.creationData = creationData, proto.year = getSetYear, 
            proto.isLeapYear = getIsLeapYear, proto.weekYear = getSetWeekYear, proto.isoWeekYear = getSetISOWeekYear, 
            proto.quarter = proto.quarters = getSetQuarter, proto.month = getSetMonth, proto.daysInMonth = getDaysInMonth, 
            proto.week = proto.weeks = getSetWeek, proto.isoWeek = proto.isoWeeks = getSetISOWeek, 
            proto.weeksInYear = getWeeksInYear, proto.isoWeeksInYear = getISOWeeksInYear, proto.date = getSetDayOfMonth, 
            proto.day = proto.days = getSetDayOfWeek, proto.weekday = getSetLocaleDayOfWeek, 
            proto.isoWeekday = getSetISODayOfWeek, proto.dayOfYear = getSetDayOfYear, proto.hour = proto.hours = getSetHour, 
            proto.minute = proto.minutes = getSetMinute, proto.second = proto.seconds = getSetSecond, 
            proto.millisecond = proto.milliseconds = getSetMillisecond, proto.utcOffset = getSetOffset, 
            proto.utc = setOffsetToUTC, proto.local = setOffsetToLocal, proto.parseZone = setOffsetToParsedOffset, 
            proto.hasAlignedHourOffset = hasAlignedHourOffset, proto.isDST = isDaylightSavingTime, 
            proto.isLocal = isLocal, proto.isUtcOffset = isUtcOffset, proto.isUtc = isUtc, proto.isUTC = isUtc, 
            proto.zoneAbbr = getZoneAbbr, proto.zoneName = getZoneName, proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth), 
            proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth), 
            proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear), 
            proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone), 
            proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
            var proto$1 = Locale.prototype;
            proto$1.calendar = calendar, proto$1.longDateFormat = longDateFormat, proto$1.invalidDate = invalidDate, 
            proto$1.ordinal = ordinal, proto$1.preparse = preParsePostFormat, proto$1.postformat = preParsePostFormat, 
            proto$1.relativeTime = relativeTime, proto$1.pastFuture = pastFuture, proto$1.set = set, 
            proto$1.months = localeMonths, proto$1.monthsShort = localeMonthsShort, proto$1.monthsParse = localeMonthsParse, 
            proto$1.monthsRegex = monthsRegex, proto$1.monthsShortRegex = monthsShortRegex, 
            proto$1.week = localeWeek, proto$1.firstDayOfYear = localeFirstDayOfYear, proto$1.firstDayOfWeek = localeFirstDayOfWeek, 
            proto$1.weekdays = localeWeekdays, proto$1.weekdaysMin = localeWeekdaysMin, proto$1.weekdaysShort = localeWeekdaysShort, 
            proto$1.weekdaysParse = localeWeekdaysParse, proto$1.weekdaysRegex = weekdaysRegex, 
            proto$1.weekdaysShortRegex = weekdaysShortRegex, proto$1.weekdaysMinRegex = weekdaysMinRegex, 
            proto$1.isPM = localeIsPM, proto$1.meridiem = localeMeridiem, getSetGlobalLocale("en", {
                dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
                ordinal: function(number) {
                    var b = number % 10;
                    return number + (1 === toInt(number % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th");
                }
            }), hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale), 
            hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
            var mathAbs = Math.abs, asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asYears = makeAs("y"), milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years"), round = Math.round, thresholds = {
                ss: 44,
                s: 45,
                m: 45,
                h: 22,
                d: 26,
                M: 11
            }, abs$1 = Math.abs, proto$2 = Duration.prototype;
            return proto$2.isValid = isValid$1, proto$2.abs = abs, proto$2.add = add$1, proto$2.subtract = subtract$1, 
            proto$2.as = as, proto$2.asMilliseconds = asMilliseconds, proto$2.asSeconds = asSeconds, 
            proto$2.asMinutes = asMinutes, proto$2.asHours = asHours, proto$2.asDays = asDays, 
            proto$2.asWeeks = asWeeks, proto$2.asMonths = asMonths, proto$2.asYears = asYears, 
            proto$2.valueOf = valueOf$1, proto$2._bubble = bubble, proto$2.get = get$2, proto$2.milliseconds = milliseconds, 
            proto$2.seconds = seconds, proto$2.minutes = minutes, proto$2.hours = hours, proto$2.days = days, 
            proto$2.weeks = weeks, proto$2.months = months, proto$2.years = years, proto$2.humanize = humanize, 
            proto$2.toISOString = toISOString$1, proto$2.toString = toISOString$1, proto$2.toJSON = toISOString$1, 
            proto$2.locale = locale, proto$2.localeData = localeData, proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1), 
            proto$2.lang = lang, addFormatToken("X", 0, 0, "unix"), addFormatToken("x", 0, 0, "valueOf"), 
            addRegexToken("x", matchSigned), addRegexToken("X", matchTimestamp), addParseToken("X", function(input, array, config) {
                config._d = new Date(1e3 * parseFloat(input, 10));
            }), addParseToken("x", function(input, array, config) {
                config._d = new Date(toInt(input));
            }), hooks.version = "2.18.1", function(callback) {
                hookCallback = callback;
            }(createLocal), hooks.fn = proto, hooks.min = min, hooks.max = max, hooks.now = now, 
            hooks.utc = createUTC, hooks.unix = createUnix, hooks.months = listMonths, hooks.isDate = isDate, 
            hooks.locale = getSetGlobalLocale, hooks.invalid = createInvalid, hooks.duration = createDuration, 
            hooks.isMoment = isMoment, hooks.weekdays = listWeekdays, hooks.parseZone = createInZone, 
            hooks.localeData = getLocale, hooks.isDuration = isDuration, hooks.monthsShort = listMonthsShort, 
            hooks.weekdaysMin = listWeekdaysMin, hooks.defineLocale = defineLocale, hooks.updateLocale = updateLocale, 
            hooks.locales = listLocales, hooks.weekdaysShort = listWeekdaysShort, hooks.normalizeUnits = normalizeUnits, 
            hooks.relativeTimeRounding = getSetRelativeTimeRounding, hooks.relativeTimeThreshold = getSetRelativeTimeThreshold, 
            hooks.calendarFormat = getCalendarFormat, hooks.prototype = proto, hooks;
        });
    }).call(exports, __webpack_require__(67)(module));
}, function(module, exports) {
    var path = "/financeTitleParcelPay/views/paymentPrint.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '<div class="printable-area">\n    <div>\n        <div class="receipt-header-number">\n            <label style="margin: 0 5px 0 5px;">Número do Recibo</label><br/>\n            <label>{{numberReceipt}}</label>\n        </div>\n        <div class="receipt-header-name">\n            <h1>RECIBO DE PAGAMENTO</h1>\n        </div>\n        <div class="receipt-header-value" >\n            <label style="margin-right: 10px;" class="padding">{{recibo.value| currency: \'R$ \'}}</label><br/>\n        </div>\n    </div>\n    <hr class="line" />\n    <div style="margin: 5px;">\n        <label>Recebi de: {{user.organization}} a importancia de: ({{recibo.numberInWords}}) referente à:</label>\n    </div>\n    <div>\n        <div class="table-title">\n            <label>Titulos</label>\n        </div>\n        <div style="margin: 0px 10px 0px 10px;">\n            <table class="table table-condensed">\n                <tr>\n                    <td>Parcela</td>\n                    <td>Documento</td>\n                    <td>Vencimento</td>\n                    <td>Valor Doc</td>\n                    <td>Juros/Multa</td>\n                    <td>Amortização</td>\n                    <td>a Pagar</td>\n                </tr>\n                <tr ng-repeat="parcels in recibo.parcels">\n                    <td>{{parcels.number}}/{{parcels.titleData.parcelsCount}}</td>\n                    <td>12346</td>\n                    <td>{{parcels.expiration| date:"MM/dd/yyyy"}}</td>\n                    <td>{{parcels.titleData.totalValue| currency: "R$ "}}</td>\n                    <td>{{(parcels.calculedInterest + parcels.calculedPenalty) | currency: "R$ " }}</td>\n                    <td>{{(parcels.titleData.totalValue - parcels.remaining) | currency: "R$ "}}</td>\n                    <td>{{((parcels.remaining + (parcels.calculedInterest + parcels.calculedPenalty)) - parcels.discount.value) | currency: "R$ "}}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div class="table-title">\n        <label>Método Pagamento</label>\n    </div>\n    <div style="margin: 0 10px 0 10px;">\n        <table class="table table-condensed">\n            <tr>\n                <td>Método</td>\n                <td>Nr. Cheque / Operação</td>\n                <td>Banco/Conta</td>\n                <td>Vcto</td>\n                <td>Valor</td>\n            </tr>\n            <tr ng-repeat="payment in recibo.methodPayment">\n                <td ng-if="payment.method == \'check\'">Cheque Terceiro</td>\n                <td ng-if="payment.method == \'checkCompany\'">Cheque Empresa</td>\n                <td ng-if="payment.method == \'money\'">Dinheiro</td>\n                <td ng-if="payment.method == \'card\'">Cartão</td>\n                <td ng-if="payment.method == \'bank\'">Banco / {{payment.type}}</td>\n\n                <td ng-if="payment.method == \'check\'" ng-repeat="check in payment.selectedChecks">{{check.chequeNumber}}</td>\n                <td ng-if="payment.method == \'checkCompany\'">{{payment.chequeNumber}}</td>\n                <td ng-if="payment.method == \'money\'">-</td>\n                <td ng-if="payment.method == \'card\'">-</td>\n                <td ng-if="payment.method == \'bank\'">{{payment.operationNumber}}</td>\n\n                <td ng-if="payment.method == \'check\'">{{payment.financeunit.name}}</td>\n                <td ng-if="payment.method == \'checkCompany\'">{{payment.financeunit.account}}</td>\n                <td ng-if="payment.method == \'money\'">{{payment.financeunit.name}}</td>\n                <td ng-if="payment.method == \'card\'">{{payment.financeunit.name}}</td>\n                <td ng-if="payment.method == \'bank\'">{{payment.financeunit.name}}</td>\n\n                <td ng-if="payment.method == \'check\'" ng-repeat="check in payment.selectedChecks">{{check.validUntil| date: "dd/MM/yyyy"}}</td>\n                <td ng-if="payment.method == \'checkCompany\'">{{payment.availableIn| date: "dd/MM/yyyy"}}</td>\n                <td ng-if="payment.method == \'money\'">-</td>\n                <td ng-if="payment.method == \'card\'">-</td>\n                <td ng-if="payment.method == \'bank\'">-</td>\n                <td>{{payment.value| currency: "R$ "}}</td>\n            </tr>\n        </table>\n    </div>\n    <div class="signature">\n        <label>____________________________________________________</label><br/>\n        <label>{{user.organization}}</label>\n        <label class="pull-right">Maringá - {{recibo.momment| date: "dd/MM/yyyy"}}</label>\n    </div>\n</div>\n<div class="modal-footer">\n    <button class="btn btn-success" type="button" ng-click="print()">Imprimir</button>\n    <button class="btn btn-warning" type="button" ng-click="cancel()">Cancelar</button>\n</div>');
    } ]), module.exports = path;
}, function(module, exports) {
    var path = "/financeTitleParcelReceive/views/receiptPrint.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '<div class="printable-area">\n    <div>\n        <div class="receipt-header-number">\n            <label style="margin: 0 5px 0 5px;">Número do Recibo</label><br/>\n            <label>{{numberReceipt}}</label>\n        </div>\n        <div class="receipt-header-name-receive" >\n            <h1>RECIBO</h1>\n        </div>\n        <div class="receipt-header-value">\n            <label class="padding">{{recibo.value| currency: \'R$ \'}}</label><br/>\n        </div>\n    </div>\n    <hr class="line" />\n    <div style="margin: 5px;">\n        <label>Recebi de: {{recibo.parcels[0].individual.name}} a importancia de: ({{recibo.numberInWords}}) referente à:</label>\n    </div>\n    <div>\n        <div class="table-title">\n            <label>Titulos</label>\n        </div>\n        <div style="margin: 0px 10px 0px 10px;">\n            <table class="table table-condensed">\n                <tr>\n                    <td>Parcela</td>\n                    <td>Documento</td>\n                    <td>Vencimento</td>\n                    <td>Valor Doc</td>\n                    <td>Juros/Multa</td>\n                    <td>Amortização</td>\n                    <td>a Pagar</td>\n                </tr>\n                <tr ng-repeat="parcels in recibo.parcels">\n                    <td>{{parcels.number}}/{{parcels.titleData.parcelsCount}}</td>\n                    <td>12346</td>\n                    <td>{{parcels.expiration| date:"MM/dd/yyyy"}}</td>\n                    <td>{{parcels.titleData.totalValue| currency: "R$ "}}</td>\n                    <td>{{(parcels.calculedInterest + parcels.calculedPenalty) | currency: "R$ " }}</td>\n                    <td>{{(parcels.titleData.totalValue - parcels.remaining) | currency: "R$ "}}</td>\n                    <td>{{((parcels.remaining + (parcels.calculedInterest + parcels.calculedPenalty)) - parcels.discount.value) | currency: "R$ "}}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div class="table-title">\n        <label>Método Recebimento</label>\n    </div>\n    <div style="margin: 0 10px 0 10px;">\n        <table class="table table-condensed">\n            <tr>\n                <td>Método</td>\n                <td>Nr. Cheque / Operação</td>\n                <td>Carteira / Conta</td>\n                <td>Vcto</td>\n                <td>Valor</td>\n            </tr>\n            <tr ng-repeat="receive in recibo.methodReceive">\n                <td ng-if="receive.method == \'money\'">Dinheiro</td>\n                <td ng-if="receive.method == \'check\'">Cheque</td>\n                <td ng-if="receive.method == \'bank\'">Banco / {{receive.type}}</td>\n                <td ng-if="receive.method == \'card\'">Cartão</td>\n\n                <td ng-if="receive.method == \'money\'">-</td>\n                <td ng-if="receive.method == \'check\'">{{receive.chequeNumber}}</td>\n                <td ng-if="receive.method == \'bank\'">{{receive.operationNumber}}</td>\n                <td ng-if="receive.method == \'card\'">-</td>\n\n                <td ng-if="receive.method == \'money\'">{{receive.financeUnit.name}}</td>\n                <td ng-if="receive.method == \'check\'">{{receive.financeUnit.name}}</td>\n                <td ng-if="receive.method == \'bank\'">{{receive.financeUnit.name}}</td>\n                <td ng-if="receive.method == \'card\'">{{receive.financeUnit.name}}</td>\n\n                <td ng-if="receive.method == \'money\'">-</td>\n                <td ng-if="receive.method == \'check\'">{{receive.availableIn| date: "dd/MM/yyyy"}}</td>\n                <td ng-if="receive.method == \'bank\'">-</td>\n                <td ng-if="receive.method == \'card\'">-</td>\n                <td>{{receive.value| currency: "R$ "}}</td>\n            </tr>\n        </table>\n    </div>\n    <div class="signature">\n        <label>____________________________________________________</label><br/>\n        <label>{{user.organization}}</label>\n        <label class="pull-right">Maringá - {{recibo.momment| date: "dd/MM/yyyy"}}</label>\n    </div>\n</div>\n<div class="modal-footer">\n    <button class="btn btn-success" type="button" ng-click="print()">Imprimir</button>\n    <button class="btn btn-warning" type="button" ng-click="cancel()">Cancelar</button>\n</div>\n');
    } ]), module.exports = path;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var ngDynamicController = function($compile, $parse) {
        return {
            restrict: "A",
            terminal: !0,
            priority: 1e5,
            link: function(scope, elem) {
                var name = $parse(elem.attr("ng-dynamic-controller"))(scope);
                elem.removeAttr("ng-dynamic-controller"), elem.attr("ng-controller", name), $compile(elem)(scope);
            }
        };
    };
    ngDynamicController.$inject = [ "$compile", "$parse" ], exports.default = ngDynamicController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.default = angular.module("group.dependencies", [ "gumga.rest", "gumga.controller", "gumga.alert", "gumga.webstorage", "gumga.manytoone", "gumga.address", "gumga.translate", "gumga.mask", "gumga.upload", "gumga.customfields", "gumga.counter", "gumga.breadcrumb", "gumga.confirm", "gumga.onetomany", "gumga.populate", "gumga.manytomany", "gumga.form", "gumga.queryfilter", "gumga.genericfilter", "gumga.list", "gumga.date", "gumga.numberinwords", "ui.utils.masks", "gumga.layout", "ui.select" ]);
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var bindHtmlCompile = function($compile) {
        return {
            restrict: "A",
            link: function(scope, element, attrs) {
                scope.$watch(function() {
                    return scope.$eval(attrs.bindHtmlCompile);
                }, function(value) {
                    element.html(value && value.toString());
                    var compileScope = scope;
                    attrs.bindHtmlScope && (compileScope = scope.$eval(attrs.bindHtmlScope)), $compile(element.contents())(compileScope);
                });
            }
        };
    };
    bindHtmlCompile.$inject = [ "$compile" ], exports.default = bindHtmlCompile;
}, function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = angular.module("finance.cashcheckinembedded", []).controller("CashCheckinEmbeddedFormController", __webpack_require__(19)).component("cashCheckinEmbedded", __webpack_require__(18));
}, function(module, exports, __webpack_require__) {
    "use strict";
    __webpack_require__(58), module.exports = angular.module("finance.cashcheckoutembedded", []).controller("CashCheckoutEmbeddedFormController", __webpack_require__(22)).controller("BalanceModalController", __webpack_require__(21)).component("cashCheckoutEmbedded", __webpack_require__(20));
}, function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = angular.module("finance.title", [ "finance.services" ]).controller("ModalParticipationController", __webpack_require__(26)).controller("ModalLaunchPaidController", __webpack_require__(25)).controller("TitleListEmbeddedController", __webpack_require__(28)).controller("TitleFormEmbeddedController", __webpack_require__(27)).component("financeTitleList", __webpack_require__(24)).component("financeTitleForm", __webpack_require__(23));
}, function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = angular.module("finance.titleparcel", [ "finance.services" ]).controller("TitleParcelPayListEmbeddedController", __webpack_require__(33)).controller("ReceivePrintEmbeddedController", __webpack_require__(32)).controller("PayEmbeddedController", __webpack_require__(31)).component("financeTitleParcelPayPayment", __webpack_require__(30)).component("financeTitleParcelPayList", __webpack_require__(29));
}, function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = angular.module("finance.titleparcelreceive", [ "finance.services", "finance.titleparcel" ]).controller("TitleParcelReceiveListEmbeddedController", __webpack_require__(37)).controller("PayReceiveEmbeddedController", __webpack_require__(36)).component("financeTitleParcelReceivePayment", __webpack_require__(35)).component("financeTitleParcelReceiveList", __webpack_require__(34));
}, function(module, exports, __webpack_require__) {
    "use strict";
    __webpack_require__(0), module.exports = angular.module("finance.services", [ "finance.providers" ]).service("WalletService", __webpack_require__(56)).service("RatioPlanService", __webpack_require__(53)).service("IndividualEmbeddedService", __webpack_require__(49)).service("FinanceUnitService", __webpack_require__(47)).service("DocumentTypeService", __webpack_require__(45)).service("PlanLeafService", __webpack_require__(52)).service("TitleService", __webpack_require__(4)).service("CashCheckinEmbeddedService", __webpack_require__(1)).service("EmployeeService", __webpack_require__(2)).service("FinanceUnitGroupService", __webpack_require__(3)).service("TitleParcelPayService", __webpack_require__(55)).service("FinanceConfigurationService", __webpack_require__(46)).service("CheckingAccountService", __webpack_require__(41)).service("ThirdPartyChequeService", __webpack_require__(54)).service("PaymentService", __webpack_require__(51)).service("LocalCashService", __webpack_require__(50)).service("ChequePortfolioService", __webpack_require__(42)).service("IndividualCreditService", __webpack_require__(48)).service("CreditCardAccountService", __webpack_require__(43)).service("DocTedService", __webpack_require__(44)).service("BankService", __webpack_require__(40)).service("TitleService", __webpack_require__(4)).service("CashCheckinEmbeddedService", __webpack_require__(1)).service("EmployeeService", __webpack_require__(2)).service("FinanceUnitGroupService", __webpack_require__(3));
}, function(module, exports) {}, function(module, exports, __webpack_require__) {
    "use strict";
    var template = __webpack_require__(57);
    module.exports = {
        templateUrl: template,
        controller: "CashCheckinEmbeddedFormController",
        bindings: {
            employee: "=",
            disableOpening: "=",
            onGoHome: "&"
        }
    };
}, function(module, exports, __webpack_require__) {
    "use strict";
    function CashCheckinEmbeddedFormController($scope, CashCheckinEmbeddedService, FinanceUnitGroupService, FinanceUnitService, $filter, $timeout) {
        function onSelectGroup(value) {
            value.id ? FinanceUnitGroupService.getById(value.id).then(function(data) {
                $scope.financeUnits = data.data.financeUnits;
            }) : $scope.financeUnits = null, $scope.entity.change = 0, $scope.entity.originChange = null, 
            $scope.entity.destinyChange = null;
        }
        function isUnitsValids(attribute) {
            $timeout(function() {
                $scope.entity.originChange && $scope.entity.destinyChange && $scope.entity.originChange.id === $scope.entity.destinyChange.id && ($scope.entity[attribute] = null);
            });
        }
        $scope.entity = {}, $scope.entity.employee = angular.copy($scope.$ctrl.employee), 
        $scope.entity.date = new Date(), $scope.disableOpening = $scope.$ctrl.disableOpening, 
        $scope.getGroups = function(param) {
            return FinanceUnitGroupService.getSearch("name", param || "").then(function(data) {
                return $scope.groups = data.data.values;
            });
        }, $scope.open = function(entity) {
            entity.status = "NORMAL", CashCheckinEmbeddedService.update(entity).then(function(data) {
                $scope.$ctrl.onGoHome({
                    data: data
                });
            });
        }, $scope.formatDate = function(date) {
            return $filter("date")(new Date(date), "dd/MM/yyyy HH:mm:ss");
        }, $scope.onSelectGroup = onSelectGroup, $scope.onDeselectGroup = function(value) {
            onSelectGroup(value);
        }, $scope.getChangeOrigin = function(param) {
            return FinanceUnitService.getSearch("name", param).then(function(data) {
                return data.data.values;
            });
        }, $scope.onSelectOrigin = function() {
            isUnitsValids("originChange");
        }, $scope.onSelectDestiny = function() {
            isUnitsValids("destinyChange");
        }, $scope.disabledOpenCash = function(entity) {
            return $scope.disableOpening || null == entity.employee || null == entity.group || null == entity.group.id || entity.change && (null == entity.originChange || null == entity.destinyChange);
        };
    }
    CashCheckinEmbeddedFormController.$inject = [ "$scope", "CashCheckinEmbeddedService", "FinanceUnitGroupService", "FinanceUnitService", "$filter", "$timeout" ], 
    module.exports = CashCheckinEmbeddedFormController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    var template = __webpack_require__(59);
    module.exports = {
        templateUrl: template,
        controller: "CashCheckoutEmbeddedFormController",
        bindings: {
            entity: "=",
            onGoHome: "&"
        }
    };
}, function(module, exports, __webpack_require__) {
    "use strict";
    function BalanceModalController($scope, $uibModalInstance, entries, config) {
        $scope.entries = angular.copy(entries.data.values), $scope.title = angular.copy(config.title);
        var columns = "date, historic, financeunit, value, balance";
        "FINANCEUNIT" === config.type ? columns = columns.replace("financeunit,", "") : angular.noop(), 
        $scope.tableConfig = {
            columns: columns,
            materialTheme: !0,
            ordination: !1,
            resizable: !1,
            selection: !1,
            columnsConfig: [ {
                name: "date",
                size: "col-md-2",
                title: "<div>Data</div>",
                content: '<div>{{$value.momment | date:"dd/MM/yyyy HH:mm:ss"}}</div>'
            }, {
                name: "historic",
                size: "col-md-4",
                title: "<div>Histórico</div>",
                content: '<div class="table-ellipsis">{{$value.historic }}</div>'
            }, {
                name: "financeunit",
                size: "col-md-2",
                title: "<div>Unidade Financeira</div>",
                content: "<div><span>{{$value.financeUnitName }}</span></div>"
            }, {
                name: "value",
                size: "col-md-2",
                title: "<div>Valor</div>",
                content: "<div><span ng-class=\"$value.value < 0 ? 'color-red' : ''\">{{$value.value | currency }}</span></div>"
            }, {
                name: "balance",
                size: "col-md-2",
                title: "<div>Saldo</div>",
                content: "<div><span ng-class=\"$value.balance < 0 ? 'color-red' : ''\">{{$value.balance | currency }}</span></div>"
            } ]
        }, $scope.close = function() {
            $uibModalInstance.close();
        };
    }
    BalanceModalController.$inject = [ "$scope", "$uibModalInstance", "entries", "config" ], 
    module.exports = BalanceModalController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function CashCheckoutEmbeddedFormController($scope, CashCheckinEmbeddedService, FinanceUnitService, SweetAlert, $filter, $uibModal) {
        function validateDiference(entity) {
            for (var i = 0; i < entity.values.length; i++) if (!isComparationCorrect(entity.values[i], entity.destinyChange)) return SweetAlert.swal("Diferença de Valores!", "A conta " + entity.values[i].financeUnit.name + " esta com diferença de valores, realize movimentações de caixa para corrigir antes de fechar.", "error"), 
            !1;
            return !0;
        }
        function isComparationCorrect(value, destiny) {
            var change = 0;
            return destiny && destiny.id === value.financeUnit.id && (change = $scope.change || 0), 
            value.movementedValue === value.informedValue + change;
        }
        function transferAccountCorrect(entity) {
            return entity.values && entity.values.reduce(function(a, b) {
                return a && (b.financeUnit.defaultTransfer || !b.movementedValue);
            }, !0) || !!$scope.defaultTransfer;
        }
        $scope.entity = angular.copy($scope.$ctrl.entity), $scope.noCheckin = !$scope.entity, 
        $scope.close = function(entity) {
            validateDiference(entity) && !$scope.noCheckin && SweetAlert.swal({
                title: "Deseja realmente fechar o Caixa?",
                type: "warning",
                showCancelButton: !0,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Sim!",
                cancelButtonText: "Não",
                closeOnConfirm: !0,
                closeOnCancel: !0
            }, function(isConfirm) {
                isConfirm && (entity.cashCheckouts = entity.cashCheckouts || [], entity.cashCheckouts.push({
                    date: new Date(),
                    status: "NORMAL",
                    change: $scope.change,
                    defaultTransfer: $scope.defaultTransfer
                }), CashCheckinEmbeddedService.update(entity).then(function() {
                    $scope.$ctrl.onGoHome();
                }));
            });
        }, $scope.showWithoutMovement = !1, $scope.showAccountsWithoutMovement = function(cashAccount) {
            return null !== cashAccount.movementedValue && (!!$scope.showWithoutMovement || 0 !== cashAccount.movementedValue);
        }, function() {
            $scope.entity && $scope.entity.date && CashCheckinEmbeddedService.getByCurrentCashCheckin($scope.entity.date).then(function(data) {
                $scope.entity.values = $scope.entity.group.financeUnits.map(function(financeUnit) {
                    var movementedValue = data.data.filter(function(entry) {
                        return financeUnit.id === entry.financeUnit.id;
                    }).reduce(function(a, b) {
                        return a + b.value;
                    }, 0);
                    return {
                        financeUnit: financeUnit,
                        movementedValue: movementedValue,
                        informedValue: 0
                    };
                }), $scope.entity.values.sort(function(a, b) {
                    return Math.abs(b.movementedValue) - Math.abs(a.movementedValue);
                });
            });
        }(), $scope.formatDate = function(date) {
            return $filter("date")(new Date(date), "dd/MM/yyyy HH:mm:ss");
        }, $scope.getDefaultTransfer = function(param) {
            param = param || "";
            var hql = "(SELECT count(gUnit) FROM FinanceUnitGroup groups inner join groups.financeUnits gUnit WHERE groups.id = " + $scope.entity.group.id + " AND gUnit = obj) = 0 AND lower(obj.name) like '%" + param + "%'";
            return FinanceUnitService.getAdvancedSearch(hql).then(function(data) {
                return data.data.values;
            });
        }, $scope.disabledCloseCash = function() {
            return $scope.noCheckin || !transferAccountCorrect($scope.entity);
        }, $scope.showMovements = function(financeUnit) {
            $uibModal.open({
                animation: !0,
                templateUrl: "/cashcheckout/views/BalanceModal.html",
                controller: "BalanceModalController",
                backdrop: "static",
                size: "larger",
                resolve: {
                    entries: function() {
                        return FinanceUnitService.getEntriesByFinanceUnitAndCheckin(financeUnit.id, $scope.entity.id);
                    },
                    config: function() {
                        return {
                            title: "Listagem de movimentações da conta " + financeUnit.name,
                            type: "FINANCEUNIT"
                        };
                    }
                }
            });
        }, $scope.showAllMovements = function() {
            $uibModal.open({
                animation: !0,
                templateUrl: "/cashcheckout/views/BalanceModal.html",
                controller: "BalanceModalController",
                backdrop: "static",
                size: "larger",
                resolve: {
                    entries: function() {
                        return FinanceUnitService.getEntriesByCheckin($scope.entity.id);
                    },
                    config: function() {
                        return {
                            title: "Listagem de movimentações nesta abertura",
                            type: "ALL"
                        };
                    }
                }
            });
        };
    }
    CashCheckoutEmbeddedFormController.$inject = [ "$scope", "CashCheckinEmbeddedService", "FinanceUnitService", "SweetAlert", "$filter", "$uibModal" ], 
    module.exports = CashCheckoutEmbeddedFormController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    var template = __webpack_require__(60);
    module.exports = {
        templateUrl: template,
        controller: "TitleFormEmbeddedController",
        bindings: {
            typeTitle: "@",
            operation: "@",
            voice: "@",
            onParcelsEmpty: "&",
            onSaveOperationReplecement: "&",
            onBackClick: "&",
            onPayPutSuccess: "&",
            onReceivePutSuccess: "&",
            onSaveOperationRenegotiation: "&",
            entity: "="
        }
    };
}, function(module, exports, __webpack_require__) {
    "use strict";
    var template = __webpack_require__(61);
    module.exports = {
        templateUrl: template,
        controller: "TitleListEmbeddedController",
        bindings: {
            titleType: "@",
            onNewTitle: "&",
            onEditTitle: "&",
            onReplacement: "&"
        }
    };
}, function(module, exports, __webpack_require__) {
    "use strict";
    function ModalLaunchPaidController($scope, gumgaController, $uibModalInstance, FinanceUnitService, items) {
        gumgaController.createRestMethods($scope, FinanceUnitService, "financeunit"), $scope.financeunit.methods.search("name", ""), 
        $scope.title = [], $scope.ok = function(obj) {
            obj.registerAsPayed = !0, $uibModalInstance.close(obj);
        }, $scope.cancel = function() {
            $uibModalInstance.dismiss("cancel");
        };
    }
    ModalLaunchPaidController.$inject = [ "$scope", "gumgaController", "$uibModalInstance", "FinanceUnitService", "items" ], 
    module.exports = ModalLaunchPaidController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function ModalParticipationController($scope, $modalInstance, entity, $modal) {
        entity = entity || {}, $scope.entity = angular.copy(entity), $scope.ok = function(obj) {
            $modalInstance.close(obj);
        }, $scope.cancel = function() {
            $modalInstance.dismiss("cancel");
        };
    }
    ModalParticipationController.$inject = [ "$scope", "$modalInstance", "entity", "$modal" ], 
    module.exports = ModalParticipationController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function TitleFormEmbeddedController(TitleService, $uibModal, $scope, gumgaController, $timeout, IndividualEmbeddedService, DocumentTypeService, RatioPlanService, PlanLeafService, WalletService, FinanceUnitService) {
        if ($scope.entity = $scope.$ctrl.entity, gumgaController.createRestMethods($scope, DocumentTypeService, "documentType"), 
        gumgaController.createRestMethods($scope, FinanceUnitService, "financeunit"), gumgaController.createRestMethods($scope, IndividualEmbeddedService, "individual"), 
        gumgaController.createRestMethods($scope, RatioPlanService, "ratioPlan"), gumgaController.createRestMethods($scope, PlanLeafService, "planLeaf"), 
        gumgaController.createRestMethods($scope, WalletService, "wallet"), gumgaController.createRestMethods($scope, TitleService, "title"), 
        $scope.documentType.methods.search("name", ""), $scope.financeunit.methods.search("name", ""), 
        $scope.individual.methods.search("name", ""), $scope.ratioPlan.methods.search("label", ""), 
        $scope.titleType = $scope.$ctrl.typeTitle, $scope.editParcels = !1, $scope.selectArrays = [], 
        $scope.totalRateio = 0, $scope.subLeafs = [], $scope.discount = 0, $scope.tags = [], 
        $scope.step = 1, $scope.interestActive = !0, TitleService.getPlanTree().then(function(response) {
            $scope.planTree = response.data.values;
        }), $scope.postDocType = function(value) {
            return DocumentTypeService.save(value);
        }, $scope.labels = [], TitleService.getLabels().then(function(response) {
            $scope.labels = response.data.values;
        }, function(error) {
            console.error(error.data);
        }), $scope.labelTransform = function(newLabel) {
            return {
                value: newLabel
            };
        }, $scope.newPlanLeaf = function(newLabel) {
            return {
                name: newLabel
            };
        }, $scope.selectedRatio = function(item, planType, index) {
            if (item.isTag) {
                var position = $scope.title.data.planLeafs[index].length - 1, leaf = {
                    name: item.name,
                    planType: planType
                };
                PlanLeafService.save(leaf).then(function(response) {
                    $scope.title.data.planLeafs[index][position] = response.data.data;
                });
            }
        }, $scope.automaticRatio = function(value) {
            var total = $scope.sumParcels($scope.title.data.parcel);
            RatioPlanService.getAutomaticRatio(value.label, total).then(function(response) {
                $scope.title.data.planLeafs = response.data;
            });
        }, $scope.disable = !1, $scope.changeStep = function(numStep) {
            1 === numStep && ($scope.title.data.hasPayment || $scope.title.data.fullPaid || $scope.renegotiation ? ($scope.disable = !0, 
            $scope.step = numStep) : ($scope.disable = !1, $scope.step = numStep)), 2 === numStep && ($scope.disable = !0, 
            $scope.step = numStep);
        }, $scope.buscaLeafs = function(plan, query) {
            return plan.subPlanLeafs || (plan.subPlanLeafs = []), void 0 === query && (query = ""), 
            search = "obj.planType.id=" + plan.type.id + " and obj.name like '%" + query + "%'", 
            PlanLeafService.getAdvancedSearch(search).then(function(data) {
                $scope.selectArrays[plan.type.id] = data.data.values;
            });
        }, $scope.checkSubPlanLeafs = function(account) {
            account.subPlanLeafs || (account.subPlanLeafs = []);
        }, $scope.buscaSubLeafs = function(plan, query) {
            if (void 0 === query && (query = ""), plan) return search = "obj.planType.id=" + plan.type.id + " and obj.name like '%" + query + "%'", 
            PlanLeafService.getAdvancedSearch(search).then(function(data) {
                $scope.selectArray = data.data.values;
            });
        }, $scope.$ctrl.operation && "REPLECEMENT" === $scope.$ctrl.operation ? TitleService.getInstance().then(function(data) {
            $scope.replecement = $scope.entity.data, $scope.title.data = data.data;
        }) : $scope.$ctrl.operation && "RENEGOTIATION" === $scope.$ctrl.operation ? ($scope.renegotiation = !0, 
        $scope.parcels = TitleService.getRenegociationParcels(), $scope.idParcels = [], 
        angular.forEach($scope.parcels, function(parcel, index) {
            $scope.idParcels.push(parcel.id), $scope.parcels.length === index + 1 && TitleService.getParcelsDTO($scope.idParcels).then(function(data) {
                $scope.parcelsDTO = data.data;
            });
        }), 0 === $scope.parcels.length && $scope.$ctrl.onParcelsEmpty(), $scope.title.data = $scope.entity.data || {}) : $scope.title.data = $scope.entity.data || {}, 
        $scope.title.data.parcel = $scope.title.data.parcel || [], $scope.title.data.numberParcel = $scope.title.data.numberParcel || 0, 
        void 0 !== $scope.titleType && ($scope.title.data.titleType = "edit" === $scope.titleType.substr(0, 4) ? $scope.titleType.substring(4).toUpperCase() : $scope.titleType.toUpperCase()), 
        $scope.title.data.billetCollection = $scope.title.data.billetCollection || 0, $scope.title.data.memo = $scope.$ctrl.voice || "", 
        $scope.title.data.parcelpenalty = $scope.title.data.parcelpenalty || 0, $scope.title.data.parcelinterest = $scope.title.data.parcelinterest || 0, 
        $scope.title.data.expiration = $scope.title.data.expiration ? new Date($scope.title.data.expiration) : new Date(), 
        $scope.calculatedInterest = function() {
            $scope.interestActive = !$scope.interestActive, $scope.interestActive ? $scope.title.data.parcelinterest = 30 * $scope.title.data.mora / $scope.title.data.value : $scope.title.data.mora = $scope.title.data.value * $scope.title.data.parcelinterest / 30;
        }, $scope.title.data.parcel.length > 0 && ($scope.title.data.emissionDate = new Date($scope.title.data.emissionDate) || new Date()), 
        ($scope.title.data.hasPayment || $scope.title.data.fullPaid) && ($scope.disable = !0), 
        $scope.keyEnter = function($event) {
            13 === $event.keyCode && $scope.getDataFromBarcode();
        }, $scope.getDataFromBarcode = function() {
            var barcode = $scope.title.data.barcode;
            barcode && ($scope.title.data.billetCollection++, TitleService.readBarCode(barcode).then(function(response) {
                $scope.title.data.documentType = {
                    name: response.data.classe
                }, response.data.individual.length > 0 && ($scope.title.data.assignedIndividual = response.data.individual[0], 
                null !== response.data.individual[0].preferentialRatioPlan && $scope.automaticRatio(response.data.individual[0].preferentialRatioPlan)), 
                $scope.title.data.documentNumber = response.data.ourNumber, $scope.title.data.value = response.data.numberValue, 
                "9" === response.data.checkDigit || "4" === response.data.checkDigit ? $scope.title.data.expiration = new Date() : $scope.title.data.expiration = new Date(response.data.expirationDate);
                var itemLabel = {
                    value: response.data.classe,
                    isTag: !0
                };
                $scope.title.data.labels = [ itemLabel ], $scope.addParcel();
            }, function(error) {
                console.error(error), document.getElementById("barcode").select();
            }));
        }, $scope.$ctrl.operation && "RENEGOTIATION" === $scope.$ctrl.operation) {
            $scope.title.data.discount = 0, $scope.titleType = "receive", $scope.title.data.titleType = "RECEIVE";
            var oldIndividual = null;
            $scope.value = 0, angular.forEach($scope.parcels, function(v) {
                $scope.value += v.value, oldIndividual || (oldIndividual = v.individual), oldIndividual && oldIndividual.id === v.individual.id ? $scope.title.data.assignedIndividual = v.individual : $scope.title.data.assignedIndividual = null, 
                oldIndividual = v.individual;
            }), $scope.title.data.value = 1, $scope.$watch("title.data.discount", function(data) {
                $scope.title.data.value = $scope.value - data;
            });
        }
        $scope.save = function(entity) {
            "REPLEACEMENT" === $scope.$ctrl.operation ? ($scope.replecement.replacedBy = entity, 
            TitleService.saveReplecement(entity).then(function() {
                $scope.$ctrl.onSaveOperationReplecement();
            })) : "RENEGOTIATION" === $scope.$ctrl.operation ? (entity.parcelsToReplace = $scope.idParcels, 
            TitleService.saveRenegotiation(entity).then(function() {
                $scope.$ctrl.onSaveOperationRenegotiation();
            })) : $scope.title.methods.put(entity);
        }, $scope.items = [], $scope.launchPaid = function() {
            $uibModal.open({
                templateUrl: template,
                controller: "ModalLaunchPaidController",
                size: "lg",
                resolve: {
                    items: function() {
                        return $scope.items;
                    }
                }
            }).result.then(function(financeunitReturn) {
                $scope.title.data.automaticFinanceUnit = financeunitReturn.automaticFinanceUnit, 
                $scope.title.data.registerAsPayed = financeunitReturn.registerAsPayed, $scope.save($scope.title.data);
            });
        }, $scope.back = function(rote) {
            $scope.$ctrl.onBackClick({
                rote: rote
            });
        }, $scope.addLeaf = function(account) {
            var notFind = 0, leaf = angular.copy(account.leaf);
            leaf.value = account.valueLeaf, account.subPlanLeafs || (account.subPlanLeafs = []), 
            account.subPlanLeafs.length > 0 && angular.forEach(account.subPlanLeafs, function(planLeaf) {
                planLeaf.name === leaf.name && (planLeaf.value += leaf.value, notFind++);
            }), 0 === notFind && account.subPlanLeafs.push(leaf), account.leaf = null, account.valueLeaf = account.value - $scope.sumLeafs(account);
        }, $scope.selected = function(params) {
            $scope.title.data.parcelinterest = params.interest.value, $scope.title.data.parcelpenalty = params.penalty.value;
        }, $scope.sumLeafs = function(account) {
            var total = 0;
            return account.subPlanLeafs && account.subPlanLeafs.length > 0 && angular.forEach(account.subPlanLeafs, function(leaf) {
                total += leaf.value;
            }), total;
        }, $scope.validAddLeaf = function(account) {
            return $scope.sumLeafs(account) + account.valueLeaf > account.value;
        }, $scope.invalidAddLeaf = function(account) {
            return $scope.sumLeafs(account) >= account.value;
        }, $scope.removeLeaf = function(account, index) {
            account.subPlanLeafs.splice(index, 1), account.valueLeaf = account.value - $scope.sumLeafs(account);
        }, $scope.change = function() {
            $scope.title.data.expiration && ($scope.title.data.expiration = new Date($scope.title.data.expiration), 
            $scope.calculateParcels()), $timeout(function() {
                var objScroll = document.getElementById("scrollParcels");
                objScroll && (objScroll.scrollTop = objScroll.scrollHeight);
            }, 700);
        };
        var setExpiration = function(parcel, expiration) {
            return 0 === parcel ? expiration.setMonth(expiration.getMonth()) : expiration.setMonth(expiration.getMonth() + 1);
        };
        $scope.calculateParcels = function() {
            var valueParcel = $scope.title.data.value, numberParcel = $scope.title.data.numberParcel;
            $scope.title.data.parcel = [];
            for (var expiration = new Date($scope.title.data.expiration), i = 0; i < $scope.title.data.numberParcel; i++) {
                if ("pay" === $scope.titleType || "editpay" === $scope.titleType) {
                    var currentParcel = {
                        number: i + 1,
                        value: valueParcel,
                        expiration: setExpiration(i, expiration)
                    };
                    $scope.title.data.parcel.push(currentParcel);
                }
                if ("receive" === $scope.titleType || "editreceive" === $scope.titleType) if (0 === i) {
                    var conta = parseInt(valueParcel / numberParcel), sobra = valueParcel % numberParcel, currentParcelReceive = {
                        number: i + 1,
                        value: conta + sobra,
                        expiration: setExpiration(i, expiration)
                    };
                    $scope.title.data.parcel.push(currentParcelReceive);
                } else {
                    var currentParcelInt = {
                        number: i + 1,
                        value: parseInt(valueParcel / $scope.title.data.numberParcel),
                        expiration: setExpiration(i, expiration)
                    };
                    $scope.title.data.parcel.push(currentParcelInt);
                }
            }
            $scope.elem = angular.copy($scope.title.data.parcel);
        }, $scope.title.data.id || $scope.calculateParcels(), $scope.valores = function(model, account) {
            angular.forEach($scope.title.data.planLeafs, function(data) {
                account.id === data[model].id && (data[model].value = $scope.sumParcels($scope.title.data.parcel), 
                data[model].valueLeaf = $scope.sumParcels($scope.title.data.parcel));
            });
        }, $scope.addParcel = function() {
            $scope.title.data.numberParcel++;
            var parcel = {
                number: $scope.title.data.numberParcel,
                value: $scope.title.data.value,
                expiration: $scope.title.data.expiration,
                barCode: $scope.title.data.barcode
            };
            1 === $scope.title.data.numberParcel ? $scope.title.data.parcel[0] = parcel : $scope.title.data.parcel.push(parcel), 
            $scope.title.data.barcode = null;
        }, $scope.title.data.planLeafs = $scope.title.data.planLeafs || [], $scope.addPlanLeaf = function() {
            $scope.title.data.planLeafs.push($scope.temp.planLeaf), $scope.temp.planEntry = null;
        }, $scope.title.data.planEntries = $scope.title.data.planEntries || [], $scope.mountPlanEntries = function() {
            angular.forEach($scope.title.data.planLeafs, function(c) {
                $scope.title.data.planEntries.push(c), angular.forEach(c.subPlanLeafs, function(sc) {
                    $scope.title.data.planEntries.push(sc);
                });
            });
        }, $scope.tableConfigListParcels = {
            columns: "id,documentType,individual,value,payments",
            checkbox: !1,
            columnsConfig: [ {
                name: "id",
                title: '<span gumga-translate-tag="entry.id">id</span>',
                content: "{{$value.id}}"
            }, {
                name: "documentType",
                title: '<span gumga-translate-tag="documenttype.label">documentType</span>',
                content: "{{$value.documentType}}"
            }, {
                name: "individual",
                title: '<span gumga-translate-tag="individualcredit.individual">individual</span>',
                content: "{{$value.individual.name}}"
            }, {
                name: "value",
                title: '<span gumga-translate-tag="docted.value">value</span>',
                content: "{{$value.value | currency}}"
            }, {
                name: "payments",
                title: '<span gumga-translate-tag="menu.financeunit">payments</span>',
                content: '<table style="border: none;" class="table table-hover" style="margin: 0;"><tr ng-repeat="payment in $value.payments" ng-if="payment.value != 0"><td style="border: none;" class="pull-left">{{payment.financeunit}}</td><td style="border: none;" class="pull-right"><button ng-click="$parent.$parent.$parent.$parent.reversal(payment.idPayment, \'PAYMENT\')" class="btn btn-primary btn-sm"><i class="fa fa-reply"></i></button></td><td style="border: none;" class="pull-right">{{payment.momment | date:"dd/mm/yyyy"}}</td><td style="border: none;" class="pull-right">{{payment.value | currency}}</td></tr></table>'
            } ]
        }, $scope.title.on("putSuccess", function() {
            "pay" !== $scope.titleType && "editpay" !== $scope.titleType || $scope.$ctrl.onPayPutSuccess(), 
            "receive" === $scope.titleType || "editreceive" === $scope.titleType ? $scope.$ctrl.onReceivePutSuccess() : $scope.$ctrl.onPayPutSuccess();
        }), $scope.sumParcels = function(array) {
            return array.reduce(function(p, n) {
                return p += n.value;
            }, 0);
        }, $scope.changeValueParcel = function(value, index, oldValue) {
            !angular.equals(oldValue, value) && $scope.title.data.parcel.length > 1 && swal({
                title: "Valor",
                text: "Deseja alterar o valor das demais parcelas?",
                type: "warning",
                showCancelButton: !0,
                confirmButtonColor: "#0cddb3",
                confirmButtonText: "Sim, Altere!",
                cancelButtonText: "Não!",
                closeOnConfirm: !1,
                closeOnCancel: !1
            }, function(isConfirm) {
                if (isConfirm) {
                    for (index; index < $scope.title.data.parcel.length; index++) $scope.title.data.parcel[index].value = value;
                    swal("Alterado!", "Os valores foram alterados", "success");
                } else swal("Mantido", "Os valores foram mantidos :)", "success");
            });
        }, $scope.changeDateParcel = function(value, index, oldDate) {
            !angular.equals(oldDate, value) && $scope.title.data.parcel.length > 1 && swal({
                title: "Vencimento",
                text: "Deseja alterar o vencimento das demais parcelas?",
                type: "warning",
                showCancelButton: !0,
                confirmButtonColor: "#0cddb3",
                confirmButtonText: "Sim, Altere!",
                cancelButtonText: "Não!",
                closeOnConfirm: !1,
                closeOnCancel: !1
            }, function(isConfirm) {
                if (isConfirm) {
                    for (index; index < $scope.title.data.parcel.length; index++) $scope.title.data.parcel[index].expiration = setExpiration(index, value);
                    swal("Alterado!", "Os vencimentos foram alterados", "success");
                } else swal("Mantido", "Os vencimentos foram mantidos :)", "success");
            });
        }, $scope.paymentRest = 0, "editpay" !== $scope.titleType && "editreceive" !== $scope.titleType || angular.forEach($scope.title.data.parcel, function(params, index) {
            $scope.title.data.parcel[index].expiration = new Date(params.expiration), params.fullPaid || ($scope.paymentRest += params.value), 
            "1" === params.number && ($scope.title.data.expiration = new Date(params.expiration) || new Date());
        });
    }
    var template = __webpack_require__(62);
    TitleFormEmbeddedController.$inject = [ "TitleService", "$uibModal", "$scope", "gumgaController", "$timeout", "IndividualEmbeddedService", "DocumentTypeService", "RatioPlanService", "PlanLeafService", "WalletService", "FinanceUnitService" ], 
    module.exports = TitleFormEmbeddedController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function TitleListEmbeddedController($scope, TitleService, gumgaController) {
        TitleService.resetDefaultState(), gumgaController.createRestMethods($scope, TitleService, "title"), 
        $scope.participation = "", $scope.currentPage = 1, $scope.titleType = $scope.$ctrl.titleType, 
        $scope.title.on("deleteSuccess", function() {
            $scope.title.methods.get(1);
        }), $scope.title.methods.get = function(page) {
            $scope.currentPage = page, TitleService.findTitleWithParticipations($scope.titleType.toUpperCase(), page).then(function(response) {
                $scope.title.data = response.data.values, $scope.title.count = response.data.count, 
                $scope.title.pageSize = response.data.pageSize;
            });
        }, $scope.simpleSearch = function(field, param) {
            if ("" === param) return void $scope.title.methods.get(1);
            var aq = "obj." + field + " like '" + param + "'";
            TitleService.findTitleWithParticipations($scope.titleType.toUpperCase(), 1, aq).then(function(data) {
                $scope.title.data = data.data.values, $scope.title.count = data.data.count, $scope.title.pageSize = data.data.pageSize;
            });
        }, $scope.title.methods.get($scope.currentPage), $scope.buscaParticipations = function(participation) {
            "" === participation && $scope.title.methods.get($scope.currentPage), $scope.title.data = $scope.title.data.filter(function(data) {
                return data.participationsFormatted.indexOf(participation) > -1;
            });
        }, $scope.labels = [], TitleService.getLabels().then(function(response) {
            $scope.labels = response.data.values;
        }, function(error) {
            console.error(error.data);
        }), $scope.buscaTag = function(param) {
            var search = "searchFields=value&q=" + param;
            return TitleService.searchLabels(search).then(function(response) {
                $scope.labels = response.data.values;
            });
        }, $scope.selectLabel = function(label) {
            TitleService.searchTags(label.value, $scope.titleType.toUpperCase()).then(function(response) {
                $scope.title.data = response.data.values;
            });
        }, $scope.reset = function() {
            $scope.listPage(1);
        }, $scope.titleList = [], $scope.isParcial = function(idTitle, typeTitle) {}, $scope.tableConf = {
            columns: "titleType, issuedAt,documentNumber, participationsFormatted, postedAt, docname, value, btns",
            materialTheme: !0,
            title: "pay" === $scope.titleType ? "Listagem de Contas a Pagar" : "Listagem de Contas a Receber",
            columnsConfig: [ {
                name: "titleType",
                title: '<span gumga-translate-tag="title.titleType"></span>',
                content: "<span style=\"\">{{$value.titleType == 'PAY' ? 'A PAGAR' : 'A RECEBER'}}</span>",
                size: "col-md-2 col-lg-1"
            }, {
                name: "issuedAt",
                title: '<span gumga-translate-tag="title.issuedAt"></span>',
                content: "<span>{{$value.emissionDate | date: 'dd/MM/yyyy' }}</span>"
            }, {
                name: "documentNumber",
                title: '<span gumga-translate-tag="title.documentNumberAdapted"></span>',
                content: "<span>{{$value.documentNumber}}</span>"
            }, {
                name: "participationsFormatted",
                title: '<span gumga-translate-tag="title.participationsFormatted"></span>',
                content: '<div uib-tooltip="{{$value.participationsFormatted}}" ng-class="{\'text-overflow-list\':$value.participations.length == 1, \'text-align-center\':$value.participations.length > 1}"><i class=" glyphicon glyphicon-user"></i><i class=" glyphicon glyphicon-user" ng-if="$value.participations.length > 1"></i>&nbsp;<span ng-if="$value.participations.length == 1">{{$value.participationsFormatted}}</span></div>'
            }, {
                name: "postedAt",
                title: '<span gumga-translate-tag="title.postedAt"></span>',
                content: "<span>{{$value.postedAt | date: 'dd/MM/yyyy'}}</span>"
            }, {
                name: "docname",
                title: '<span gumga-translate-tag="title.documentType"></span>',
                content: "<span>{{$value.documentType.name}}</span>"
            }, {
                name: "value",
                title: '<span gumga-translate-tag="title.value"></span>',
                content: "<span>{{$value.value | currency}}</span>"
            }, {
                name: "btns",
                title: " ",
                content: '{{$parent.$parent.renegotiate}}<div style=\'display:inline-block;width:80px\'><span><a uib-tooltip="{{$value.hasPayment || $value.fullPaid ? \'Visualizar\'  : \'Editar\'}}" ng-click="$parent.$parent.goEdit($value.titleType, $value.id, $value.hasPayment)" class="btn btn-primary btn-sm"><i class="{{$value.hasPayment || $value.fullPaid ? \'glyphicon glyphicon-eye-open\' : \'glyphicon glyphicon-pencil\'}}"></i></a>&nbsp;&nbsp;<a uib-tooltip="Renegociar" ng-show="!$value.fullPaid && $value.isRenegotiate" class="btn btn-primary btn-sm" ng-disabled="$value.replacedBy || $value.fullPaid" ng-click="$parent.$parent.replacement($value, $value.fullPaid)"><i class="fa fa-share-square-o"></i></a></span></div><span ng-if="$value.replacedBy" class="label label-warning">Renegociado</span><span ng-if="$value.hasPayment && !$value.fullPaid && $value.titleType == \'PAY\'" class="label label-info">Parcial</span><span ng-if="$value.hasPayment && !$value.fullPaid && $value.titleType == \'RECEIVE\'" class="label label-info">Parcial</span><span ng-if="$value.fullPaid && $value.titleType == \'RECEIVE\'" class="label label-success">Recebido</span><span ng-if="$value.fullPaid && $value.titleType == \'PAY\'" class="label label-success">Pago</span><span ng-if="!$value.hasRatio" class="glyphicon glyphicon-info-sign pull-right" uib-tooltip=\'Sem Rateio\' tooltip-placement=\'left\'></span>',
                size: "col-md-3"
            } ]
        }, $scope.goInsert = function() {
            $scope.$ctrl.onNewTitle({
                type: $scope.$ctrl.titleType
            });
        }, $scope.goEdit = function(type, id, fullPaid) {
            $scope.$ctrl.onEditTitle({
                type: type,
                id: id,
                fullPaid: fullPaid
            });
        }, $scope.replacement = function(value, fullPaid) {
            $scope.$ctrl.onReplacement({
                value: value,
                fullPaid: fullPaid
            });
        };
    }
    TitleListEmbeddedController.$inject = [ "$scope", "TitleService", "gumgaController" ], 
    module.exports = TitleListEmbeddedController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    var template = __webpack_require__(63);
    module.exports = {
        templateUrl: template,
        controller: "TitleParcelPayListEmbeddedController",
        bindings: {
            onSameIndividual: "&"
        }
    };
}, function(module, exports, __webpack_require__) {
    "use strict";
    var template = __webpack_require__(64);
    module.exports = {
        templateUrl: template,
        controller: "PayEmbeddedController",
        bindings: {
            onBackClick: "&"
        }
    };
}, function(module, exports, __webpack_require__) {
    "use strict";
    function PayEmbeddedController(FinanceConfigurationService, $scope, $timeout, TitleParcelPayService, FinanceUnitService, CheckingAccountService, ThirdPartyChequeService, gumgaController, PaymentService, $uibModal, LocalCashService, ChequePortfolioService, $filter, IndividualCreditService, CreditCardAccountService) {
        $scope.configuration = {}, gumgaController.createRestMethods($scope, FinanceConfigurationService, "financeConfiguration"), 
        $scope.financeConfiguration.execute("get").on("getSuccess", function(data) {
            $scope.configuration = data.values[0];
        }), $scope.showMenuPersonalCredit = !1, gumgaController.createRestMethods($scope, LocalCashService, "localcash"), 
        $scope.localcash.methods.search("name", ""), gumgaController.createRestMethods($scope, ChequePortfolioService, "chequeportfolio"), 
        $scope.chequeportfolio.methods.search("name", ""), gumgaController.createRestMethods($scope, CreditCardAccountService, "creditcard"), 
        $scope.creditcard.methods.search("name", ""), gumgaController.createRestMethods($scope, ThirdPartyChequeService, "thirdpartycheque"), 
        $scope.thirdpartycheque.methods.search("name", ""), gumgaController.createRestMethods($scope, IndividualCreditService, "individualCredit"), 
        gumgaController.createRestMethods($scope, FinanceUnitService, "financeunit"), FinanceUnitService.resetDefaultState(), 
        $scope.getPersonalCredits = function(params) {
            return IndividualCreditService.getSearch("name", params).then(function(data) {
                if ($scope.configuration.displayPersonalCredit) var toReturn = data.data.values.filter(function(elem) {
                    return elem.individual.id === $scope.parcels[0].individual.id;
                }); else var toReturn = data.data.values;
                return $scope.showMenuPersonalCredit = toReturn.length > 0, toReturn;
            });
        }, $timeout(function() {
            $scope.getPersonalCredits("");
        }), gumgaController.createRestMethods($scope, CheckingAccountService, "checkingaccount"), 
        CheckingAccountService.resetDefaultState(), $scope.parcels = TitleParcelPayService.getInstallmentsPayable(), 
        $scope.payment = {}, $scope.payment.receipt = {
            name: ""
        }, $scope.payment.parcels = $scope.parcels, $scope.payment.methodPayment = $scope.payment.methodPayment || [], 
        $scope.payment.numberPayment = $scope.payment.numberPayment || 0, $scope.payment.companyCheck = $scope.payment.companyCheck || [], 
        $scope.payment.companyCheck.availableIn = $scope.payment.companyCheck.availableIn || new Date(), 
        $scope.payment.momment = new Date(), $scope.itemsSelected = [], $scope.cheques = {}, 
        $scope.cheques.data = [], $scope.filtered = [], $scope.listCheques = function(name, param) {
            $scope.cheques.data = [];
        }, $scope.changeCheques = function() {
            $scope.payment.cheques = $scope.selectedValues;
        }, $scope.uploadStart = function() {}, $scope.uploadComplete = function(e) {}, $scope.uploadAbort = function(e) {}, 
        $scope.uploadError = function(e) {}, $scope.totalize = function() {
            for (var total = 0, i = 0; i < $scope.payment.parcels.length; i++) total += $scope.payment.parcels[i].value;
            return total;
        }, $scope.totalizeRemaining = function() {
            for (var total = 0, i = 0; i < $scope.parcels.length; i++) total += $scope.parcels[i].remaining + $scope.parcels[i].calculedInterest + $scope.parcels[i].calculedPenalty;
            return total;
        }, $scope.total = $scope.totalizeRemaining(), $scope.addPaymentMoney = function(payment) {
            var methodPayment = {
                historic: "Dinheiro",
                method: "money",
                value: payment.value,
                destination: payment.money.financeUnit.name,
                financeUnit: payment.money.financeUnit
            };
            $scope.addPayment(methodPayment, "money");
        }, $scope.addPaymentCheck = function(payment) {
            var methodPayment = {
                historic: "Cheque Terceiro",
                method: "check",
                selectedChecks: payment.check.checks,
                destination: payment.check.financeUnit.name,
                value: payment.value,
                financeUnit: payment.check.financeUnit
            };
            $scope.addPayment(methodPayment, "check"), $scope.cheques.data = [], $scope.payment.check = {}, 
            $scope.payment.check.checks = [];
        }, $scope.addPaymentCompanyCheck = function(payment) {
            var methodPayment = {
                historic: "Cheque Empresa",
                method: "checkCompany",
                destination: payment.companyCheck.financeUnit.name + "Nº Cheque: " + payment.companyCheck.numberCheck,
                chequeNumber: payment.companyCheck.numberCheck,
                value: payment.value,
                availableIn: payment.companyCheck.availableIn,
                financeUnit: payment.companyCheck.financeUnit
            };
            $scope.addPayment(methodPayment, "checkCompany");
        }, $scope.addPaymentBank = function(payment) {
            var methodPayment = {
                historic: "Banco - op: " + $scope.payment.type,
                type: $scope.payment.type,
                operationNumber: payment.docTed.operation,
                method: "bank",
                value: payment.value,
                destination: "Conta Crédito: " + payment.docTed.financeUnit.name,
                financeUnit: payment.docTed.financeUnit
            };
            $scope.payment.type = null, $scope.addPayment(methodPayment, "docTed");
        }, $scope.addPaymentCard = function(payment) {
            var methodPayment = {
                historic: "Cartão",
                method: "card",
                value: payment.value,
                destination: "Conta Corrente: " + payment.card.financeUnit.name,
                financeUnit: payment.card.financeUnit
            };
            $scope.addPayment(methodPayment, "docTed");
        }, $scope.addPaymentCredit = function(payment) {
            var methodPayment = {
                historic: "Crédito",
                method: "credit",
                value: payment.value,
                destination: payment.credit.financeUnit.name,
                financeUnit: payment.credit.financeUnit
            };
            $scope.addPayment(methodPayment, "credit");
        }, $scope.addPayment = function(methodPayment, operation) {
            switch ($scope.payment.numberPayment++, operation) {
              case "money":
                $scope.payment.money = null;
                break;

              case "check":
                $scope.payment.check = null;
                break;

              case "docTed":
                $scope.payment.docTed = null;
                break;

              case "checkCompany":
                $scope.payment.companyCheck = null;
                break;

              case "credit":
                $scope.payment.credit = null;
            }
            $scope.payment.value = null, $scope.payment.method = null, 1 === $scope.payment.numberPayment ? $scope.payment.methodPayment[0] = methodPayment : $scope.payment.methodPayment.push(methodPayment), 
            $scope.lastPayment = $scope.totalizeRemaining() - $scope.totalPayment(), $scope.payment.value = $scope.lastPayment;
        }, $scope.totalPayment = function() {
            var total = 0;
            return angular.forEach($scope.payment.methodPayment, function(list) {
                total += list.value;
            }), total;
        }, $scope.removeLeaf = function(method, index) {
            method.splice(index, 1), $scope.lastPayment = $scope.totalizeRemaining() - $scope.totalPayment(), 
            $scope.payment.check || ($scope.payment.check = {}, $scope.payment.check.checks = [], 
            $scope.cheques.data = [], $scope.calcCheques());
        }, $scope.$watch("payment.check.financeUnit", function(checkFinanceUnit) {
            angular.isObject(checkFinanceUnit) && "ChequePortfolio" === checkFinanceUnit.type && (search = "obj.portfolio.id=" + checkFinanceUnit.id + "AND obj.status = 'AVAILABLE'", 
            $scope.thirdpartycheque.methods.advancedSearch(search).on("advancedSearchSuccess", function(data) {
                $scope.cheques.data = data.values.filter(function(elem) {
                    if ($scope.itemsSelected.length > 0) for (var index = 0; index < $scope.itemsSelected.length; index++) if (elem.id === $scope.itemsSelected[index].id) return !1;
                    return !0;
                });
            }));
        }), $scope.totalSelecionado = 0, $scope.selecionados = function(selecionado) {
            $scope.totalSelecionado += selecionado.value, $scope.payment.value = $scope.totalSelecionado, 
            $scope.itemsSelected = $scope.payment.check.checks;
        }, $scope.printReceipt = function() {
            var value = $scope.totalPayment().toString();
            value = value.replace(".", ","), $scope.payment.numberInWords = $filter("gumgaNumberInWords")(value, !0), 
            $scope.payment.value = $scope.totalPayment().toFixed(2), $scope.printPaid($scope.payment);
        }, $scope.printPaid = function(_items) {
            $uibModal.open({
                templateUrl: receiptPrint,
                controller: "ReceivePrintEmbeddedController",
                size: "lg",
                resolve: {
                    items: function() {
                        return _items;
                    }
                }
            }).result.then(function() {});
        }, $scope.parcelsConfig = {
            columns: "docNumber, parcels, remaining, expiration",
            materialTheme: !0,
            columnsConfig: [ {
                name: "docNumber",
                title: "<span>Nº Doc</span>",
                content: "{{$value.titleData.documentNumber}}"
            }, {
                name: "parcels",
                title: "<span>Parcela</span>",
                content: "{{$value.number}} / {{$value.titleData.parcelsCount}}"
            }, {
                name: "remaining",
                title: "<span>A pagar</span>",
                content: '{{($value.remaining) | currency: "R$ "}}'
            }, {
                name: "expiration",
                title: "<span>Vencimento</span>",
                content: '{{$value.expiration | date: "dd/MM/yyyy"}}'
            } ]
        }, $scope.chequesConfig = {
            columns: "chequeNumber, bank, branch, account, issuer, accountable, value",
            checkbox: !0,
            selection: "multi",
            columnsConfig: [ {
                name: "chequeNumber",
                title: "<span>Número do cheque</span>",
                content: "{{$value.chequeNumber}}"
            }, {
                name: "bank",
                title: "<span>Banco</span>",
                content: "{{$value.bank.name}}"
            }, {
                name: "branch",
                title: "<span>Agência</span>",
                content: "{{$value.branch}}"
            }, {
                name: "account",
                title: "<span>Conta</span>",
                content: "{{$value.account}}"
            }, {
                name: "issuer",
                title: "<span>Emitente</span>",
                content: "{{$value.issuer.name}}"
            }, {
                name: "accountable",
                title: "<span>Responsável</span>",
                content: "{{$value.accountable.name}}"
            }, {
                name: "value",
                title: "<span>Valor</span>",
                content: '{{$value.value | currency: "R$"}}'
            } ]
        }, $scope.calcCheques = function(id) {
            if ($scope.payment.numberPayment >= 1) $scope.payment.value = $scope.lastPayment; else {
                var total = 0;
                angular.forEach($scope.selectedValues, function(o) {
                    total += o.value;
                }), $scope.payment.value = 0 !== total ? total : $scope.total;
            }
            document.getElementById(id).select();
        }, $scope.makePayment = function(payment, generalDiscount) {
            for (var index = 0; index < payment.parcels.length; index++) payment.parcels[index].discount.value = generalDiscount;
            $scope.printReceipt(), PaymentService.pay(payment).then(function() {
                $scope.$ctrl.onBackClick();
            }), $scope.itemsSelected.length > 0 && $scope.itemsSelected.forEach(function(data) {
                data.status = "UNAVAILABLE", $scope.thirdpartycheque.methods.put(data);
            });
        }, $scope.setarfocusPayment = function(value) {
            switch (value) {
              case "money":
                angular.element(document.getElementById("paymentMoneyFinanceunit")).find("input")[1].focus();
                break;

              case "check":
                angular.element(document.getElementById("paymentCheckFinanceunit")).find("input")[1].focus();
                break;

              case "ted":
                document.getElementById("paymentBankFinanceunit").focus();
                break;

              case "companyCheck":
                angular.element(document.getElementById("paymentBank2Financeunit")).find("input")[1].focus();
                break;

              case "card":
                angular.element(document.getElementById("paymentCardFinanceunit")).find("input")[1].focus();
                break;

              case "credit":
                angular.element(document.getElementById("paymentCreditFinanceunit")).find("input")[1].focus();
            }
        }, $scope.selectAllText = function(id) {
            document.getElementById(id).focus(), document.getElementById(id).select();
        };
    }
    var receiptPrint = __webpack_require__(6);
    PayEmbeddedController.$inject = [ "FinanceConfigurationService", "$scope", "$timeout", "TitleParcelPayService", "FinanceUnitService", "CheckingAccountService", "ThirdPartyChequeService", "gumgaController", "PaymentService", "$uibModal", "LocalCashService", "ChequePortfolioService", "$filter", "IndividualCreditService", "CreditCardAccountService" ], 
    module.exports = PayEmbeddedController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function ReceivePrintEmbeddedController($scope, $uibModalInstance, items) {
        $scope.ok = function(obj) {
            $uibModalInstance.close(obj);
        }, $scope.user = JSON.parse(window.sessionStorage.getItem("user")), $scope.recibo = items, 
        $scope.print = function() {
            window.print();
        }, $scope.cancel = function() {
            $uibModalInstance.close();
        };
    }
    ReceivePrintEmbeddedController.$inject = [ "$scope", "$uibModalInstance", "items" ], 
    module.exports = ReceivePrintEmbeddedController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    (function(moment) {
        function TitleParcelPayListEmbeddedController($uibModal, $scope, TitleParcelPayService, gumgaController, $timeout, IndividualEmbeddedService) {
            gumgaController.createRestMethods($scope, TitleParcelPayService, "titleparcelPay"), 
            gumgaController.createRestMethods($scope, IndividualEmbeddedService, "individual"), 
            TitleParcelPayService.resetDefaultState(), IndividualEmbeddedService.resetDefaultState(), 
            $scope.endDate = null, $scope.paidOut = !1, $scope.containsFullPaid = !1, $scope.lastClicked = null, 
            $scope.aqFilterSelected = null, $scope.getParcels = function(date, page) {
                TitleParcelPayService.findOpenByMaxDate(date, "PAY", page, $scope.individualSearch, $scope.paidOut, $scope.aqFilterSelected).then(function(data) {
                    $scope.selectedValues = [], $scope.titleparcelPay.data = data.data.values, $scope.titleparcelPay.pageSize = data.data.pageSize, 
                    $scope.titleparcelPay.count = data.data.count;
                });
            }, $scope.cleanFilter = function() {
                $scope.lastClicked = null, $scope.aqFilterSelected = null, delete $scope.filters, 
                delete $scope.individualSearch, $scope.selectedSubType = "";
            }, $scope.$watch("individualSearch", function(individual) {
                $scope.cleanFilter(), $scope.individualSearch = individual, $scope.getParcels(null, 1);
            }), $scope.filter = function(whichFilter) {
                $scope.lastClicked = whichFilter;
                var aq = "obj.title.titleType='PAY'";
                switch (whichFilter) {
                  case "thisWeek":
                    aq = aq.concat(" AND obj.expiration >='" + moment().startOf("isoWeek").subtract(1, "days").format("YYYY-MM-DD") + "' AND obj.expiration <='" + moment().endOf("isoWeek").subtract(1, "days").format("YYYY-MM-DD") + "'");
                    break;

                  case "thisMonth":
                    aq = aq.concat(" AND obj.expiration >='" + moment().startOf("month").format("YYYY-MM-DD") + "' AND obj.expiration <='" + moment().endOf("month").format("YYYY-MM-DD") + "'");
                    break;

                  case "thisYear":
                    aq = aq.concat(" AND obj.expiration >='" + moment().startOf("year").format("YYYY-MM-DD") + "' AND obj.expiration <='" + moment().endOf("year").format("YYYY-MM-DD") + "'");
                    break;

                  case "today":
                    aq = aq.concat(" AND obj.expiration >='" + moment().format("YYYY-MM-DD") + " 00:00:00' AND obj.expiration <='" + moment().format("YYYY-MM-DD") + " 23:59:59' ");
                    break;

                  case "custom":
                    aq = aq.concat(" AND obj.expiration >='" + moment($scope.endDate).format("YYYY-MM-DD") + " 00:00:00' AND obj.expiration <='" + moment($scope.endDate).format("YYYY-MM-DD") + " 23:59:59' ");
                }
                $scope.individualSearch && $scope.individualSearch.id && (aq = aq.concat(" AND obj.individual.name='" + $scope.individualSearch.name + "'")), 
                aq = $scope.paidOut ? aq.concat(" AND obj.title.titleType='PAY' AND obj.fullPaid = true") : aq.concat(" AND obj.title.titleType='PAY' AND (obj.fullPaid = false OR obj.fullPaid is null)"), 
                $scope.aqFilterSelected = aq, $scope.titleparcelPay.methods.advancedSearch(aq), 
                $scope.changeSubTypeButton(whichFilter);
            }, $scope.paid = function(page) {
                $scope.lastClicked = null, $scope.aqFilterSelected = null, $scope.paidOut = !0, 
                $scope.selectedSubType = "", delete $scope.filters, TitleParcelPayService.findOpenByMaxDate(null, "PAY", page, $scope.individualSearch, $scope.paidOut, $scope.aqFilterSelected).then(function(data) {
                    $scope.selectedValues = [], $scope.titleparcelPay.data = data.data.values, $scope.titleparcelPay.pageSize = data.data.pageSize, 
                    $scope.titleparcelPay.count = data.data.count, $scope.changeTypeButton("paid");
                });
            }, $scope.pays = function(page) {
                $scope.lastClicked = null, $scope.aqFilterSelected = null, $scope.paidOut = !1, 
                $scope.selectedSubType = "", delete $scope.filters, TitleParcelPayService.findOpenByMaxDate(null, "PAY", page, $scope.individualSearch, $scope.paidOut, $scope.aqFilterSelected).then(function(data) {
                    $scope.selectedValues = [], $scope.titleparcelPay.data = data.data.values, $scope.titleparcelPay.pageSize = data.data.pageSize, 
                    $scope.titleparcelPay.count = data.data.count, $scope.changeTypeButton("pays");
                });
            }, $scope.totalize = function() {
                $timeout(function() {
                    var total = 0, increase = 0;
                    $scope.containsFullPaid = !1, angular.forEach($scope.selectedValues, function(o) {
                        total += o.remaining, increase += o.calculedInterest + o.calculedPenalty, o.fullPaid && ($scope.containsFullPaid = !0);
                    }), $scope.increase = increase, $scope.total = total;
                });
            }, $scope.printReceipt = function() {
                var value = $scope.totalPayment().toString();
                value = value.replace(".", ","), $scope.payment.numberInWords = $filter("gumgaNumberInWords")(value, !0), 
                $scope.payment.value = $scope.totalPayment().toFixed(2), $scope.printPaid($scope.payment);
            }, $scope.printPaid = function(_items) {
                console.log("printPaid"), $uibModal.open({
                    templateUrl: receiptPrint,
                    controller: "ReceivePrintEmbeddedController",
                    size: "lg",
                    resolve: {
                        items: function() {
                            return _items;
                        }
                    }
                }).result.then(function() {});
            }, $scope.individualCheckAndPay = function(parcels, $containsFullPaid) {
                if ($containsFullPaid) {
                    var totalValue = 0;
                    $scope.selectedValues.forEach(function(data) {
                        totalValue += data.totalpayed;
                    }), $scope.recibo = {
                        value: totalValue
                    }, $scope.recibo.parcels = $scope.selectedValues, $scope.printPaid($scope.recibo);
                } else {
                    for (var individualDefault, len = parcels.length, sameIndividual = !0, x = 0; x < len; x++) {
                        var parcel = parcels[x];
                        0 === x ? individualDefault = parcel.individual.name : individualDefault !== parcel.individual.name ? sameIndividual = !1 : angular.noop;
                    }
                    sameIndividual ? (TitleParcelPayService.setInstallmentsPayable(parcels), $scope.$ctrl.onSameIndividual()) : ($scope.errorMessage = "Foram selecionadas parcelas de fornecedores diferentes, altere sua seleção.", 
                    $timeout(function() {
                        delete $scope.errorMessage;
                    }, 5e3));
                }
            }, $scope.tableConfig = {
                columns: "documentNumber, parcel, individual, expiration, amount, calculedInterest, calculedPenalty, valuePay, value, status",
                checkbox: !0,
                selection: "multi",
                materialTheme: !0,
                itemsPerPage: [ 5, 10, 25, 50, 100 ],
                title: "Listagem de Pagar Títulos",
                columnsConfig: [ {
                    name: "documentNumber",
                    title: "<span>Nº Doc</span>",
                    content: "{{$value.titleData.documentNumber}}",
                    sortField: "number"
                }, {
                    name: "parcel",
                    title: "<span>Parcelas</span>",
                    content: "{{$value.number}} / {{$value.titleData.parcelsCount}}",
                    sortField: "number"
                }, {
                    name: "individual",
                    title: "<span>Pessoa</span>",
                    content: "{{$value.individual.name}}",
                    sortField: "individual.name"
                }, {
                    name: "expiration",
                    title: "<span>Vencimento</span>",
                    content: '{{$value.expiration | date: "dd/MM/yyyy"}}',
                    sortField: "expiration"
                }, {
                    name: "amount",
                    title: "<span>Valor</span>",
                    content: '{{$value.value | currency: "R$"}}',
                    sortField: "value"
                }, {
                    name: "calculedPenalty",
                    title: "<span>Multa</span>",
                    content: '{{$value.calculedPenalty | currency: "R$ "}} ',
                    sortField: "calculedPenalty"
                }, {
                    name: "calculedInterest",
                    title: "<span>Juros</span>",
                    content: '{{$value.calculedInterest | currency: "R$ "}} ',
                    sortField: "calculedInterest"
                }, {
                    name: "valuePay",
                    title: "<span>Pago</span>",
                    content: '{{($value.totalpayed) | currency: "R$"}}',
                    sortField: "value"
                }, {
                    name: "value",
                    title: "<span>A pagar</span>",
                    content: '{{$value.remaining | currency: "R$"}}',
                    sortField: "value"
                }, {
                    name: "status",
                    title: "<span>Status</span>",
                    sortField: "value",
                    content: '<span ng-if="$value.totalpayed == 0" class="label label-info">Aberta</span><span ng-if="$value.fullPaid" class="label label-danger">Pago</span><span ng-if="($value.totalpayed > 0) && !$value.fullPaid" class="label label-warning">Amortizado</span>'
                } ]
            }, $scope.selectedType = "pays", $scope.buttonTypeClass = function(parameter) {
                return $scope.selectedType === parameter ? "btn btn-danger" : "btn btn-primary";
            }, $scope.changeTypeButton = function(newType) {
                $scope.selectedType = newType;
            }, $scope.buttonSubTypeClass = function(parameter) {
                return $scope.selectedSubType === parameter ? "btn btn-danger" : "btn btn-info";
            }, $scope.changeSubTypeButton = function(newType) {
                $scope.selectedSubType = newType;
            };
        }
        var receiptPrint = __webpack_require__(6);
        TitleParcelPayListEmbeddedController.$inject = [ "$uibModal", "$scope", "TitleParcelPayService", "gumgaController", "$timeout", "IndividualEmbeddedService" ], 
        module.exports = TitleParcelPayListEmbeddedController;
    }).call(exports, __webpack_require__(5));
}, function(module, exports, __webpack_require__) {
    "use strict";
    var template = __webpack_require__(65);
    module.exports = {
        templateUrl: template,
        controller: "TitleParcelReceiveListEmbeddedController",
        bindings: {
            onSameIndividual: "&",
            onRenegotiation: "&"
        }
    };
}, function(module, exports, __webpack_require__) {
    "use strict";
    var template = __webpack_require__(66);
    module.exports = {
        templateUrl: template,
        controller: "PayReceiveEmbeddedController",
        bindings: {
            onMakePayment: "&"
        }
    };
}, function(module, exports, __webpack_require__) {
    "use strict";
    function PayReceiveEmbeddedController(FinanceConfigurationService, $scope, $timeout, IndividualCreditService, TitleParcelPayService, IndividualEmbeddedService, DocTedService, BankService, CheckingAccountService, LocalCashService, ChequePortfolioService, ThirdPartyChequeService, gumgaController, PaymentService, $filter, $uibModal, CreditCardAccountService) {
        gumgaController.createRestMethods($scope, FinanceConfigurationService, "financeConfiguration"), 
        gumgaController.createRestMethods($scope, CheckingAccountService, "checkingaccount"), 
        gumgaController.createRestMethods($scope, ChequePortfolioService, "chequeportfolio"), 
        gumgaController.createRestMethods($scope, LocalCashService, "localcash"), gumgaController.createRestMethods($scope, ThirdPartyChequeService, "thirdpartycheque"), 
        gumgaController.createRestMethods($scope, DocTedService, "docted"), gumgaController.createRestMethods($scope, TitleParcelPayService, "titleParcel"), 
        gumgaController.createRestMethods($scope, IndividualEmbeddedService, "individual"), 
        gumgaController.createRestMethods($scope, CreditCardAccountService, "creditcardaccount"), 
        gumgaController.createRestMethods($scope, BankService, "bank"), $scope.configuration = {}, 
        $scope.checkingaccount.methods.search("name", ""), $scope.chequeportfolio.methods.search("name", ""), 
        $scope.localcash.methods.search("name", ""), $scope.individual.methods.search("name", ""), 
        $scope.creditcardaccount.methods.search("name", ""), $scope.bank.methods.search("name", ""), 
        FinanceConfigurationService.get().then(function(response) {
            $scope.configuration = response.data.values[0];
        }), $scope.showMenuPersonalCredit = !0, $scope.getPersonalCredits = function(params) {
            return IndividualCreditService.getSearch("name", params).then(function(data) {
                if ($scope.configuration.displayPersonalCredit) var toReturn = data.data.values.filter(function(elem) {
                    return elem.individual.id === $scope.parcels[0].individual.id;
                }); else var toReturn = data.data.values;
                return $scope.showMenuPersonalCredit = toReturn.length > 0, toReturn;
            });
        }, $timeout(function() {
            $scope.getPersonalCredits("");
        }), $scope.valueThirdPartyChequeStatus = [ {
            value: "AVAILABLE",
            label: "Em Carteira - Disponível"
        }, {
            value: "UNAVAILABLE",
            label: "Em Carteira - Indisponível"
        }, {
            value: "CASHED",
            label: "Compensado"
        }, {
            value: "RETURNED",
            label: "Devolvido"
        }, {
            value: "PASSED_ALONG",
            label: "Repassado"
        } ], $scope.parcels = TitleParcelPayService.getInstallmentsPayable(), $scope.payment = {}, 
        $scope.payment.methodReceive = $scope.payment.methodReceive || [], $scope.payment.numberReceive = $scope.payment.numberReceive || 0, 
        $scope.payment.parcels = $scope.parcels, $scope.payment.momment = new Date(), $scope.isTed = !0, 
        $scope.receive = 0, $scope.openMomment = function() {
            $scope.isDatePickerOpenMomment = !$scope.isDatePickerOpenMomment;
        }, $scope.changeCheques = function() {
            $scope.payment.cheques = $scope.selectedValues;
        }, $scope.open = function() {
            $scope.isDatePickerOpen = !$scope.isDatePickerOpen;
        }, $scope.totalize = function() {
            for (var total = 0, i = 0; i < $scope.payment.parcels.length; i++) total += $scope.payment.parcels[i].value;
            return total;
        }, $scope.totalizeRemaining = function() {
            for (var total = 0, i = 0; i < $scope.parcels.length; i++) total += $scope.parcels[i].remaining;
            return total;
        }, $scope.total = $scope.totalizeRemaining(), $scope.makePayment = function(payment) {
            PaymentService.receive(payment).then(function() {
                $scope.$ctrl.onMakePayment();
            });
        }, $scope.open = function() {
            $scope.openedInsertMoment = !$scope.openedInsertMoment;
        }, $scope.tableConfig = {
            columns: "expiration, value,remaining, individual",
            materialTheme: !0,
            columnsConfig: [ {
                name: "expiration",
                title: "<span>Expiração</span>",
                content: '{{$value.expiration | date: "dd/MM/yyyy"}}'
            }, {
                name: "value",
                title: "<span>Valor</span>",
                content: '{{$value.value | currency: "R$"}}'
            }, {
                name: "remaining",
                title: "<span>Saldo</span>",
                content: '{{$value.remaining | currency: "R$"}}'
            }, {
                name: "individual",
                title: "<span>Pessoa</span>",
                content: "{{$value.individual.name}}"
            } ]
        }, $scope.tableConfigCard = {
            columns: "name",
            columnsConfig: [ {
                name: "name",
                title: "<span>Cartão</span>",
                content: "{{$value.name}}"
            } ]
        }, $scope.addReceiveMoney = function(receive) {
            var methodReceive = {
                historic: "Dinheiro",
                method: "money",
                value: receive.value,
                destination: receive.money.financeUnit.name,
                financeUnit: receive.money.financeUnit
            };
            $scope.addReceive(methodReceive, "money");
        }, $scope.addReceiveCheck = function(receive) {
            var methodReceive = {
                historic: "Cheque",
                method: "check",
                value: receive.value,
                destination: "Banco: " + receive.check.bank + " Agência: " + receive.check.branch + " Conta: " + receive.check.account,
                financeUnit: receive.check.portfolio,
                bank: receive.check.bank,
                availableIn: receive.check.validUntil,
                branch: receive.check.branch,
                account: receive.check.account,
                chequeNumber: receive.check.chequeNumber,
                issuerName: receive.check.issuer.name,
                issuerDocument: receive.check.issuer.document
            };
            $scope.addReceive(methodReceive, "check");
        }, $scope.addReceiveBank = function(receive) {
            var methodReceive = {
                historic: $scope.isTed ? "Banco - op: TED" : "Banco - op: DOC",
                type: $scope.isTed ? "TED" : "DOC",
                method: "bank",
                value: receive.value,
                destination: "Conta Crédito: " + receive.docTed.financeUnit.name,
                financeUnit: receive.docTed.financeUnit
            };
            $scope.addReceive(methodReceive, "docTed");
        }, $scope.addReceiveCard = function(receive) {
            var methodReceive = {
                historic: "Cartão",
                method: "card",
                value: receive.value,
                destination: "Conta destino: " + receive.card.financeUnit.name,
                financeUnit: receive.card.financeUnit
            };
            $scope.addReceive(methodReceive, "card");
        }, $scope.addReceive = function(methodReceive, operation) {
            switch ($scope.payment.numberReceive++, operation) {
              case "docTed":
                $scope.payment.docTed = null;

              case "money":
                $scope.payment.money = null;

              case "check":
                $scope.payment.check = null;

              case "card":
                $scope.payment.card = null;
            }
            $scope.payment.value = null, $scope.payment.method = null, 1 === $scope.payment.numberReceive ? $scope.payment.methodReceive[0] = methodReceive : $scope.payment.methodReceive.push(methodReceive), 
            $scope.lastReceive = $scope.totalizeRemaining() - $scope.totalReceive(), $scope.payment.value = $scope.lastPayment;
        }, $scope.addReceiveCredit = function(payment) {
            var methodPayment = {
                historic: "Crédito",
                method: "credit",
                value: payment.value,
                destination: payment.credit.financeUnit.name,
                financeUnit: payment.credit.financeUnit
            };
            $scope.addReceive(methodPayment, "credit");
        }, $scope.calcCheques = function(id) {
            if ($scope.payment.numberReceive >= 1) $scope.payment.value = $scope.lastReceive; else {
                var total = 0;
                angular.forEach($scope.selectedValues, function(o) {
                    total += o.value;
                }), $scope.payment.value = 0 !== total ? total : $scope.total;
            }
            document.getElementById(id).select();
        }, $scope.totalReceive = function() {
            var total = 0;
            return angular.forEach($scope.payment.methodReceive, function(list) {
                total += list.value;
            }), total;
        }, $scope.removeLeaf = function(method, index) {
            method.splice(index, 1), $scope.lastReceive = $scope.totalizeRemaining() - $scope.totalReceive();
        }, $scope.printReceipt = function() {
            var value = $scope.totalReceive().toString();
            value = value.replace(".", ","), $scope.payment.numberInWords = $filter("gumgaNumberInWords")(value, !0), 
            $scope.payment.value = $scope.totalReceive().toFixed(2), $scope.printPaid($scope.payment);
        }, $scope.printPaid = function(_items) {
            $uibModal.open({
                templateUrl: template,
                controller: "ReceivePrintEmbeddedController",
                size: "lg",
                resolve: {
                    items: function() {
                        return _items;
                    }
                }
            }).result.then(function() {});
        }, $scope.makePayment = function(payment) {
            $scope.post = payment, PaymentService.receive(payment).then(function() {
                $scope.$ctrl.onMakePayment();
            });
        }, $scope.setarfocusPayment = function(value) {
            switch (value) {
              case "money":
                angular.element(document.getElementById("paymentMoneyFinanceunit")).find("input")[1].focus();
                break;

              case "check":
                document.getElementById("paymentCheckFinanceunit").focus();
                break;

              case "bank":
                angular.element(document.getElementById("paymentBankFinanceunit")).find("input")[1].focus();
                break;

              case "card":
                angular.element(document.getElementById("paymentCardFinanceunit")).find("input")[1].focus();
                break;

              case "credit":
                angular.element(document.getElementById("paymentCreditFinanceunit")).find("input")[1].focus();
            }
        }, $scope.selectAllText = function(id) {
            document.getElementById(id).focus(), document.getElementById(id).select();
        };
    }
    var template = __webpack_require__(7);
    PayReceiveEmbeddedController.$inject = [ "FinanceConfigurationService", "$scope", "$timeout", "IndividualCreditService", "TitleParcelPayService", "IndividualEmbeddedService", "DocTedService", "BankService", "CheckingAccountService", "LocalCashService", "ChequePortfolioService", "ThirdPartyChequeService", "gumgaController", "PaymentService", "$filter", "$uibModal", "CreditCardAccountService" ], 
    module.exports = PayReceiveEmbeddedController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    (function(moment) {
        function TitleParcelReceiveListEmbeddedController(TitleService, FinanceConfigurationService, $uibModal, $scope, TitleParcelPayService, gumgaController, $timeout, IndividualEmbeddedService) {
            gumgaController.createRestMethods($scope, TitleParcelPayService, "titleparcel"), 
            gumgaController.createRestMethods($scope, IndividualEmbeddedService, "individual"), 
            gumgaController.createRestMethods($scope, FinanceConfigurationService, "financeConfiguration"), 
            gumgaController.createRestMethods($scope, TitleService, "title"), $scope.isRenegotiate = !1, 
            $scope.financeConfiguration.execute("get").on("getSuccess", function(data) {
                $scope.isRenegotiate = data.values[0].isRenegotiate;
            }), TitleParcelPayService.resetDefaultState(), IndividualEmbeddedService.resetDefaultState(), 
            $scope.endDate = null, $scope.containsReplaced = !1, $scope.containsFullPaid = !1, 
            $scope.paidOut = !1, $scope.lastClicked = null, $scope.aqFilterSelected = null, 
            $scope.hideOthers = !0, $scope.getParcels = function(date, page) {
                TitleParcelPayService.findOpenByMaxDate(date, "RECEIVE", page, $scope.individualSearch, $scope.paidOut, $scope.aqFilterSelected).then(function(data) {
                    $scope.selectedValues = [], $scope.titleparcel.data = data.data.values, $scope.titleparcel.pageSize = data.data.pageSize, 
                    $scope.titleparcel.count = data.data.count;
                });
            }, $scope.cleanFilter = function() {
                $scope.lastClicked = null, $scope.aqFilterSelected = null, delete $scope.filters, 
                delete $scope.individualSearch, $scope.selectedSubType = "";
            }, $scope.getParcels(null, 1), $scope.$watch("individualSearch", function(individual) {
                $scope.cleanFilter(), $scope.individualSearch = individual, $scope.getParcels($scope.endDate, 1);
            }), $scope.filter = function(whichFilter) {
                $scope.lastClicked = whichFilter;
                var aq = "obj.title.titleType='RECEIVE'";
                switch (whichFilter) {
                  case "thisWeek":
                    aq = aq.concat(" AND obj.expiration >='" + moment().startOf("isoWeek").subtract(1, "days").format("YYYY-MM-DD") + "' AND obj.expiration <='" + moment().endOf("isoWeek").subtract(1, "days").format("YYYY-MM-DD") + "'");
                    break;

                  case "thisMonth":
                    aq = aq.concat(" AND obj.expiration >='" + moment().startOf("month").format("YYYY-MM-DD") + "' AND obj.expiration <='" + moment().endOf("month").format("YYYY-MM-DD") + "'");
                    break;

                  case "thisYear":
                    aq = aq.concat(" AND obj.expiration >='" + moment().startOf("year").format("YYYY-MM-DD") + "' AND obj.expiration <='" + moment().endOf("year").format("YYYY-MM-DD") + "'");
                    break;

                  case "today":
                    aq = aq.concat(" AND obj.expiration >='" + moment().format("YYYY-MM-DD") + " 00:00:00' AND obj.expiration <='" + moment().format("YYYY-MM-DD") + " 23:59:59' ");
                    break;

                  case "custom":
                    aq = aq.concat(" AND obj.expiration >='" + moment($scope.endDate).format("YYYY-MM-DD") + " 00:00:00' AND obj.expiration <='" + moment($scope.endDate).format("YYYY-MM-DD") + " 23:59:59' ");
                }
                $scope.individualSearch && $scope.individualSearch.id && (aq = aq.concat(" AND obj.individual.name='" + $scope.individualSearch.name + "' ")), 
                aq = $scope.paidOut ? aq.concat("AND obj.title.titleType='RECEIVE' AND obj.fullPaid = true") : aq.concat("AND obj.title.titleType='RECEIVE' AND (obj.fullPaid = false OR obj.fullPaid is null)"), 
                $scope.aqFilterSelected = aq, $scope.titleparcel.methods.advancedSearch(aq), $scope.changeSubTypeButton(whichFilter);
            }, $scope.searchByIndividual = function(individual) {
                $scope.getParcels($scope.endDate, 1);
            }, $scope.receive = function(page) {
                $scope.lastClicked = null, $scope.aqFilterSelected = null, $scope.paidOut = !0, 
                $scope.selectedSubType = "", delete $scope.filters, TitleParcelPayService.findOpenByMaxDate(null, "RECEIVE", page, $scope.individualSearch, $scope.paidOut, $scope.aqFilterSelected).then(function(data) {
                    $scope.selectedValues = [], $scope.titleparcel.data = data.data.values, $scope.titleparcel.pageSize = data.data.pageSize, 
                    $scope.titleparcel.count = data.data.count, $scope.changeTypeButton("RECEIVE");
                });
            }, $scope.toReceive = function(page) {
                $scope.lastClicked = null, $scope.aqFilterSelected = null, $scope.paidOut = !1, 
                $scope.selectedSubType = "", delete $scope.filters, TitleParcelPayService.findOpenByMaxDate(null, "RECEIVE", page, $scope.individualSearch, $scope.paidOut, $scope.aqFilterSelected).then(function(data) {
                    $scope.selectedValues = [], $scope.titleparcel.data = data.data.values, $scope.titleparcel.pageSize = data.data.pageSize, 
                    $scope.titleparcel.count = data.data.count, $scope.changeTypeButton("TORECEIVE");
                });
            }, $scope.totalize = function() {
                $timeout(function() {
                    var total = 0, increase = 0;
                    angular.forEach($scope.selectedValues, function(o) {
                        total += o.remaining, increase += o.calculedInterest + o.calculedPenalty;
                    });
                    var qtd = 0, qtdPaid = 0;
                    $scope.selectedValues.forEach(function(e) {
                        e.isReplaced && qtd++, e.fullPaid && qtdPaid++;
                    }), $scope.containsReplaced = qtd > 0, $scope.containsFullPaid = qtdPaid > 0, $scope.increase = increase, 
                    $scope.total = total;
                });
            }, $scope.printPaid = function(_items) {
                $uibModal.open({
                    templateUrl: template,
                    controller: "ReceivePrintEmbeddedController",
                    size: "lg",
                    resolve: {
                        items: function() {
                            return _items;
                        }
                    }
                }).result.then(function() {});
            }, $scope.individualCheckAndPay = function(parcels, $containsFullPaid) {
                if ($containsFullPaid) {
                    var totalValue = 0;
                    $scope.selectedValues.forEach(function(data) {
                        totalValue += data.totalpayed;
                    }), $scope.recibo = {
                        value: totalValue
                    }, $scope.recibo.parcels = $scope.selectedValues, $scope.printPaid($scope.recibo);
                } else {
                    for (var individualDefault, len = parcels.length, sameIndividual = !0, x = 0; x < len; x++) {
                        var parcel = parcels[x];
                        0 === x ? individualDefault = parcel.individual.name : individualDefault !== parcel.individual.name ? sameIndividual = !1 : angular.noop;
                    }
                    sameIndividual ? (TitleParcelPayService.setInstallmentsPayable(parcels), $scope.$ctrl.onSameIndividual()) : ($scope.errorMessage = "Foram selecionadas parcelas de fornecedores diferentes, altere sua seleção.", 
                    $timeout(function() {
                        delete $scope.errorMessage;
                    }, 5e3));
                }
            }, $scope.renegotiation = function(values) {
                TitleService.setRenegociationParcels(values), $scope.$ctrl.onRenegotiation();
            }, $scope.tableConfig = {
                columns: "documentNumber, parcel, individual, expiration, amount, calculedInterest, calculedPenalty, valuePay, value, status",
                checkbox: !0,
                selection: "multi",
                materialTheme: !0,
                itemsPerPage: [ 5, 10, 25, 50, 100 ],
                title: "Listagem de Receber Títulos",
                columnsConfig: [ {
                    name: "documentNumber",
                    title: "<span>Nº Doc.</span>",
                    content: "{{$value.titleData.documentNumber}}",
                    sortField: "number"
                }, {
                    name: "parcel",
                    title: "<span>Parcelas</span>",
                    content: "{{$value.number}} / {{$value.titleData.parcelsCount}}",
                    sortField: "number"
                }, {
                    name: "individual",
                    title: "<span>Pessoa</span>",
                    content: "{{$value.individual.name}}",
                    sortField: "individual.name"
                }, {
                    name: "expiration",
                    title: "<span>Vencimento</span>",
                    content: '{{$value.expiration | date: "dd/MM/yyyy"}}',
                    sortField: "expiration"
                }, {
                    name: "amount",
                    title: "<span>Valor Total</span>",
                    content: '{{$value.value | currency: "R$"}}',
                    sortField: "value"
                }, {
                    name: "calculedPenalty",
                    title: "<span>Multa</span>",
                    content: '{{$value.calculedPenalty | currency: "R$ "}} ',
                    sortField: "value"
                }, {
                    name: "calculedInterest",
                    title: "<span>Juros</span>",
                    content: '{{$value.calculedInterest | currency: "R$ "}} ',
                    sortField: "value"
                }, {
                    name: "valuePay",
                    title: "<span>R$ Recebido</span>",
                    content: '{{$value.totalpayed | currency: "R$"}}',
                    sortField: "value"
                }, {
                    name: "value",
                    title: "<span>R$ a receber</span>",
                    content: '{{$value.remaining | currency: "R$"}}',
                    sortField: "value"
                }, {
                    name: "status",
                    title: "<span>Status</span>",
                    content: '<span ng-if="$value.totalpayed == 0 && !$value.isReplaced" class="label label-info">Aberta</span><span ng-if="$value.fullPaid" class="label label-danger">Recebido</span><span ng-if="$value.isReplaced" class="label label-warning">Renegociada</span><span ng-if="($value.totalpayed > 0) && !$value.fullPaid" class="label label-warning">Amortizado</span>'
                } ]
            }, $scope.selectedType = "TORECEIVE", $scope.buttonTypeClass = function(parameter) {
                return $scope.selectedType === parameter ? "btn btn-danger" : "btn btn-primary";
            }, $scope.buttonSubTypeClass = function(parameter) {
                return $scope.selectedSubType === parameter ? "btn btn-danger" : "btn btn-info";
            }, $scope.changeTypeButton = function(newType) {
                $scope.selectedType = newType;
            }, $scope.changeSubTypeButton = function(newType) {
                $scope.selectedSubType = newType;
            };
        }
        var template = __webpack_require__(7);
        TitleParcelReceiveListEmbeddedController.$inject = [ "TitleService", "FinanceConfigurationService", "$uibModal", "$scope", "TitleParcelPayService", "gumgaController", "$timeout", "IndividualEmbeddedService" ], 
        module.exports = TitleParcelReceiveListEmbeddedController;
    }).call(exports, __webpack_require__(5));
}, function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _index = __webpack_require__(17), _GroupDependencies = (_interopRequireDefault(_index), 
    __webpack_require__(9)), _DynamicController = (_interopRequireDefault(_GroupDependencies), 
    __webpack_require__(8)), _DynamicController2 = _interopRequireDefault(_DynamicController), _bindHtmlCompile = __webpack_require__(10), _bindHtmlCompile2 = _interopRequireDefault(_bindHtmlCompile);
    __webpack_require__(11), __webpack_require__(12), __webpack_require__(13), __webpack_require__(14), 
    __webpack_require__(15), __webpack_require__(16), __webpack_require__(0);
    var finance = angular.module("finance.embedded", [ "ui.bootstrap", "group.dependencies", "finance.providers", "finance.services", "finance.title", "finance.titleparcel", "finance.titleparcelreceive", "finance.cashcheckinembedded", "finance.cashcheckoutembedded" ]);
    finance.directive("ngDynamicController", _DynamicController2.default), finance.directive("bindHtmlCompile", _bindHtmlCompile2.default), 
    finance.config([ "GumgaDateServiceProvider", function(GumgaDateServiceProvider) {
        GumgaDateServiceProvider.setDefaultConfiguration({
            minYear: 1500,
            closeOnChange: !0
        });
    } ]), exports.default = finance.name;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function FinanceEmbeddedService(apiLocation) {
        var configuration = {
            api: apiLocation + "/api"
        }, getDefaultConfiguration = function() {
            return configuration;
        }, setDefaultConfiguration = function(config) {
            Object.keys(config).forEach(function(key) {
                return configuration[key] = config[key];
            });
        };
        return {
            getDefaultConfiguration: getDefaultConfiguration,
            setDefaultConfiguration: setDefaultConfiguration,
            $get: function() {
                return {
                    getDefaultConfiguration: getDefaultConfiguration,
                    setDefaultConfiguration: setDefaultConfiguration
                };
            }
        };
    }
    FinanceEmbeddedService.$inject = [ "apiLocation" ], module.exports = FinanceEmbeddedService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function BankService(GumgaRest, FinanceEmbeddedService) {
        return new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/bank");
    }
    BankService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = BankService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function CheckingAccountService(GumgaRest, FinanceEmbeddedService) {
        return new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/checkingaccount");
    }
    CheckingAccountService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = CheckingAccountService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function ChequePortfolioService(GumgaRest, FinanceEmbeddedService) {
        return new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/chequeportfolio");
    }
    ChequePortfolioService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = ChequePortfolioService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function CreditCardAccountService(GumgaRest, FinanceEmbeddedService) {
        return new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/creditcardaccount");
    }
    CreditCardAccountService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = CreditCardAccountService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function DocTedService(GumgaRest, FinanceEmbeddedService) {
        function save(data) {
            var transferTo = "[" + data.bank.name + "]" + data.agency + " - " + data.name + "\n";
            return data.available = !0, data.value = -data.value, data.availableIn = data.momment, 
            {
                ted: function() {
                    return data.historic = "[TED] ".concat(transferTo), Service.extend("POST", "/ted", data);
                },
                doc: function() {
                    return data.historic = "[DOC] ".concat(transferTo), Service.extend("POST", "/doc", data);
                }
            };
        }
        function getEntry(url, start) {
            return start = start || 0, Service.extend("GET", "/entry", {
                params: {
                    aq: url,
                    pageSize: 10,
                    start: start
                }
            });
        }
        var Service = new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api);
        return Service.save = save, Service.getEntry = getEntry, Service;
    }
    DocTedService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = DocTedService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function DocumentTypeService(GumgaRest, FinanceEmbeddedService) {
        function getOldVersions(id) {
            return Service.extend("GET", "/listoldversions/".concat(id));
        }
        var Service = new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/documenttype");
        return Service.getOldVersions = getOldVersions, Service;
    }
    DocumentTypeService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = DocumentTypeService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function FinanceConfigurationService(GumgaRest, FinanceEmbeddedService) {
        return new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/financeconfiguration");
    }
    FinanceConfigurationService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], 
    module.exports = FinanceConfigurationService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function FinanceUnitService(GumgaRest, $http, FinanceEmbeddedService) {
        var Service = new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/financeunit"), apiExecutionQuery = FinanceEmbeddedService.getDefaultConfiguration().api + "/executionquerys";
        return Service.getEntriesFromFinanceUnit = function(id) {
            return $http.get(apiExecutionQuery + "/entriesfromlastbalance/" + id);
        }, Service.getEntriesFromFinanceUnitFilter = function(params) {
            return $http.get(apiExecutionQuery + "/entriesfromlastbalance/" + params);
        }, Service.getConciliatedEntriesFromFinanceUnitFilter = function(params) {
            return $http.get(apiExecutionQuery + "/conciliatedentriesfromlastbalance/" + params);
        }, Service.getConciliatedEntriesFromLastBalance = function(id) {
            return $http.get(apiExecutionQuery + "/conciliatedentriesfromlastbalance/" + id);
        }, Service.getByQ = function(q) {
            return $http.get(Service._url + "?pageSize=10&start=0&searchFields=name&q=" + q);
        }, Service.balance = function(id) {
            return $http.get(apiExecutionQuery + "/entriesfromlastbalance/" + id);
        }, Service.getEntriesByFinanceUnitAndCheckin = function(financeUnitId, checkinId) {
            return $http.get(apiExecutionQuery + "/entriesbyfinanceunitandcheckin/" + financeUnitId + "/" + checkinId);
        }, Service.getEntriesByCheckin = function(checkinId) {
            return $http.get(apiExecutionQuery + "/entriesbycheckin/" + checkinId);
        }, Service;
    }
    FinanceUnitService.$inject = [ "GumgaRest", "$http", "FinanceEmbeddedService" ], 
    module.exports = FinanceUnitService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function IndividualCreditService(GumgaRest, FinanceEmbeddedService) {
        return new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/individualcredit");
    }
    IndividualCreditService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = IndividualCreditService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function IndividualEmbeddedService(GumgaRest, $http, FinanceEmbeddedService) {
        var Service = new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/individual");
        return Service.getLabels = function() {
            return $http.get(FinanceEmbeddedService.getDefaultConfiguration().api + "/individuallabel");
        }, Service.searchLabels = function(param) {
            return $http.get(FinanceEmbeddedService.getDefaultConfiguration().api + "/individuallabel?" + param);
        }, Service;
    }
    IndividualEmbeddedService.$inject = [ "GumgaRest", "$http", "FinanceEmbeddedService" ], 
    module.exports = IndividualEmbeddedService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function LocalCashService(GumgaRest, FinanceEmbeddedService) {
        return new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/localcash");
    }
    LocalCashService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = LocalCashService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function PaymentService(GumgaRest, FinanceEmbeddedService) {
        var Service = new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/payment");
        return Service.pay = function(payment) {
            return Service.extend("post", "/pay", payment);
        }, Service.receive = function(payment) {
            return Service.extend("post", "/receive", payment);
        }, Service;
    }
    PaymentService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = PaymentService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function PlanLeafService(GumgaRest, $http, FinanceEmbeddedService) {
        var Service = new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/planleaf");
        return Service.getTypes = function() {
            return $http.get(Service._url + "/types");
        }, Service;
    }
    PlanLeafService.$inject = [ "GumgaRest", "$http", "FinanceEmbeddedService" ], module.exports = PlanLeafService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function RatioPlanService(GumgaRest, $http, FinanceEmbeddedService) {
        var Service = new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/ratioplan");
        return Service.getAutomaticRatio = function(plan, total) {
            return $http.get(FinanceEmbeddedService.getDefaultConfiguration().api + "/ratioplan/automaticratio/" + plan + "/" + total);
        }, Service;
    }
    RatioPlanService.$inject = [ "GumgaRest", "$http", "FinanceEmbeddedService" ], module.exports = RatioPlanService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function ThirdPartyChequeService(GumgaRest, FinanceEmbeddedService) {
        return new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/thirdpartycheque");
    }
    ThirdPartyChequeService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = ThirdPartyChequeService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function TitleParcelPayService(GumgaRest, $http, FinanceEmbeddedService) {
        var Service = new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/titleparcel"), installmentsPayable = [];
        Service.getInstallmentsPayable = function() {
            return installmentsPayable;
        }, Service.setInstallmentsPayable = function(arr) {
            installmentsPayable = arr;
        }, Service.grouped = function(type) {
            return $http.get(Service._url + "/grouped/" + type);
        }, Service.individualSearch = function(idIndividual, type) {
            return $http.get(Service._url + "/grouped/" + type + "/" + idIndividual);
        };
        var format = function date2str(x, y) {
            var z = {
                M: x.getMonth() + 1,
                d: x.getDate(),
                h: x.getHours(),
                m: x.getMinutes(),
                s: x.getSeconds()
            };
            return y = y.replace(/(M+|d+|h+|m+|s+)/g, function(v) {
                return ((v.length > 1 ? "0" : "") + eval("z." + v.slice(-1))).slice(-2);
            }), y.replace(/(y+)/g, function(v) {
                return x.getFullYear().toString().slice(-v.length);
            });
        };
        return Service.findOpenByMaxDate = function(date, type, page, individual, paidOut, aqFilterSelected) {
            if (null !== aqFilterSelected) return $http.get(Service._url + "?start=" + page + "&aq=" + aqFilterSelected);
            1 !== page && (page = 10 * page - 10), 1 === page && (page = 0);
            var searchDate = date ? " AND obj.expiration <= '" + format(date, "yyyy-MM-dd") + "'" : "", searchIndividual = individual ? " AND obj.individual.id = " + individual.id : "";
            return $http.get(Service._url + "?start=" + page + "&aq=obj.title.titleType='" + type + "' AND (obj.fullPaid = " + paidOut + " OR obj.fullPaid is null)" + searchDate + searchIndividual);
        }, Service;
    }
    TitleParcelPayService.$inject = [ "GumgaRest", "$http", "FinanceEmbeddedService" ], 
    module.exports = TitleParcelPayService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    function WalletService(GumgaRest, FinanceEmbeddedService) {
        return new GumgaRest(FinanceEmbeddedService.getDefaultConfiguration().api + "/wallet");
    }
    WalletService.$inject = [ "GumgaRest", "FinanceEmbeddedService" ], module.exports = WalletService;
}, function(module, exports) {
    var path = "/cashcheckin/views/form.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '<form name="forms" novalidate>\n    <div class="row">\n        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 align-layout-panel cl-dark-primary text-uppercase">\n            <label style="font-size: 24px" gumga-translate-tag="cashcheckin.opening">Opening</label>\n        </div>\n    </div>\n    <div class="row">\n        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 align-layout-panel">\n            <div class="panel gmd">\n                <ul class="nav nav-tabs gmd" role="tablist">\n                    <li role="start" class="active">\n                        <a href="#start" target="_self" aria-controls="start" role="tab" data-toggle="tab"\n                           class="text-uppercase"\n                           gumga-translate-tag="cashcheckin.movementin">Cash Check-In</a>\n                    </li>\n                </ul>\n            </div>\n            <div class="row">\n                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">\n                    <div class="tab-content">\n                        <div role="tabpanel" class="tab-pane active" id="start">\n\n                            <div class="row">\n                                <div class="col-lg-6">\n                                    <div class="ibox float-e-margins">\n                                        <div class="ibox-content">\n                                            <div class="row" ng-show="disableOpening">\n                                                <div class="col-lg-12">\n                                                    <span class="text-danger" gumga-translate-tag="cashcheckin.hasopen">This user already have\n                                                        a opening active</span>\n                                                </div>\n                                            </div>\n                                            <div class="row">\n                                                <div class="col-md-12">\n                                                    <label><span\n                                                            gumga-translate-tag="cashcheckin.cash">Cash</span></label>\n\n                                                    <gumga-many-to-one\n                                                            value="entity.group"\n                                                            search-method="getGroups(param)"\n                                                            authorize-add="false"\n                                                            field="name"\n                                                            async="true"\n                                                            class="gmd"\n                                                            display-info="false"\n                                                            data-disabled="disableOpening"\n                                                            on-select="onSelectGroup(value)"\n                                                            on-deselect="onDeselectGroup(value)">\n                                                        <match>\n                                                            <div>{{match.model.name}}</div>\n                                                        </match>\n                                                    </gumga-many-to-one>\n                                                </div>\n                                            </div>\n                                            <div ng-show="entity.employee != null">\n                                                <div class="row m-t">\n                                                    <div class="col-md-12">\n                                                        <label gumga-translate-tag="cashcheckin.user">Operator</label>\n                                                        <input type="text" ng-model="entity.employee.login"\n                                                               class="form-control"\n                                                               disabled/>\n                                                    </div>\n                                                </div>\n                                                <div class="row m-t">\n                                                    <div class="col-md-6">\n                                                        <label gumga-translate-tag="cashcheckin.date">Date/Hour</label><br/>\n                                                        <span style="font-size: 15px">{{entity.date | date: \'dd/MM/yyyy HH:mm:ss\'}}</span>&nbsp;\n                                                    </div>\n                                                </div>\n\n                                                <div class="row m-t-lg" ng-show="entity.group.id">\n                                                    <div class="row">\n                                                        <div class="col-md-12">\n                                                            <div class="col-md-4">\n                                                                <gmd-input>\n                                                                    <input type="text" class="gmd form-control"\n                                                                           ui-money-mask\n                                                                           ng-model="entity.change"\n                                                                           ng-disabled="disableOpening">\n                                                                    <span class="bar"></span>\n                                                                    <label gumga-translate-tag="cashcheckin.changevalue">Change\n                                                                        Value</label>\n                                                                </gmd-input>\n\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                    <div ng-show="!!entity.change" class="row">\n                                                        <div class="col-md-12">\n                                                            <div class="col-md-6">\n                                                                <label gumga-translate-tag="cashcheckin.changeorigin">Change\n                                                                    origin</label><br/>\n                                                                <gumga-many-to-one\n                                                                        value="entity.originChange"\n                                                                        search-method="getChangeOrigin(param)"\n                                                                        authorize-add="false"\n                                                                        field="name"\n                                                                        async="true"\n                                                                        class="gmd"\n                                                                        display-info="false"\n                                                                        data-disabled="disableOpening"\n                                                                        on-select="onSelectOrigin(value)">\n                                                                    <match>\n                                                                        <div>{{match.model.name}}</div>\n                                                                    </match>\n                                                                </gumga-many-to-one>\n                                                            </div>\n                                                            <div class="col-md-6">\n                                                                <label gumga-translate-tag="cashcheckin.changedestiny">Change\n                                                                    destiny</label><br/>\n                                                                <gumga-many-to-one\n                                                                        list="financeUnits"\n                                                                        value="entity.destinyChange"\n                                                                        authorize-add="false"\n                                                                        class="gmd"\n                                                                        data-async="false"\n                                                                        editable="false"\n                                                                        field="name"\n                                                                        display-info="false"\n                                                                        data-disabled="disableOpening"\n                                                                        on-select="onSelectDestiny(value)">\n                                                                    <match>\n                                                                        <div>{{match.model.name}}</div>\n                                                                    </match>\n                                                                </gumga-many-to-one>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <button class="btn btn btn-primary pull-right button-ok"\n                                            ng-click="open(entity, cashCheckout.change)"\n\n                                            ng-disabled="disabledOpenCash(entity)"><i\n                                            class="fa fa-key"></i> <span\n                                            gumga-translate-tag="cashcheckin.opencash">Open Cash</span></button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>');
    } ]), module.exports = path;
}, function(module, exports) {
    var path = "/cashcheckout/views/BalanceModal.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '\n\n<div class="row">\n    <div class="col-md-12">\n\n        <div class="panel gmd">\n            <div class="panel-heading">\n                {{title}}\n            </div>\n            <div class="panel-body">\n\n                <gumga-list\n                    configuration="tableConfig"\n                    data="entries"\n                    name="balance-modal-list"\n                    max-height="500px">\n\n                </gumga-list>\n            </div>\n            <div class="panel-footer">\n                <div class="row">\n                    <div class="pull-right m-r-sm">\n                        <button type="button" class="btn gmd raised btn-warning" ng-click="close()">\n                            <i class="material-icons" style="vertical-align: middle">close</i>\n                            Fechar\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
    } ]), module.exports = path;
}, function(module, exports) {
    var path = "/cashcheckout/views/form.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '<form name="forms" novalidate>\n    <div class="row">\n        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 align-layout-panel cl-dark-primary text-uppercase">\n            <label style="font-size: 24px" gumga-translate-tag="cashcheckin.closing">Cash Check-In Closing</label>\n        </div>\n    </div>\n    <div class="row">\n        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 align-layout-panel">\n            <div class="panel gmd">\n                <ul class="nav nav-tabs gmd" role="tablist">\n                    <li role="start" class="active">\n                        <a href="#start" target="_self" aria-controls="start" role="tab" data-toggle="tab"\n                           class="text-uppercase"\n                           gumga-translate-tag="cashcheckin.movementout">Movement</a>\n                    </li>\n                </ul>\n            </div>\n            <div class="row">\n                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">\n                    <div class="tab-content">\n                        <div role="tabpanel" class="tab-pane active" id="start">\n                            <div class="row">\n                                <div class="col-lg-12">\n                                    <div class="row">\n                                        <div class="col-lg-8">\n                                            <div class="panel gmd">\n                                                <div ng-hide="noCheckin">\n                                                    <div class="panel-heading">\n                                                        <h3><span\n                                                                gumga-translate-tag="cashcheckin.accounts"> Accounts </span><label\n                                                                class="pull-right">PDV Aberto:\n                                                            {{entity.group.name}}</label>\n                                                        </h3>\n                                                    </div>\n                                                    <div class="panel-body">\n                                                        <div class="row">\n                                                            <div class="col-md-12">\n                                                                <div class="col-md-4">\n                                                                    <div ng-show="!!entity.change">\n\n                                                                        <label gumga-translate-tag="cashcheckin.initchange">Init\n                                                                            Change</label>\n                                                                        <span class="form-control" disabled>\n                                                                            {{entity.change|currency}}\n                                                                        </span>\n                                                                    </div>\n                                                                </div>\n                                                                <div class="col-md-4">\n                                                                    <button type="btn" class="btn gmd raised btn-primary" ng-click="showAllMovements()">Movimentações</button>\n                                                                </div>\n                                                                <div class="col-md-4">\n                                                                    <label gumga-translate-tag="cashcheckin.defaulttransfer">Init\n                                                                        Change</label>\n                                                                    <gumga-many-to-one\n                                                                            value="defaultTransfer"\n                                                                            tab-seq="3"\n                                                                            class="gmd"\n                                                                            search-method="getDefaultTransfer(param)"\n                                                                            field="name"\n                                                                            async="true"\n                                                                            authorize-add="false">\n                                                                    </gumga-many-to-one>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                        <div class="row m-t"\n                                                             ng-class="!$first ? \'m-t\' : angular.noop"\n                                                             ng-repeat="value in entity.values track by $index"\n                                                             ng-show="showAccountsWithoutMovement(value)">\n                                                            <div class="col-md-12">\n                                                                <div class="col-md-4">\n                                                                    <label><span>{{value.financeUnit.name}}</span></label>\n                                                                    <input type="number" class="form-control"\n                                                                           ng-model="value.informedValue">\n                                                                </div>\n                                                                <div class="col-md-4">\n                                                                    <label><span\n                                                                            gumga-translate-tag="cashcheckin.expectedvalue">Expected value</span></label>\n                                                                    <input type="text" class="form-control"\n                                                                           ng-model="value.movementedValue" disabled\n                                                                           ui-money-mask>\n                                                                </div>\n                                                                <div class="col-md-3">\n                                                                    <label gumga-translate-tag="cashcheckin.difference"></label><br>\n                                                                    <label class="form-control">{{value.informedValue -\n                                                                        value.movementedValue|currency:\'R$\'}}</label>\n                                                                </div>\n                                                                <div class="col-md-1 m-t-lg">\n                                                                    <button type="button" class="inline-block btn-link btn-xs text-primary" ng-click="showMovements(value.financeUnit)"><i class="material-icons">search</i></button>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                        <div class="row">\n                                                            <div class="col-md-12 m-t">\n                                                                <a ng-click="showWithoutMovement = !showWithoutMovement"\n                                                                   class="m-l"\n                                                                   style="font-size: 16px;">\n                                                                    <i class="glyphicon glyphicon-chevron-up text-primary m-r-xs"\n                                                                       ng-class="{\'glyphicon-chevron-up\': showWithoutMovement, \'glyphicon-chevron-down\': !showWithoutMovement}"></i>\n                                                                    Contas sem movimentação</a>\n                                                            </div>\n                                                        </div>\n                                                        <div class="row" ng-show="!!entity.change">\n                                                            <div class="col-md-12">\n                                                                <div class="col-md-4">\n                                                                    <label gumga-translate-tag="cashcheckin.leftchange">Left\n                                                                        Change</label>\n                                                                    <input type="text" class="form-control"\n                                                                           ng-model="change" ui-money-mask>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                    <button type="button"\n                                                            class="btn btn btn-primary pull-right button-ok m-t"\n                                                            ng-disabled="disabledCloseCash()"\n                                                            ng-click="close(entity)"><i class="fa fa-power-off"\n                                                                                        style="padding-right: 5px"></i>\n                                                        <span\n                                                                gumga-translate-tag="cashcheckin.closecash">Close Cash</span>\n                                                    </button>\n                                                </div>\n                                                <div ng-show="noCheckin">\n                                                    <div class="row m-t">\n                                                        <div class="col-xs-8">\n                                                            <div class="col-xs-8">\n                                                                <h5 class="text-danger"\n                                                                    gumga-translate-tag="cashcheckin.nothasopening">\n                                                                    This employee has not a cash check-in\n                                                                </h5>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>');
    } ]), module.exports = path;
}, function(module, exports) {
    var path = "/financeTitle/views/form.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '<div class="container-fluid" ng-if="renegotiation">\n    <h2>Parcelas a serem renegociadas</h2>\n    <div class="panel panel-default">\n        <div class="panel-body">\n            <div class="row">\n                <div class="col-md-8">\n                    <h3 class="page-header">Parcelas</h3>\n                    <gumga-list class="table-striped table-condensed" data="parcels"\n                                configuration="tableConfigListParcels"></gumga-list>\n                </div>\n                <div class="col-md-4">\n                    <h3 class="page-header">Renegociação</h3>\n                    <form class="form-horizontal">\n                        <div class="form-group">\n                            <label class="col-md-3 control-label">Parcelas</label>\n                            <div class="col-md-7">\n                                <label class="form-control">\n                                    {{parcels.length}}\n                                </label>\n                            </div>\n                        </div>\n\n\n                        <div class="form-group">\n                            <label class="col-md-3 control-label">Valor</label>\n                            <div class="col-md-7">\n                                <label class="form-control">\n                                    {{value | currency: \'R$ \'}}\n                                </label>\n                            </div>\n                        </div>\n                        <div class="form-group">\n                            <label class="col-md-3 control-label">Juros</label>\n                            <div class="col-md-7">\n                                <input class="form-control" ng-model="title.data.parcelinterest" ui-percentage-mask>\n                            </div>\n                        </div>\n                        <div class="form-group">\n                            <label class="col-md-3 control-label">Multa</label>\n                            <div class="col-md-7">\n                                <input class="form-control" ng-model="title.data.parcelpenalty" ui-percentage-mask>\n                            </div>\n                        </div>\n                        <div class="form-group">\n                            <label class="col-md-3 control-label">Desconto</label>\n                            <div class="col-md-7">\n                                <input class="form-control" ng-model="title.data.discount" ui-money-mask="2">\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<form name="TitleForm" class="container-fluid" gumga-form novalidate>\n    <div class="col-md-10 col-md-offset-1">\n        <div class="ibox float-e-margins" style="margin-top: 15px;">\n            <div class="ibox-content">\n                \x3c!--Inputs dos dados--\x3e\n                <div class="row">\n                    <div class="col-md-5" id="panel1">\n                        <div class="row">\n                            <h1 style="margin-top: -8px !important;" gumga-translate-tag="title.header{{titleType}}">\n                                header</h1>\n                        </div>\n                        <hr style="margin-top: 14px;">\n                        <div class="row">\n                            <div class="col-md-8 m-t-md">\n                                <div gumga-form-class="barcode">\n                                    <gmd-input>\n                                        <input type="text" name="barcode" class="form-control gmd" id="barcode"\n                                               ng-model="title.data.barcode" ng-keydown="keyEnter($event)" gumga-error\n                                               gumga-max-length="60" autofocus="true" tabindex="1"\n                                               ng-disabled="disable"/>\n                                        <span class="bar"></span>\n                                        <label for="barcode" gumga-translate-tag="title.barcode">barcode</label>\n                                    </gmd-input>\n                                </div>\n                            </div>\n                            <div class="col-md-4 m-t-md">\n                                <div gumga-form-class="documentNumber">\n                                    <gmd-input>\n                                        <input type="text" name="documentNumber" class="form-control gmd" id="numberdoc"\n                                               ng-model="title.data.documentNumber" gumga-error required\n                                               gumga-max-length="60"\n                                               tabindex="2" ng-disabled="disable"/>\n                                        <span class="bar"></span>\n                                        <label style="white-space: nowrap;" for="numberdoc" gumga-translate-tag="title.docnumber">nrodoc</label>\n                                    </gmd-input>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="row">\n                            <div class="col-md-12">\n                                <div>\n                                    <label ng-if="titleType == \'pay\'     || titleType == \'editpay\'"\n                                           gumga-translate-tag="title.provider"></label>\n                                    <label ng-if="titleType == \'receive\' || titleType == \'editreceive\'"\n                                           gumga-translate-tag="title.client"></label>\n                                    <gumga-many-to-one\n                                            value="title.data.assignedIndividual"\n                                            required\n                                            list="individuals"\n                                            search-method="individual.methods.asyncSearch(\'name\',param)"\n                                            field="name"\n                                            authorize-add="false"\n                                            tab-seq="3"\n                                            modal-fields="id,id"\n                                            disabled="disable">\n                                        <match>\n                                            <div>{{match.model.id}} - {{match.model.name}}</div>\n                                        </match>\n                                    </gumga-many-to-one>\n                                </div>\n                            </div>\n                        </div>\n                        <div ng-if="titleType == \'receive\' || titleType == \'editreceive\'" class="row m-t">\n                            <div class="col-md-12">\n                                <div>\n                                    <label gumga-translate-tag="title.wallet"></label>\n                                    <gumga-many-to-one\n                                            value="title.data.walletTitle"\n                                            list="wallets"\n                                            required\n                                            search-method="wallet.methods.asyncSearch(\'name\',param)"\n                                            field="name"\n                                            required\n                                            authorize-add="false"\n                                            tab-seq="4"\n                                            on-select="selected(value)"\n                                            display-info="false"\n                                            disabled="disable">\n                                    </gumga-many-to-one>\n                                </div>\n                            </div>\n                        </div>\n                        <hr/>\n                        <div class="row">\n                            <div class="col-md-12">\n                                <label gumga-translate-tag="title.documenttype"></label>\n                                \x3c!--async="false"--\x3e\n                                <gumga-many-to-one\n                                        display-info="false"\n                                        value="title.data.documentType"\n                                        list="documents"\n                                        required\n                                        search-method="documentType.methods.asyncSearch(\'name\',param)"\n                                        field="name"\n                                        tab-seq="5"\n                                        post-method="postDocType(value)"\n                                        authorize-add="true"\n                                        display-info="false"\n                                        disabled="disable">\n                                </gumga-many-to-one>\n                            </div>\n                        </div>\n                        <div class="row m-t-lg">\n                            <div class="col-md-4">\n                                <label gumga-translate-tag="title.emissiondate">emissiondate</label>\n                                <gumga-date ng-model="title.data.emissionDate" id="emissiondate" name="emissiondate"\n                                            ng-disabled="disable"></gumga-date>\n                            </div>\n                            <div class="col-md-4">\n                                <div gumga-form-class="parcelinterest">\n                                    <label ng-if="interestActive" gumga-translate-tag="title.parcelinterest"></label>\n                                    <label ng-if="!interestActive">Mora</label>\n                                    <div class="input-group">\n                                        <input type="text" ng-if="interestActive" name="parcelinterest"\n                                               ng-model="title.data.parcelinterest" class="form-control text-right"\n                                               gumga-error\n                                               ui-percentage-mask tabindex="7" ng-disabled="disable"/>\n                                        <input type="text" ng-if="!interestActive" name="parcelinterest"\n                                               ng-model="title.data.mora"\n                                               class="form-control text-right" gumga-error ui-money-mask="2"\n                                               tabindex="7"\n                                               ng-disabled="disable"/>\n                                        <span class="input-group-btn">\n                                <button class="btn btn-default" ng-click="calculatedInterest()"><i\n                                        class="glyphicon glyphicon-sort"></i></button>\n                            </span>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class="col-md-4 m-t-md">\n                                <div gumga-form-class="parcelpenalty">\n                                    <gmd-input>\n                                        <input type="text" class="form-control text-right gmd" name="parcelpenalty"\n                                               ng-model="title.data.parcelpenalty" gumga-error ui-percentage-mask\n                                               tabindex="8"\n                                               ng-disabled="disable"/>\n                                        <span class="bar"></span>\n                                        <label gumga-translate-tag="title.parcelpenalty"></label>\n                                    </gmd-input>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="row">\n                            <div class="col-lg-4 col-md-4 m-t-md">\n                                <div gumga-form-class="value">\n                                    <gmd-input>\n                                        <input type="text" name="value" class="form-control text-right gmd"\n                                               id="valueParcel"\n                                               ng-model="title.data.value" ng-blur="calculateParcels()"\n                                               ng-disabled="title.data.billetCollection >= 2 || disable" gumga-error\n                                               ui-money-mask="2"\n                                               required tabindex="9"/>\n                                        <span class="bar"></span>\n                                        <label gumga-translate-tag="title.valueparcel"\n                                               ng-show="titleType == \'pay\' || titleType== \'editpay\'">valueparcel</label>\n                                        <label gumga-translate-tag="title.valueparcelReceive"\n                                               ng-show="titleType == \'receive\' || renegotiation || titleType== \'editreceive\'">valueparcel</label>\n\n                                    </gmd-input>\n                                </div>\n                            </div>\n                            <div class="col-lg-4 col-md-4 m-t-md">\n                                <div gumga-form-class="numberParcel">\n                                    <gmd-input>\n                                        <input type="number" min="1"\n                                               ng-disabled="!title.data.expiration || title.data.billetCollection >= 2 || disable"\n                                               ng-blur="change()" name="numberParcel" class="form-control gmd"\n                                               id="numberParcel"\n                                               max="300"\n                                               ng-model="title.data.numberParcel" tabindex="10" gumga-error required/>\n                                        <span class="bar"></span>\n                                        <label for="numberParcel"\n                                               gumga-translate-tag="title.numberParcels">numberParcel</label>\n                                        <p class="text-danger" ng-if="TitleForm.$error.max">Max de 300 parcelas</p>\n                                    </gmd-input>\n                                </div>\n                            </div>\n                            <div class="col-lg-4 col-md-4 m-t-md">\n                                <div>\n                                    <gmd-input>\n                                        <input type="text" class="form-control gmd" name="expiration"\n                                               ng-model="title.data.expiration"\n                                               ng-blur="change()" required uib-datepicker-popup="dd/MM/yyyy"\n                                               tabindex="11"\n                                               ng-disabled="disable"/>\n                                        <span class="bar"></span>\n                                        <label ng-show="title.data.numberParcel <= 1 || title.data.numberParcel == undefined"\n                                               gumga-translate-tag="title.expiration">expiration</label>\n                                        <label ng-show="title.data.numberParcel > 1"\n                                               gumga-translate-tag="title.expirations">expiration</label>\n                                    </gmd-input>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="row">\n                            <div class="col-md-12">\n                                <div gumga-form-class="labels">\n                                    <label for="labels" gumga-translate-tag="title.labels">labels</label>\n                                    <ui-select multiple tagging="labelTransform" tagging-tokens=",|/" id="labels"\n                                               ng-model="title.data.labels" theme="bootstrap" tabindex="13"\n                                               name="labels"\n                                               title="Escolhe um label" ng-disabled="disable">\n                                        <ui-select-match placeholder="Selecione os labels...">{{$item.value}}\n                                        </ui-select-match>\n                                        <ui-select-choices repeat="label in labels">\n                                            <div ng-if="label.isTag">{{label.value +\' (novo)\'}}</div>\n                                            <div ng-if="!label.isTag">{{label.value + label.isTag}}</div>\n                                        </ui-select-choices>\n                                    </ui-select>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="row">\n                            <div class="col-md-12">\n                                <div gumga-form-class="historic">\n                                    <label for="historic" gumga-translate-tag="title.historic">historic</label>\n                                    <textarea type="text" name="historic" class="form-control" id="historic" min="1"\n                                              max="60"\n                                              ng-model="title.data.memo" tabindex="12" gumga-error\n                                              ng-disabled="disable">\n                                    </textarea>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-md-7" id="panel2">\n                        <ul class="nav nav-tabs gmd" style="margin-top: -8px;">\n                            <li class="uib-tab" heading="parcels" ng-class="step == 1 ? \'active\':\'\'" ng-if="step == 1">\n                                <a ng-click="changeStep(1)">\n                                    <h4 class="h2-margin" gumga-translate-tag="title.parcels"></h4>\n                                </a>\n                            </li>\n                            <li class="uib-tab" heading="parcels" ng-class="step == 1 ? \'active\':\'\'" ng-if="step == 2">\n                                <a ng-click="changeStep(1)">Parcelas</a>\n                            </li>\n                            <li class="uib-tab" heading="rateio" ng-class="step == 2 ? \'active\':\'\'" ng-if="step == 1">\n                                <a ng-click="changeStep(2)">Rateio</a>\n                            </li>\n                            <li class="uib-tab" heading="rateio" ng-class="step == 2 ? \'active\':\'\'" ng-if="step == 2">\n                                <a ng-click="changeStep(2)">\n                                    <h4 class="h2-margin">Rateio</h4>\n                                </a>\n                            </li>\n                        </ul>\n                        <div class="tab-content" ng-class="title.data.parcel.length >= 1 ? \'tabs-content\' : \'\'">\n                            \x3c!-- Parcelas --\x3e\n                            <div class="tab-pane" ng-class="step == 1 ? \'active\': \'\'">\n                                <div ng-if="title.data.parcel.length > 0 && title.data.numberParcel">\n                                    <div class="row m-t-md">\n                                        <div class="col-md-2 text-right">\n                                            <label gumga-translate-tag="title.numberparcel"></label>\n                                        </div>\n                                        <div class="col-md-3 text-center">\n                                            <label gumga-translate-tag="title.expiration"></label>\n                                        </div>\n                                        <div class="col-md-3 text-right">\n                                            <label gumga-translate-tag="title.value"></label>\n                                        </div>\n                                        <div class="col-md-4">\n                                            <label ng-if="title.data.parcel.length > 0 && title.data.numberParcel"\n                                                   class="pull-right" style="margin-top: 1%;margin-right: 4%;">\n                                                <span style="font-size: 20px">Total {{sumParcels(title.data.parcel) | currency: \'R$ \'}}</span>\n                                            </label>\n                                            <label ng-if="title.data.parcel.length > 0 && title.data.numberParcel && titleType == \'editpay\' && paymentRest > 0"\n                                                   class="pull-right" style="margin-right:4%">\n                                                <span>Restante a pagar {{paymentRest | currency: "R$"}}</span>\n                                            </label>\n                                            <label ng-if="title.data.parcel.length > 0 && title.data.numberParcel && titleType == \'editreceive\' && paymentRest > 0"\n                                                   class="pull-right" style="margin-right:4%">\n                                                <span>Restante a receber {{paymentRest | currency: "R$"}}</span>\n                                            </label>\n                                        </div>\n                                    </div>\n                                    <div class="scroll" id="scrollParcels">\n                                        <div class="row" ng-repeat="parcel in title.data.parcel">\n                                            <div class="col-md-2" style="margin-left: 28px;margin-right: -30px;">\n                                                <gmd-input>\n                                                    <input type="text" class="form-control number-parcel gmd"\n                                                           name="number"\n                                                           ng-model="parcel.number" id="number" readonly="true"\n                                                           style="padding: 0;text-align: center; border-bottom:1px solid #333 !important"/>\n                                                    <span class="bar"></span>\n                                                </gmd-input>\n                                            </div>\n                                            <div class="col-md-3">\n                                                <gmd-input>\n                                                    <input type="text" class="form-control inputParcel text-center gmd"\n                                                           name="expirationParcel" ng-model="parcel.expiration"\n                                                           uib-datepicker-popup="dd/MM/yyyy"\n                                                           ng-focus="oldDateParcel = parcel.expiration"\n                                                           ng-blur="changeDateParcel(parcel.expiration, $index, oldDateParcel)"/>\n                                                    <span class="bar"></span>\n                                                </gmd-input>\n                                            </div>\n                                            <div class="col-md-4" style="margin-left: -30px;">\n                                                <gmd-input>\n                                                    <input type="text" class="form-control text-right inputParcel gmd"\n                                                           name="value"\n                                                           ng-model="parcel.value" gumga-error ui-money-mask="2"\n                                                           ng-focus="oldValueParcel = parcel.value"\n                                                           ng-blur="changeValueParcel(parcel.value, $index, oldValueParcel)"\n                                                           style="padding:0"/>\n                                                    <span class="bar"></span>\n                                                </gmd-input>\n                                            </div>\n                                            <div class="col-md-1">\n                                                <span ng-if="parcel.fullPaid" class="label label-success">Pago</span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            \x3c!-- Rateio --\x3e\n                            <div class="tab-pane" ng-class="step == 2 ? \'active\':\'\'"\n                                 ng-mouseover="(title.data.hasPayment == false || title.data.hasRatio == false) ? TitleForm.$valid = true : \'\'">\n                                <div class="row m-t-md" style="margin-left: 0;">\n                                    <div class="col-md-8">\n                                        <label gumga-translate-tag="title.ratioPlan">ratioPlan</label>\n                                        <gumga-many-to-one\n                                                value="title.data.ratioPlan"\n                                                on-select="automaticRatio(value)"\n                                                list="individuals"\n                                                search-method="ratioPlan.methods.asyncSearch(\'label\',param)"\n                                                field="name"\n                                                description="plan.name"\n                                                authorize-add="false">\n                                            <match>\n                                                <div>{{match.model.id}} - {{match.model.name}}</div>\n                                            </match>\n                                        </gumga-many-to-one>\n                                    </div>\n                                    <div class="col-md-4">\n                                        <label ng-if="title.data.parcel.length > 0 && title.data.numberParcel"\n                                               class="pull-right"\n                                               style="margin-top: 1%;margin-right: 4%;">\n                                            <span class="" style="font-size: 20px">Total {{sumParcels(title.data.parcel) | currency: \'R$ \'}}</span>\n                                        </label>\n                                    </div>\n                                </div>\n                                <div class="row m-t-md" style="margin-left: 0;">\n                                    <div class="col-md-12">\n                                        <ul class="list-group" ng-repeat="plan in planTree">\n                                            <h3>{{plan.name}}</h3>\n                                            <div class="row">\n                                                <div class="col-md-12">\n                                                    <div>\n                                                        <label gumga-translate-tag="title.planleaf"></label>\n                                                        <ui-select multiple multiple tagging="newPlanLeaf"\n                                                                   tagging-tokens=",|/"\n                                                                   ng-model="title.data.planLeafs[$index]"\n                                                                   on-select="selectedRatio($item, plan.type, $index)">\n                                                            <ui-select-match placeholder="Contas">\n                                                                <span ng-bind="$item.name"></span>\n                                                            </ui-select-match>\n                                                            <ui-select-choices\n                                                                    repeat="item in selectArrays[plan.type.id]"\n                                                                    refresh="buscaLeafs(plan,$select.search)">\n                                                    <span>{{item.name}}<span class="pull-right"><i\n                                                            class="glyphicon glyphicon-info-sign"\n                                                            tooltip-append-to-body="true" tooltip-placement="left"\n                                                            uib-tooltip="{{item.completeName}}"></i></span></span>\n                                                                <div ng-if="item.isTag">{{item.value +\' (novo)\'}}</div>\n                                                            </ui-select-choices>\n                                                        </ui-select>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <li class="list-group-item"\n                                                ng-repeat="account in title.data.planLeafs[$index]">\n                                                <div class="row" style="margin-bottom: 10px">\n                                                    <div class="col-md-8">\n                                                        <h3>{{account.name}}</h3>\n                                                    </div>\n                                                    <div class="col-md-4">\n                                                        <gmd-input>\n                                                            <input type="text" placeholder="Valor"\n                                                                   ng-focus="valores($index, account)"\n                                                                   name="value{{::$index}}" ng-model="account.value"\n                                                                   ng-disabled="account.subPlanLeafs.length > 0"\n                                                                   gumga-error\n                                                                   ui-money-mask="2"\n                                                                   class="form-control text-right gmd"/>\n                                                            <span class="bar"></span>\n                                                        </gmd-input>\n                                                    </div>\n                                                    <p class="text-danger text-right"\n                                                       ng-if="account.value > sumParcels(title.data.parcel) ">Valor deve\n                                                        ser\n                                                        menor\n                                                        que o valor total das parcelas</p>\n                                                </div>\n                                                <div class="row">\n                                                    <div ng-show="plan.planChild.length > 0"\n                                                         ng-init="checkSubPlanLeafs(account)">\n                                                        <div class="col-md-6">\n                                                            <ui-select ng-model="account.leaf"\n                                                                       ng-disabled="invalidAddLeaf(account) || !account.value">\n                                                                <ui-select-match placeholder="Unidade Rateio">\n                                                                    <span ng-bind="$select.selected.name"></span>\n                                                                </ui-select-match>\n                                                                <ui-select-choices repeat="item in selectArray"\n                                                                                   refresh="buscaSubLeafs(plan.planChild[0],$select.search)">\n                                                                    <span ng-bind="item.name"></span>\n                                                                </ui-select-choices>\n                                                            </ui-select>\n                                                        </div>\n                                                        <div class="col-md-3">\n                                                            <gmd-input>\n                                                                <input type="text" placeholder="Valor Unidade"\n                                                                       ng-disabled="invalidAddLeaf(account) || !account.value"\n                                                                       name="leafValue{{::$index}}"\n                                                                       ng-model="account.valueLeaf"\n                                                                       gumga-error ui-money-mask="2"\n                                                                       class="form-control text-right gmd"/>\n                                                                <span class="bar"></span>\n                                                            </gmd-input>\n                                                        </div>\n                                                        <div class="col-md-3">\n                                                            <button type="button"\n                                                                    class="btn btn-block btn-primary gmd raised"\n                                                                    ng-disabled="validAddLeaf(account) || invalidAddLeaf(account)"\n                                                                    ng-click="addLeaf(account, $index)">\n                                                                <span class="glyphicon glyphicon-plus"></span>\n                                                            </button>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <ul class="list-group" ng-if="account.subPlanLeafs"\n                                                    style="margin-top:10px">\n                                                    <li class="list-group-item"\n                                                        ng-repeat="leaf in account.subPlanLeafs">\n                                                        <div class="row">\n                                                            <div class="col-md-6">{{leaf.name}}</div>\n                                                            <div class="col-md-3 text-right">{{leaf.value | currency:\n                                                                \'R$ \'\n                                                                }}\n                                                            </div>\n                                                            <div class="col-md-3">\n                                                                <a type="button" class="text-danger pull-right"\n                                                                   ng-click="removeLeaf(account, $index)">\n                                                                    <span class="glyphicon glyphicon-remove"></span>\n                                                                </a>\n                                                            </div>\n                                                        </div>\n                                                    </li>\n                                                </ul>\n                                                <br/>\n                                                <p class="text-danger"\n                                                   ng-show="pL.value != subLeafs[$index] && plan.planChild.length>0">\n                                                    Valor\n                                                    dos\n                                                    rateios deve ser igual o valor da conta</p>\n                                                <p class="text-danger" ng-show="pL.sub.planLeaf.value > pL.value ">Valor\n                                                    do\n                                                    rateio\n                                                    filho deve ser menor que o valor do rateio pai</p>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>  \x3c!--Final Rateio--\x3e\n                        </div>      \x3c!--Final dos nav-tab--\x3e\n                    </div>          \x3c!--Final parcela/rateio--\x3e\n                </div>\n            </div>\n        </div>\n        <div style="margin-top:2%" ng-if="titleType == \'pay\' || titleType == \'editpay\' ">\n            <button type="button" ng-click="back(\'listpay\')" class="btn btn-default pull-right gmd raised">Cancelar\n            </button>\n            <div class="btn-group pull-right" uib-dropdown style="padding-right: 1%;">\n                <button id="split-buttonPay" type="button" ng-click="save(title.data)" ng-disabled="!TitleForm.$valid"\n                        class="btn btn-primary gmd raised">Salvar\n                </button>\n                <button type="button" class="btn btn-primary gmd raised" uib-dropdown-toggle\n                        ng-disabled="!TitleForm.$valid">\n                    <span class="caret"></span>\n                </button>\n                <ul class="dropdown-menu" uib-dropdown-menu role="menu" aria-labelledby="split-button">\n                    <li role="menuitem"><a href ng-click="launchPaid()">Lançar Pago</a></li>\n                </ul>\n            </div>\n        </div>\n        <div style="margin-top:2%" ng-if="titleType == \'receive\' || titleType == \'editreceive\' || renegotiation ">\n            <button type="button" ng-click="back(\'listreceive\')" class="btn btn-default pull-right gmd raised">\n                Cancelar\n            </button>\n\n            <div class="btn-group pull-right" uib-dropdown style="padding-right: 1%;">\n                <button id="split-buttonReceive" type="button" ng-click="save(title.data)"\n                        ng-disabled="!TitleForm.$valid"\n                        class="btn btn-primary gmd raised">Salvar\n                </button>\n\n                <button type="button" class="btn btn-primary gmd raised" uib-dropdown-toggle\n                        ng-disabled="!TitleForm.$valid">\n                    <span class="caret"></span>\n                </button>\n                <ul class="dropdown-menu" uib-dropdown-menu role="menu" aria-labelledby="split-button">\n                    <li role="menuitem"><a href ng-click="launchPaid()">Lançar Pago</a></li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</form>\n');
    } ]), module.exports = path;
}, function(module, exports) {
    var path = "/financeTitle/views/list.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '<div class="row">\n    <div class="col-md-12">\n        <div class="col-md-3">\n            <a ng-click="goInsert()" class="btn btn-primary">\n                <i class="fa fa-plus"></i>\n                <span gumga-translate-tag="formbuttons.new{{titleType}}"> New </span>\n            </a>\n        </div>\n        <div class="col-md-3">\n            <ui-select multiple ng-model="labels.data" theme="bootstrap" name="labels" on-select="selectLabel($item)"\n                       on-remove="reset()">\n                <ui-select-match placeholder="Buscar Tag">{{$item.value}}</ui-select-match>\n                <ui-select-choices repeat="label in labels" refresh="buscaTag($select.search)">\n                    <div ng-if="!label.isTag">{{label.value + label.isTag}}</div>\n                </ui-select-choices>\n            </ui-select>\n        </div>\n\n        <div class="col-md-6">\n            <gumga-query search="simpleSearch(field,param)" advanced-search="title.methods.advancedSearch(param)"\n                         saved-filters="title.methods.getQuery(page)" save-query="title.methods.postQuery(query, name)">\n                <search-field label="N° Documento" field="documentNumber"></search-field>\n                <search-field label="Valor Total" field="value"></search-field>\n                <search-field label="Participações" field="participation"></search-field>\n                <advanced-search-field type="string" label="Número do documento"\n                                       field="documentNumber"></advanced-search-field>\n                <advanced-search-field type="string" label="Valor Total" field="value"></advanced-search-field>\n                <advanced-search-field type="date" label="Data de Emissão" field="emissionDate"></advanced-search-field>\n            </gumga-query>\n        </div>\n    </div>\n</div>\n\n<div class="col-md-12" style="margin-top:1%">\n    <gumga-list class="table-striped"\n                data="title.data"\n                configuration="tableConf"\n                page-size="title.pageSize"\n                count="title.count"\n                page-model="title.page"\n                max-height="400px"\n                on-page-change="title.methods.get(page, pageSize)">\n    </gumga-list>\n</div>\n\n');
    } ]), module.exports = path;
}, function(module, exports) {
    var path = "/financeTitle/views/modalLaunchPaid.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '<form name="modalPaid">\n    <div class="modal-header">\n        <h3 class="modal-title">Inserir</h3>\n    </div>\n    <div class="modal-body">\n        <div class="row">\n            <div class="col-md-12">\n                <div>\n                    <label gumga-translate-tag="title.financeUnit"></label>\n                    <gumga-many-to-one\n                                value="title.data.automaticFinanceUnit"\n                                list="automaticFinanceUnit"\n                                search-method="financeunit.methods.asyncSearch(\'name\',param)"\n                                field="name"\n                                display-info="false"\n                                authorize-add="false"\n                                tab-seq="1">\n                    </gumga-many-to-one>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="modal-footer">\n        <button type="button" class="btn btn-primary" ng-click="ok(title.data)">Salvar</button>\n        <button type="button" class="btn btn-warning" ng-click="cancel()">Cancelar</button>\n    </div>\n</form>\n\n\n\x3c!--<div class="col-md-2">\n<label gumga-translate-tag="title.registerAsPayed"></label>\n<button type="button" class="btn btn-block" tabindex="2" ng-class="{\'btn-success\': title.data.registerAsPayed, \'btn-default\': !title.data.registerAsPayed}" ng-model="title.data.registerAsPayed" uib-btn-checkbox uib-btn-checkbox-true="true" uib-btn-checkbox-false="false">\n<span ng-if="title.data.registerAsPayed" gumga-translate-tag="title.ativo"></span>\n<span ng-if="!title.data.registerAsPayed" gumga-translate-tag="title.desativo"></span>\n</button>\n</div>--\x3e');
    } ]), module.exports = path;
}, function(module, exports) {
    var path = "/financeTitleParcelPay/views/list.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '<div class="row">\n    <div class="col-md-12">\n        <div class="col-md-4">\n            <label>Pessoa:</label>\n            <form name="Form">\n                <gumga-many-to-one\n                        value="individualSearch"\n                        list="individual.data"\n                        search-method="individual.methods.asyncSearch(\'name\',param)"\n                        add-method="individual.methods.asyncPost(value,\'name\')"\n                        field="name"\n                        authorize-add="false">\n                </gumga-many-to-one>\n            </form>\n        </div>\n        <div ng-class="{\'col-md-3 col-lg-3\': filters == \'custom\', \'col-md-8 col-lg-8\': filters !== \'custom\'}">\n            <label>Filtros Rápidos:</label>\n            <div class="row">\n                <label class="btn-sm gmd raised" ng-class="buttonTypeClass(\'pays\')" uib-btn-radio="\'pays\'" ng-model="filterPay" uncheckable ng-click="pays(1)">A pagar</label>\n                <label class="btn-sm gmd raised" ng-class="buttonTypeClass(\'paid\')" uib-btn-radio="\'paid\'" ng-model="filterPay" uncheckable ng-click="paid(1)">Pagos</label>\n            </div>\n            <div class="row" style="margin-top: 10px">\n                <label class="btn-sm gmd raised" ng-if="filters !== \'custom\'" ng-model="filters"\n                       uncheckable\n                       ng-click="filter(\'today\')" ng-class="buttonSubTypeClass(\'today\')" uib-btn-radio="\'today\'">Hoje</label>\n                <label class="btn-sm gmd raised" ng-if="filters !== \'custom\'" ng-model="filters"\n                       uncheckable\n                       ng-click="filter(\'thisWeek\')" ng-class="buttonSubTypeClass(\'thisWeek\')" uib-btn-radio="\'thisWeek\'">Esta semana</label>\n                <label class="btn-sm gmd raised" ng-if="filters !== \'custom\'" ng-model="filters"\n                       uncheckable\n                       ng-click="filter(\'thisMonth\')" ng-class="buttonSubTypeClass(\'thisMonth\')" uib-btn-radio="\'thisMonth\'">Este Mês</label>\n                <label class="btn-sm gmd raised" ng-if="filters !== \'custom\'" ng-model="filters"\n                       uncheckable\n                       ng-click="filter(\'thisYear\')" ng-class="buttonSubTypeClass(\'thisYear\')" uib-btn-radio="\'Thisyear\'">Este Ano</label>\n                <label class="btn-sm gmd raised" ng-model="filters" uncheckable ng-class="buttonSubTypeClass(\'custom\')"\n                       uib-btn-radio="\'custom\'" ng-click="changeSubTypeButton(\'custom\')">Personalizado</label>\n            </div>\n        </div>\n        <div class="col-md-2 col-lg-2 m-t-md" ng-show="filters == \'custom\'">\n            <gmd-input>\n                <input type="text" name="expiration" class="form-control gmd" uib-datepicker-popup="dd/MM/yyyy"\n                       ng-model="$parent.$parent.endDate" ng-blur="filter(\'custom\')"/>\n                <span class="bar"></span>\n                <label>Data final</label>\n            </gmd-input>\n        </div>\n    </div>\n</div>\n\n<div class="col-md-12" style="margin-top:1%">\n    <div class="panel panel-default">\n        <div class="panel-body">\n            <div class="row">\n                <div class="col-md-1">\n                    <button\n                            class="btn btn-success gmd raised"\n                            ng-click="individualCheckAndPay(selectedValues, containsFullPaid)">\n                        <i ng-if="!containsFullPaid">Pagar</i>\n                        <i ng-if="containsFullPaid">Imprimir Recibo</i>\n                    </button>\n                </div>\n\n                <div class="col-md-4">\n                    <label ng-if="errorMessage" class="text-danger">{{errorMessage}}</label>\n                </div>\n                <div class="col-md-3 text-right">\n                    <h3 ng-if="total > 0" class="text-success">{{ total | currency: \'R$ \' }} à Pagar</h3>\n                    <h3 ng-if="increase > 0" class="text-success">{{ increase | currency: \'R$ \' }} de\n                        Acréscimo</h3>\n                </div>\n            </div>\n        </div>\n    </div>\n    <gumga-list\n            class="table-striped"\n            sort="titleparcelPay.methods.sort(field, dir)"\n            data="titleparcelPay.data"\n            on-click="totalize()"\n            configuration="tableConfig"\n            page-size="titleparcelPay.pageSize"\n            count="titleparcelPay.count"\n            page-model="titleparcelPay.page"\n            max-height="400px"\n            on-page-change="titleparcelPay.methods.get(page, pageSize)">\n    </gumga-list>\n</div>');
    } ]), module.exports = path;
}, function(module, exports) {
    var path = "/financeTitleParcelPay/views/pay.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '<div class="col-md-12" ng-show="parcels.length > 0"> \x3c!-- ng-show="parcels.length > 0" --\x3e\n    <div class="panel panel-default">\n        <div class="panel-heading">PAGAMENTO PARA {{parcels[0].individual.name}}\n            <h3 style="float: right;font-size: 16px !important;">Total a pagar {{total | currency: "R$"}}</h3></div>\n        <div class="panel-body">\n            <form name="PaymentForm">\n                <div class="col-md-6">\n                    <div class="row">\n                        <gumga-list class="table-striped" data="parcels" configuration="parcelsConfig">\n                        </gumga-list>\n                    </div>\n                </div>\n                \x3c!--Lado Esquerdo--\x3e\n                <div class="col-md-6">\n                    <div class="row">\n                        <div class="col-md-7">\n                            <h2 gumga-translate-tag="titleparcel.pay">pay</h2>\n                        </div>\n                        <div class="col-md-4 col-md-offset-1">\n                            <label gumga-translate-tag="titleparcel.date">date</label>\n                            <gumga-date ng-model="payment.momment" id="insertMoment" name="insertMoment"\n                                        configuration="{showCalendar: false}"></gumga-date>\n                            \x3c!--<input type="text" name="insertMoment" class="form-control" uib-datepicker-popup="dd/MM/yyyy" ng-model="payment.momment"/>--\x3e\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-12">\n                            <label gumga-translate-tag="titleparcel.formPayment">formPayment</label><br/>\n                            <label class="btn btn-info gmd raised" ng-model="payment.method" uib-btn-radio="\'money\'"\n                                   gumga-translate-tag="titleparcel.money" ng-click="setarfocusPayment(\'money\')">money</label>\n                            <label class="btn btn-info gmd raised" ng-model="payment.method"\n                                   uib-btn-radio="\'thirdCheck\'"\n                                   gumga-translate-tag="titleparcel.thirdCheck" ng-click="setarfocusPayment(\'check\')">thirdCheck</label>\n                            <label class="btn btn-info gmd raised" ng-model="payment.method" uib-btn-radio="\'bank\'"\n                                   gumga-translate-tag="titleparcel.bank">bank</label>\n                            <label class="btn btn-info gmd raised" ng-model="payment.method" uib-btn-radio="\'card\'"\n                                   gumga-translate-tag="titleparcel.card" ng-click="setarfocusPayment(\'card\')">card</label>\n                            <label class="btn btn-info gmd raised" ng-model="payment.method" uib-btn-radio="\'credit\'"\n                                   gumga-translate-tag="titleparcel.credit"\n                                   ng-if="showMenuPersonalCredit" ng-click="setarfocusPayment(\'credit\')">credit</label>\n                        </div>\n                    </div>\n                    <hr style="margin: 10px 0 10px 0;"/>\n\n                    \x3c!-- DINHEIRO --\x3e\n                    <div class="row" ng-show="payment.method == \'money\'">\n                        <div class="col-md-8">\n                            <div>\n                                <label gumga-translate-tag="titleparcel.financeUnit">financeUnit</label><br/>\n                                <gumga-many-to-one\n                                        tab-seq="1"\n                                        value="payment.money.financeUnit"\n                                        list="financeunit.data"\n                                        search-method="localcash.methods.asyncSearch(\'name\',param)"\n                                        add-method="financeunit.methods.asyncPost(value,\'name\')"\n                                        on-new-value-added="checkType()"\n                                        description="type"\n                                        field="name"\n                                        authorize-add="false"\n                                        id="paymentMoneyFinanceunit"                                >\n                                </gumga-many-to-one>\n\n                            </div>\n                        </div>\n                        <div class="col-md-3 m-t-md">\n                            <gmd-input>\n                                <input id="valuemoney" type="text" name="value" ng-model="payment.value"\n                                       ng-focus="calcCheques(\'valuemoney\')" ng-click="selectAllText(\'valuemoney\')" class="form-control text-right gmd" gumga-error\n                                       ui-money-mask="2" tabindex="2">\n                                <span class="bar"></span>\n                                <label gumga-translate-tag="titleparcel.value">value</label><br/>\n                            </gmd-input>\n                        </div>\n                        <div class="col-md-1 m-t-md">\n                            <label style="height: 0;">&nbsp;</label>\n                            <button class="btn gmd fab btn-success btn-sm" ng-click="addPaymentMoney(payment)"\n                                    ng-disabled="PaymentForm.$error.manyToOne">\n                                <i class="material-icons">add</i>\n                            </button>\n                        </div>\n                    </div>\n                    \x3c!-- DINHEIRO --\x3e\n\n                    \x3c!-- CHEQUE TERCEIRO --\x3e\n                    <div class="row" ng-show="payment.method == \'thirdCheck\'">\n                        <div class="col-md-5">\n                            <div gumga-form-class="account">\n                                <label gumga-translate-tag="titleparcel.account">currentAccount</label><br/>\n                                <gumga-many-to-one\n                                        value="payment.check.financeUnit"\n                                        name="account"\n                                        tab-seq="1"\n                                        async="true"\n                                        list="checkingaccount.data"\n                                        search-method="chequeportfolio.methods.asyncSearch(\'name\',param)"\n                                        add-method="checkingaccount.methods.asyncPost(value,\'name\')"\n                                        field="name"\n                                        authorize-add="false"\n                                        id="paymentCheckFinanceunit">\n                                </gumga-many-to-one>\n                            </div>\n                        </div>\n                        <div class="col-md-3 col-md-offset-3 m-t-md">\n                            <gmd-input>\n                                <input id="valuecheck" type="text" name="value" ng-model="payment.value"\n                                       ng-focus="calcCheques(\'valuecheck\')"\n                                       ng-click="selectAllText(\'valuecheck\')"\n                                       class="form-control text-right gmd" disabled ui-money-mask="2" tabindex="2">\n                                <span class="bar"></span>\n                                <label gumga-translate-tag="titleparcel.value">value</label><br/>\n                            </gmd-input>\n                        </div>\n                        <div class="col-md-1 m-t-md">\n                            <label style="height: 0;">&nbsp;</label>\n                            <button class="btn gmd fab btn-success btn-sm" ng-click="addPaymentCheck(payment)"\n                                    ng-disabled="payment.check.checks.length < 1">\n                                <i class="material-icons">add</i>\n                            </button>\n                        </div>\n                        <div class="col-md-12">\n                            <gumga-many-to-many\n                                    left-list="cheques.data"\n                                    right-list="payment.check.checks"\n                                    left-search="listCheques(\'name\', param)"\n                                    post-method="thirdpartycheque.methods.save(value)"\n                                    authorize-add="false"\n                                    text-left="Listando {{$value}} {{$value > 1 ? \'itens\': \'item\'}}"\n                                    text-right="Listando {{$value}} {{$value > 1 ? \'itens\': \'item\'}}"\n                                    text-heading-left="Cheques"\n                                    text-heading-right="Cheques selecionados"\n                                    text-moveall-left="Mover todos para direita"\n                                    text-moveall-right="Mover todos para esquerda"\n                                    on-list-change="selecionados(value)"\n                                    text-left-empty="Lista está vazia"\n                                    text-right-empty="Lista está vazia"\n                                    text-right-placeholder="Filtrar"\n                                    required\n                                    text-left-placeholder="Filtrar">\n                                <left-field>\n                                    {{$value.chequeNumber}} | {{$value.bank.number}} | {{$value.issuer.name}} |\n                                    {{$value.value | currency: "R$"}}\n                                </left-field>\n                                <right-field>\n                                    {{$value.chequeNumber}} | {{$value.bank.number}} | {{$value.issuer.name}} |\n                                    {{$value.value | currency: "R$"}}\n                                </right-field>\n                            </gumga-many-to-many>\n                        </div>\n                    </div>\n                    \x3c!-- CHEQUE TERCEIRO --\x3e\n\n                    \x3c!--Banco / DOC - TED - CHEQUE--\x3e\n                    <div class="row" ng-if="payment.method == \'bank\'">\n                        <div class="col-md-12" style="margin-bottom:1%">\n                            <label gumga-translate-tag="titleparcel.operationType">operationType</label><br/>\n                            \x3c!--<input bs-switch ng-model="isTed" switch-on-text="{{\'TED\'}}" switch-off-text="{{\'DOC\'}}" type="checkbox" switch-off-color="{{\'primary\'}}">--\x3e\n                            <label class="btn btn-primary btn-outline gmd raised" ng-model="payment.type"\n                                   uib-btn-radio="\'TED\'"\n                                   gumga-translate-tag="titleparcel.ted" ng-click="setarfocusPayment(\'ted\')">ted</label>\n                            <label class="btn btn-primary btn-outline gmd raised" ng-model="payment.type"\n                                   uib-btn-radio="\'DOC\'"\n                                   gumga-translate-tag="titleparcel.doc" ng-click="setarfocusPayment(\'ted\')">doc</label>\n                            <label class="btn btn-primary btn-outline gmd raised" ng-model="payment.type"\n                                   uib-btn-radio="\'companyCheck\'" gumga-translate-tag="titleparcel.companyCheck" ng-click="setarfocusPayment(\'companyCheck\')">companyCheck</label>\n                        </div>\n                        <div ng-if="payment.type == \'TED\' || payment.type == \'DOC\'">\n                            <div class="col-md-3 m-t-md">\n                                <gmd-input>\n                                    <input type="text" ng-model="payment.docTed.operation" name="operation"\n                                           class="form-control gmd" tabindex="1" id="paymentBankFinanceunit">\n                                    <span class="bar"></span>\n                                    <label gumga-translate-tag="titleparcel.operationNumber">operationNumber</label>\n                                </gmd-input>\n                            </div>\n                            <div class="col-md-5">\n                                <div>\n                                    <label gumga-translate-tag="titleparcel.source">source</label>\n                                    <gumga-many-to-one\n                                            input-name="source"\n                                            value="payment.docTed.financeUnit"\n                                            field="name"\n                                            tab-seq="2"\n                                            list="sources"\n                                            search-method="checkingaccount.methods.asyncSearch(\'name\',param)"\n                                            authorize-add="false"\n                                            add-method="checkingaccount.methods.asyncPost(value,\'name\')">\n                                    </gumga-many-to-one>\n                                </div>\n                            </div>\n                            <div class="col-md-3 m-t-md">\n                                <gmd-input>\n                                    <input id="valuebank" type="text" name="value" ng-model="payment.value"\n                                           ng-focus="calcCheques(\'valuebank\')" ng-click="selectAllText(\'valuebank\')" class="form-control text-right gmd" gumga-error\n                                           ui-money-mask="2" tabindex="3">\n                                    <span class="bar"></span>\n                                    <label gumga-translate-tag="titleparcel.value">value</label><br/>\n                                </gmd-input>\n                            </div>\n                            <div class="col-md-1 m-t-md">\n                                <label style="height: 0;">&nbsp;</label>\n                                <button class="btn gmd fab btn-success btn-sm" ng-click="addPaymentBank(payment)"\n                                        ng-disabled="PaymentForm.$error.manyToOne">\n                                    <i class="material-icons">add</i>\n                                </button>\n                            </div>\n                        </div>\n                        <div ng-if="payment.type == \'companyCheck\'">\n                            <div class="col-md-12">\n                                <div gumga-form-class="account">\n                                    <div class="input-group">\n                                        <label gumga-translate-tag="titleparcel.account">account</label>\n                                        <gumga-many-to-one\n                                                tab-seq="1"\n                                                name="account"\n                                                value="payment.companyCheck.financeUnit"\n                                                search-method="checkingaccount.methods.asyncSearch(\'name\',param)"\n                                                field="name"\n                                                description="account"\n                                                authorize-add="false"\n                                                add-method="checkingaccount.methods.asyncPost(value,\'name\')"\n                                                id="paymentBank2Financeunit">\n                                        </gumga-many-to-one>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class="col-md-4 m-t-md">\n                                <div gumga-form-class="number">\n                                    <gmd-input>\n                                        <input type="text" name="number" ng-model="payment.companyCheck.numberCheck"\n                                               class="form-control gmd" tabindex="2" gumga-error/>\n                                        <span class="bar"></span>\n                                        <label gumga-translate-tag="titleparcel.checkNumber">checkNumber</label>\n                                    </gmd-input>\n                                </div>\n                            </div>\n                            <div class="col-md-4 m-t-md">\n                                <div gumga-form-class="availableIn">\n                                    <gmd-input>\n                                        <input type="text" name="availableIn" class="form-control gmd"\n                                               uib-datepicker-popup="dd/MM/yyyy"\n                                               ng-model="payment.companyCheck.availableIn"\n                                               is-open="openedAvailableIn" tabindex="3"/>\n                                        <span class="bar"></span>\n                                        <label gumga-translate-tag="titleparcel.availableIn">availableIn</label>\n                                    </gmd-input>\n                                </div>\n                            </div>\n                            <div class="col-md-4 m-t-md">\n                                <div gumga-form-class="value">\n                                    <gmd-input>\n                                        <input type="text" name="value" id="valuebank2" ng-model="payment.value"\n                                               ng-focus="calcCheques(\'valuebank2\')" ng-click="selectAllText(\'valuebank2\')" class="form-control text-right gmd" gumga-error\n                                               ui-money-mask="2" tabindex="4">\n                                        <span class="bar"></span>\n                                        <label gumga-translate-tag="titleparcel.value">Valor</label><br/>\n                                    </gmd-input>\n                                </div>\n                            </div>\n                            <div class="col-md-11 m-t-md">\n                                <div gumga-form-class="historic">\n                                    <gmd-input>\n                                        <input type="text" name="historic" ng-model="payment.companyCheck.historic"\n                                               class="form-control gmd" tabindex="5" gumga-error/>\n                                        <span class="bar"></span>\n                                        <label gumga-translate-tag="titleparcel.historic">historic</label>\n                                    </gmd-input>\n                                </div>\n                            </div>\n                            <div class="col-md-1 m-t-md">\n                                <label style="height: 0;">&nbsp;</label>\n                                <button class="btn gmd fab btn-success btn-sm"\n                                        ng-click="addPaymentCompanyCheck(payment)"\n                                        ng-disabled="PaymentForm.$error.manyToOne">\n                                    <i class="material-icons">add</i>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    \x3c!-- Banco / DOC - TED - CHEQUE --\x3e\n\n                    \x3c!-- CARTÃO--\x3e\n                    <div class="row" ng-if="payment.method == \'card\'">\n                        <div class="col-md-6">\n                            <label gumga-translate-tag="titleparcel.currentAccount">currentAccount</label>\n                            <gumga-many-to-one\n                                    name="card"\n                                    value="payment.card.financeUnit"\n                                    field="name"\n                                    tab-seq="1"\n                                    search-method="creditcard.methods.asyncSearch(\'name\',param)"\n                                    authorize-add="false"\n                                    id="paymentCardFinanceunit">\n                            </gumga-many-to-one>\n                        </div>\n                        <div class="col-md-3 col-md-offset-2 m-t-md">\n                            <gmd-input>\n                                <input id="valuecard" type="text" name="value" ng-model="payment.value"\n                                       ng-focus="calcCheques(\'valuecard\')" ng-click="selectAllText(\'valuecard\')"\n                                       class="form-control text-right gmd" gumga-error ui-money-mask="2" tabindex="2">\n                                <span class="bar"></span>\n                                <label gumga-translate-tag="titleparcel.value">value</label><br/>\n                            </gmd-input>\n                        </div>\n                        <div class="col-md-1 m-t-md">\n                            <label style="height: 0;">&nbsp;</label>\n                            <button class="btn gmd fab btn-success btn-sm" ng-click="addPaymentCard(payment)"\n                                    ng-disabled="PaymentForm.$error.manyToOne">\n                                <i class="material-icons">add</i>\n                            </button>\n                        </div>\n                    </div>\n                    \x3c!-- CARTÃO --\x3e\n\n                    \x3c!-- CRÉDITO --\x3e\n                    <div class="row" ng-show="payment.method == \'credit\' && showMenuPersonalCredit === true">\n                        <div class="col-md-8">\n                            <div>\n                                <label gumga-translate-tag="titleparcel.financeUnit">financeUnit</label><br/>\n                                <gumga-many-to-one\n                                        tab-seq="1"\n                                        value="payment.credit.financeUnit"\n                                        list="financeunit.data"\n                                        search-method="getPersonalCredits(params)"\n                                        add-method="individual.methods.asyncPost(value,\'name\')"\n                                        on-new-value-added="checkType()"\n                                        description="type"\n                                        field="name"\n                                        authorize-add="false"\n                                        id="paymentCreditFinanceunit">\n                                </gumga-many-to-one>\n                            </div>\n                        </div>\n                        <div class="col-md-3 m-t-md">\n                            <gmd-input>\n                                <input id="valuecredit" type="text" name="value" ng-model="payment.value"\n                                       ng-focus="calcCheques(\'valuecredit\')" ng-click="selectAllText(\'valuecredit\')"\n                                       class="form-control text-right gmd" gumga-error ui-money-mask="2" tabindex="2">\n                                <span class="bar"></span>\n                                <label gumga-translate-tag="titleparcel.value">value</label><br/>\n                            </gmd-input>\n                        </div>\n                        <div class="col-md-1 m-t-md">\n                            <label style="height: 0;">&nbsp;</label>\n                            <button class="btn gmd fab btn-success btn-sm" ng-click="addPaymentCredit(payment)"\n                                    ng-disabled="PaymentForm.$error.manyToOne">\n                                <i class="material-icons">add</i>\n                            </button>\n                        </div>\n                    </div>\n                    \x3c!-- CRÉDITO --\x3e\n\n                    \x3c!--Listagem--\x3e\n                    <div class="row" ng-if="payment.methodPayment.length > 0 && payment.numberPayment">\n                        <hr style="margin-bottom: 5px;"/>\n                        <div class="col-md-12">\n                            <label class="pull-left"><h3 gumga-translate-tag="titleparcel.methodPayment"></h3></label>\n                            <label class="pull-right m-t-md">Falta Pagar {{lastPayment | currency: "R$"}}</label>\n                        </div>\n                    </div>\n                    <div class="row" ng-if="payment.methodPayment.length">\n                        <div class="col-md-3">\n                            <label gumga-translate-tag="titleparcel.method">method</label>\n                        </div>\n                        <div class="col-md-5">\n                            <label gumga-translate-tag="titleparcel.account">Conta</label>\n                        </div>\n                        <div class="col-md-3">\n                            <label class="pull-right" gumga-translate-tag="titleparcel.value">Valor</label>\n                        </div>\n                        <div class="col-md-1">\n                            &nbsp;\n                        </div>\n                    </div>\n                    <div class="row" ng-repeat="method in payment.methodPayment"\n                         ng-if="payment.methodPayment.length > 0 && payment.numberPayment" style="margin-bottom: 20px;">\n                        <hr style="margin-top: 5px;"/>\n                        <div class="col-md-3">\n                            <span>{{method.historic}}</span>\n                        </div>\n                        <div class="col-md-5">\n                            <span>{{method.destination}}</span>\n                            <div ng-repeat="cheque in method.selectedChecks">\n                                <div>&nbsp;&nbsp;<span class="glyphicon glyphicon-chevron-right"></span>\n                                    {{cheque.bank.number}} - {{cheque.issuer.name}}\n                                </div>\n                            </div>\n                        </div>\n                        <div class="col-md-3">\n                            <span class="pull-right">{{method.value | currency: "R$ "}}</span>\n                            <div ng-repeat="cheque in method.selectedChecks">\n                                <div><label class="pull-right">{{cheque.value | currency: "R$ "}}</label></div>\n                            </div>\n                        </div>\n                        <div class="col-md-1">\n                            <a type="button" class="text-danger pull-right" uib-tooltip="Excluir"\n                               ng-click="removeLeaf(payment.methodPayment, $index)">\n                                <span class="glyphicon glyphicon-remove"></span>\n                            </a>\n                        </div>\n                    </div>\n\n                    <div class="row" ng-if="payment.method || payment.methodPayment.length > 0">\n                        <hr/>\n                        <div class="col-md-12">\n                            <label gumga-translate-tag="titleparcel.attachProof">attachProof</label>\n                            <gumga-file-upload\n                                    model="payment.receipt"\n                                    attribute="receipt"\n                                    endpoint="http://localhost:8084/finance-api/api/payment/receipt"\n                                    accepted="png,jpg,jpeg,pdf,deb,rar,zip"\n                                    max-size="1024"\n                                    on-upload-start="uploadStart()"\n                                    on-upload-complete="uploadComplete(e)"\n                                    on-upload-error="uploadError(e)">\n                            </gumga-file-upload>\n                        </div>\n                    </div>\n                </div>\n                <div class="row" ng-if="payment.methodPayment.length > 0 && payment.numberPayment ">\n                    <div class="col-md-6 col-sm-12 pull-right">\n                        <div class="col-sm-3 col-md-3 pull-left m-t-md" style="margin-left:-15px;">\n                            <gmd-input>\n                                <input class="form-control gmd" ng-model="generalDiscount"\n                                       ui-money-mask="2">\n                                <span class="bar"></span>\n                                <label class="control-label">Desconto</label>\n                            </gmd-input>\n                        </div>\n                        <div class="col-sm-9 col-md-3 pull-right" style="padding-left: 0;">\n                            <label>&nbsp;</label><br/>\n                            <button class="btn btn-block btn-primary gmd raised" ng-click="makePayment(payment, generalDiscount)">\n                                Realizar Pagamento\n                            </button>\n                        </div>\n                    </div>\n                    \x3c!--<div class="col-md-2 pull-right" style="margin-right:2%;">\n                        <label>&nbsp;</label><br/>\n                        <button type="button" class="btn btn-block btn-outline btn-default" ng-click="printReceipt()" >Imprimir Recibo</button>\n                    </div>--\x3e\n                </div>\n            </form>\n        </div>\n\n    </div>\n</div>\n<div class="col-md-12" ng-show="parcels.length == 0">\n    <label class="text-danger" gumga-translate-tag="titleparcel.messageError">messageError</label>\n</div>');
    } ]), module.exports = path;
}, function(module, exports) {
    var path = "/financeTitleParcelReceive/views/list.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '<div class="row">\n    <div class="col-md-12">\n        <div class="col-md-4">\n            <label>Pessoa:</label>\n            <form name="Form">\n                <gumga-many-to-one\n                        value="individualSearch"\n                        list="individual.data"\n                        search-method="individual.methods.asyncSearch(\'name\',param)"\n                        add-method="individual.methods.asyncPost(value,\'name\')"\n                        field="name"\n                        authorize-add="false">\n                </gumga-many-to-one>\n            </form>\n        </div>\n        <div ng-class="{\'col-md-8\': hideOthers, \'col-md-4\': !hideOthers}">\n            <div class="row">\n                <label>Filtros Rápidos:</label>\n            </div>\n            <div class="row">\n                <label id="toReceive" class="btn-sm gmd raised" ng-class="buttonTypeClass(\'TORECEIVE\')" uib-btn-radio="\'toReceive\'" ng-model="filterReceive" uncheckable ng-click="toReceive(1)">A Receber</label>\n                <label class="btn-sm gmd raised" ng-class="buttonTypeClass(\'RECEIVE\')" uib-btn-radio="\'receive\'" ng-model="filterReceive" uncheckable ng-click="receive(1)">Recebido</label>\n            </div>\n            <div class="row" style="margin-top: 10px">\n                <label class="btn-sm gmd raised" ng-model="filters" ng-show="hideOthers" uncheckable\n                       ng-click="filter(\'today\')" uib-btn-radio="\'today\'" ng-class="buttonSubTypeClass(\'today\')">Hoje</label>\n                <label class="btn-sm gmd raised" ng-model="filters" ng-show="hideOthers" uncheckable\n                       ng-click="filter(\'thisWeek\')" uib-btn-radio="\'thisWeek\'" ng-class="buttonSubTypeClass(\'thisWeek\')">Esta semana</label>\n                <label class="btn-sm gmd raised" ng-model="filters" ng-show="hideOthers" uncheckable\n                       ng-click="filter(\'thisMonth\')" uib-btn-radio="\'thisMonth\'" ng-class="buttonSubTypeClass(\'thisMonth\')">Este Mês</label>\n                <label class="btn-sm gmd raised" ng-model="filters" ng-show="hideOthers" uncheckable\n                       ng-click="filter(\'thisYear\')" uib-btn-radio="\'Thisyear\'" ng-class="buttonSubTypeClass(\'thisYear\')">Este Ano</label>\n                <label class="btn-sm gmd raised" ng-model="filters" uncheckable uib-btn-radio="\'custom\'"\n                       ng-click="hideOthers = !hideOthers; changeSubTypeButton(\'custom\')" ng-class="buttonSubTypeClass(\'custom\')">Personalizado</label>\n            </div>\n        </div>\n        <div class="col-md-2 m-t-md" ng-show="filters == \'custom\'">\n            \x3c!--<gumga-date ng-model="$parent.$parent.endDate" name="expiration" ng-blur="filter(\'custom\')"></gumga-date>--\x3e\n            <gmd-input>\n                <input type="text" name="expiration" class="form-control gmd" uib-datepicker-popup="dd/MM/yyyy"\n                       ng-model="$parent.$parent.endDate" ng-blur="filter(\'custom\')"/>\n                <span class="bar"></span>\n                <label>Data final</label>\n            </gmd-input>\n        </div>\n    </div>\n</div>\n\n<div class="col-md-12" style="margin-top:1%">\n    <div class="panel panel-default">\n        <div class="panel-body">\n            <div class="row">\n                <div class="col-md-6">\n                    <button\n                            class="btn btn-primary gmd raised"\n                            ng-click="individualCheckAndPay(selectedValues, containsFullPaid)">\n                        <i ng-if="!containsFullPaid">Receber</i>\n                        <i ng-if="containsFullPaid">Imprimir Recibo</i>\n                    </button>\n                    <button\n                            class="btn btn-default gmd raised"\n                            ng-click="renegotiation(selectedValues)"\n                            ng-if="isRenegotiate"\n                            ng-disabled="selectedValues.length === 0 || containsReplaced || containsFullPaid">\n                        Renegociar\n                    </button>\n                </div>\n                <div class="col-md-3">\n                    <label ng-if="errorMessage" class="text-danger">{{errorMessage}}</label>\n                </div>\n                <div class="col-md-3 text-right">\n                    <h3 ng-if="total > 0" class="text-success">{{ total | currency: \'R$ \' }} à Receber</h3>\n                    <h3 ng-if="increase > 0" class="text-success">{{ increase | currency: \'R$ \' }} de Acréscimo</h3>\n                </div>\n            </div>\n        </div>\n    </div>\n    <gumga-list class="table-striped"\n                sort="titleparcel.methods.sort(field, dir)"\n                data="titleparcel.data"\n                on-click="totalize()"\n                configuration="tableConfig"\n                page-size="titleparcel.pageSize"\n                count="titleparcel.count"\n                page-model="titleparcel.page"\n                max-height="400px"\n                on-page-change="titleparcel.methods.get(page, pageSize)">\n    </gumga-list>\n</div>\n');
    } ]), module.exports = path;
}, function(module, exports) {
    var path = "/financeTitleParcelReceive/views/pay.html";
    window.angular.module("ng").run([ "$templateCache", function(c) {
        c.put(path, '<div class="col-md-12" ng-show="parcels.length > 0">\n    <div class="panel panel-default">\n        <div class="panel-heading">RECEBER DE {{parcels[0].individual.name}}\n            <h3 style="float: right;font-size: 16px !important;">Total a receber {{total | currency: "R$"}}</h3></div>\n        <div class="panel-body">\n            <form name="PaymentForm">\n                \x3c!--<editor-fold desc="Lado Esquerdo"--\x3e\n                <div class="col-md-6">\n                    <div class="row">\n                        <gumga-list class="table-striped table-condensed" data="parcels"\n                                    configuration="tableConfig"></gumga-list>\n                    </div>\n                </div>\n                \x3c!--</editor-fold>--\x3e\n                \x3c!--<editor-fold des="Lado Direito">--\x3e\n                <div class="col-md-6">\n                    <h2 style="margin-top:0"> &nbsp; Recebimento de titulo</h2>\n\n                    <div class="row">\n                        <div class="col-md-9">\n                            <label gumga-translate-tag="titleparcelreceive.receipt">receipt</label><br/>\n                            <label gumga-translate-tag="titleparcelreceive.money" class="btn btn-primary gmd raised"\n                                   ng-model="payment.method" uib-btn-radio="\'money\'" ng-click="setarfocusPayment(\'money\')">money</label>\n                            <label gumga-translate-tag="titleparcelreceive.check" class="btn btn-primary gmd raised"\n                                   ng-model="payment.method" uib-btn-radio="\'thirdCheck\'" ng-click="setarfocusPayment(\'check\')">check</label>\n                            <label gumga-translate-tag="titleparcelreceive.bank" class="btn btn-primary gmd raised"\n                                   ng-model="payment.method" uib-btn-radio="\'tedDoc\'" ng-click="setarfocusPayment(\'bank\')">bank</label>\n                            <label gumga-translate-tag="titleparcelreceive.card" class="btn btn-primary gmd raised"\n                                   ng-model="payment.method" uib-btn-radio="\'card\'" ng-click="setarfocusPayment(\'card\')">card</label>\n                            <label class="btn btn-primary gmd raised" ng-model="payment.method" uib-btn-radio="\'credit\'"\n                                   gumga-translate-tag="titleparcel.credit"\n                                   ng-if="showMenuPersonalCredit" ng-click="setarfocusPayment(\'credit\')">credit</label>\n                        </div>\n                        <div class="col-md-3">\n                            <label gumga-translate-tag="titleparcelreceive.date">date</label><br/>\n                            <gumga-date ng-model="payment.momment" id="insertMoment" name="insertMoment"\n                                        configuration="{showCalendar: false}"></gumga-date>\n                            \x3c!--<input type="text" name="insertMoment" class="form-control" uib-datepicker-popup="dd/MM/yyyy" ng-model="payment.momment" is-open="isDatePickerOpen" ng-click="isDatePickerOpen = !isDatePickerOpen" close-text="Close"/>--\x3e\n                        </div>\n                    </div>\n\n                    \x3c!--<editor-fold desc="DINHEIRO">--\x3e\n                    <div class="row" ng-show="payment.method == \'money\'">\n                        <div class="col-md-8">\n                            <div>\n                                <label gumga-translate-tag="titleparcelreceive.financeunit">financeunit</label><br/>\n                                <gumga-many-to-one\n                                        value="payment.money.financeUnit"\n                                        search-method="localcash.methods.asyncSearch(\'name\', param)"\n                                        field="name"\n                                        authorize-add="false"\n                                        id="paymentMoneyFinanceunit">\n                                </gumga-many-to-one>\n                            </div>\n                        </div>\n                        <div class="col-md-3 m-t-md">\n                            <gmd-input>\n                                <input id="valuemoney" type="text" name="value" ng-model="payment.value"\n                                       ng-focus="calcCheques(\'valuemoney\');"\n                                       ng-click="selectAllText(\'valuemoney\')"\n                                       class="form-control text-right gmd" gumga-error ui-money-mask="2">\n                                <span class="bar"></span>\n                                <label gumga-translate-tag="titleparcelreceive.value">value </label>\n                            </gmd-input>\n                        </div>\n                        <div class="col-md-1 m-t-md">\n                            <label style="height: 0;">&nbsp;</label>\n                            <button class="btn gmd fab btn-success btn-sm" ng-click="addReceiveMoney(payment)">\n                                <i class="material-icons">add</i>\n                            </button>\n                        </div>\n                    </div>\n                    \x3c!--</editor-fold>--\x3e\n\n                    \x3c!--<editor-fold desc="CHEQUE TERCEIRO">--\x3e\n                    <div class="row" ng-show="payment.method == \'thirdCheck\'">\n                        <div class="col-md-2 m-t-md">\n                            <div gumga-form-class="bank">\n                                <gmd-input>\n                                    <input gumga-error type="text" name="bank" ng-model="payment.check.bank"\n                                           maxlength="3"\n                                           class="form-control gmd" tabindex="1" id="paymentCheckFinanceunit"/>\n                                    <span class="bar"></span>\n                                    <label gumga-translate-tag="titleparcelreceive.bank">bank</label>\n                                </gmd-input>\n                            </div>\n                        </div>\n                        <div class="col-md-2 m-t-md">\n                            <div gumga-form-class="branch">\n                                <gmd-input>\n                                    <input gumga-error type="text" name="branch" ng-model="payment.check.branch"\n                                           class="form-control gmd" tabindex="2"/>\n                                    <span class="bar"></span>\n                                    <label gumga-translate-tag="thirdpartycheque.branch">branch</label>\n                                </gmd-input>\n                            </div>\n                        </div>\n                        <div class="col-md-4 m-t-md">\n                            <div gumga-form-class="account">\n                                <gmd-input>\n                                    <input gumga-error type="text" name="account" ng-model="payment.check.account"\n                                           class="form-control gmd" tabindex="3"/>\n                                    <span class="bar"></span>\n                                    <label gumga-translate-tag="thirdpartycheque.account">account</label>\n                                </gmd-input>\n                            </div>\n                        </div>\n                        <div class="col-md-4 m-t-md">\n                            <div gumga-form-class="chequeNumber">\n                                <gmd-input>\n                                    <input gumga-error type="text" name="chequeNumber"\n                                           ng-model="payment.check.chequeNumber"\n                                           class="form-control gmd" tabindex="4"/>\n                                    <span class="bar"></span>\n                                    <label gumga-translate-tag="thirdpartycheque.chequeNumber">chequeNumber</label>\n                                </gmd-input>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="row" ng-show="payment.method == \'thirdCheck\'">\n                        <div class="col-md-4 m-t-md">\n                            <div gumga-form-class="issuer">\n                                <gmd-input>\n                                    <input gumga-error type="text" name="issuer"\n                                           ng-model="payment.check.issuer.document"\n                                           class="form-control gmd" ui-br-cpfcnpj-mask tabindex="5"/>\n                                    <span class="bar"></span>\n                                    <label gumga-translate-tag="thirdpartycheque.issuerdocument">issuer document</label>\n                                </gmd-input>\n                            </div>\n                        </div>\n                        <div class="col-md-8 m-t-md">\n                            <div gumga-form-class="issuer">\n                                <gmd-input>\n                                    <input gumga-error type="text" name="issuer" ng-model="payment.check.issuer.name"\n                                           class="form-control gmd" tabindex="6"/>\n                                    <span class="bar"></span>\n                                    <label gumga-translate-tag="thirdpartycheque.issuername">issuer name</label>\n                                </gmd-input>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="row" ng-show="payment.method == \'thirdCheck\'">\n                        <div class="col-md-4">\n                            <div gumga-form-class="portfolio">\n                                <label gumga-translate-tag="thirdpartycheque.portfolio">portfolio</label>\n                                <gumga-many-to-one\n                                        name="portfolio"\n                                        value="payment.check.portfolio"\n                                        search-method="chequeportfolio.methods.asyncSearch(\'name\',param)"\n                                        field="name"\n                                        tab-seq="7"\n                                        authorize-add="false">\n                                </gumga-many-to-one>\n                            </div>\n                        </div>\n                        <div class="col-md-4 m-t-md">\n                            <div gumga-form-class="validUntil">\n                                <gmd-input>\n                                    <input type="text" name="validUntil" class="form-control gmd"\n                                           uib-datepicker-popup="dd/MM/yyyy" ng-model="payment.check.validUntil"\n                                           tabindex="8"/>\n                                    <span class="bar"></span>\n                                    <label gumga-translate-tag="thirdpartycheque.validUntil">validUntil</label>\n                                </gmd-input>\n                            </div>\n                        </div>\n                        <div class="col-md-3 m-t-md">\n                            <gmd-input>\n                                <input id="valuecheck" type="text" name="value" ng-model="payment.value"\n                                       ng-focus="calcCheques(\'valuecheck\')"\n                                       ng-click="selectAllText(\'valuecheck\')"\n                                       class="form-control text-right gmd" gumga-error ui-money-mask="2" tabindex="9">\n                                <span class="bar"></span>\n                                <label gumga-translate-tag="titleparcelreceive.value">value</label>\n                            </gmd-input>\n                        </div>\n                        <div class="col-md-1 m-t-md">\n                            <label style="height: 0;">&nbsp;</label>\n                            <button class="btn gmd fab btn-success btn-sm" ng-click="addReceiveCheck(payment)">\n                                <i class="material-icons">add</i>\n                            </button>\n                        </div>\n                    </div>\n                    \x3c!--</editor-fold>--\x3e\n\n                    \x3c!--<editor-fold desc="TOC TED">--\x3e\n                    <div class="row" ng-show="payment.method == \'tedDoc\'">\n                        <div class="col-md-4">\n                            <label for="isTed" gumga-translate-tag="docted.docted"></label><br/>\n                            <switch id="isTed" name="enabled" ng-model="isTed" on="TED" off="DOC"\n                                    class="green wide gmd"></switch>\n                            \x3c!--<input  bs-switch ng-model="isTed" switch-on-text="{{\'TED\'}}" switch-off-text="{{\'DOC\'}}" type="checkbox" switch-off-color="{{\'primary\'}}">--\x3e\n                        </div>\n                        <div class="col-md-4">\n                            <div>\n                                <label gumga-translate-tag="docted.source">source</label>\n                                <gumga-many-to-one input-name="source"\n                                                   value="payment.docTed.financeUnit"\n                                                   field="name"\n                                                   list="sources"\n                                                   search-method="checkingaccount.methods.asyncSearch(\'name\',param)"\n                                                   authorize-add="false"\n                                                   add-method="checkingaccount.methods.asyncPost(value,\'name\')"\n                                                   id="paymentBankFinanceunit">\n                                </gumga-many-to-one>\n                            </div>\n                        </div>\n                        <div class="col-md-3 m-t-md">\n                            <gmd-input>\n                                <input id="valuebank" type="text" name="value" ng-model="payment.value"\n                                       ng-focus="calcCheques(\'valuebank\')"\n                                       ng-click="selectAllText(\'valuebank\')"\n                                       class="form-control text-right gmd" gumga-error ui-money-mask="2">\n                                <span class="bar"></span>\n                                <label gumga-translate-tag="titleparcelreceive.value">value </label>\n                            </gmd-input>\n                        </div>\n                        <div class="col-md-1 m-t-md">\n                            <label style="height: 0;">&nbsp;</label>\n                            <button class="btn gmd fab btn-success btn-sm" ng-click="addReceiveBank(payment)">\n                                <i class="material-icons">add</i>\n                            </button>\n                        </div>\n                    </div>\n                    \x3c!--</editor-fold>--\x3e\n\n                    \x3c!--<editor-fold desc="Card">--\x3e\n                    <div class="row" ng-show="payment.method == \'card\'">\n                        <div class="col-md-4">\n                            <label gumga-translate-tag="titleparcelreceive.currentaccount">currentaccount</label>\n                            <gumga-many-to-one name="card"\n                                               value="payment.card.financeUnit"\n                                               field="name"\n                                               search-method="creditcardaccount.methods.asyncSearch(\'name\',param)"\n                                               authorize-add="false"\n                                               id="paymentCardFinanceunit">\n                            </gumga-many-to-one>\n                        </div>\n                        <div class="col-md-3 m-t-md">\n                            <gmd-input>\n                                <input id="authorizationNumber" type="text" name="value"\n                                       ng-model="payment.authorizationNumber" class="form-control gmd">\n                                <span class="bar"></span>\n                                <label gumga-translate-tag="titleparcelreceive.authorizationNumber">authorizationNumber</label>\n                            </gmd-input>\n                        </div>\n                        <div class="col-md-3 col-md-offset-1 m-t-md">\n                            <gmd-input>\n                                <input id="valuecard" type="text" name="value" ng-model="payment.value"\n                                       ng-focus="calcCheques(\'valuecard\')"\n                                       ng-click="selectAllText(\'valuecard\')"\n                                       class="form-control text-right gmd" gumga-error ui-money-mask="2">\n                                <span class="bar"></span>\n                                <label gumga-translate-tag="titleparcelreceive.value">value</label>\n                            </gmd-input>\n                        </div>\n                        <div class="col-md-1 m-t-md">\n                            <label style="height: 0;">&nbsp;</label>\n                            <button class="btn gmd fab btn-success btn-sm" ng-click="addReceiveCard(payment)">\n                                <i class="material-icons">add</i>\n                            </button>\n                        </div>\n                    </div>\n                    \x3c!--</editor-fold>--\x3e\n\n                    \x3c!-- <editor-fold desc="CRÉDITO"> --\x3e\n                    <div class="row" ng-show="payment.method == \'credit\' && showMenuPersonalCredit === true">\n                        <div class="col-md-8">\n                            <div>\n                                <label gumga-translate-tag="titleparcel.financeUnit">financeUnit</label><br/>\n                                <gumga-many-to-one\n                                        tab-seq="1"\n                                        value="payment.credit.financeUnit"\n                                        list="financeunit.data"\n                                        search-method="getPersonalCredits(params)"\n                                        add-method="individual.methods.asyncPost(value,\'name\')"\n                                        on-new-value-added="checkType()"\n                                        description="type"\n                                        field="name"\n                                        authorize-add="false"\n                                        id="paymentCreditFinanceunit">\n                                </gumga-many-to-one>\n                            </div>\n                        </div>\n                        <div class="col-md-3 m-t-md">\n                            <gmd-input>\n                                <input id="valuecredit" type="text" name="value" ng-model="payment.value"\n                                       ng-focus="calcCheques(\'valuecredit\')"\n                                       ng-click="selectAllText(\'valuecredit\')"\n                                       class="form-control text-right gmd" gumga-error ui-money-mask="2" tabindex="2">\n                                <span class="bar"></span>\n                                <label gumga-translate-tag="titleparcelreceive.value">value</label>\n                            </gmd-input>\n                        </div>\n                        <div class="col-md-1 m-t-md">\n                            <label style="height: 0;">&nbsp;</label>\n                            <button class="btn gmd fab btn-success btn-sm" ng-click="addReceiveCredit(payment)">\n                                <i class="material-icons">add</i>\n                            </button>\n                        </div>\n                    </div>\n                    \x3c!--</editor-fold>--\x3e\n\n                    \x3c!-- <editor-fold desc="LISTAGEM DE RECEBIMENTOS">--\x3e\n                    <div class="row" ng-if="payment.methodReceive.length > 0 && payment.numberReceive">\n                        <hr/>\n                        <div class="col-md-12">\n                            <label class="pull-left"><h3 gumga-translate-tag="titleparcelreceive.methodreceive"></h3>\n                            </label>\n                            <label class="pull-right">Falta a receber {{lastReceive | currency:\n                                "R$"}}<span> </span></label>\n                        </div>\n\n                        <div class="col-md-3">\n                            <label gumga-translate-tag="titleparcelreceive.method">method</label>\n                        </div>\n                        <div class="col-md-4">\n                            <label gumga-translate-tag="titleparcelreceive.account">account</label>\n                        </div>\n                        <div class="col-md-4">\n                            <label gumga-translate-tag="titleparcelreceive.value" class="pull-right">value</label>\n                        </div>\n                        <div class="col-md-1">\n                            &nbsp;\n                        </div>\n                    </div>\n                    <div class="row" ng-repeat="method in payment.methodReceive"\n                         ng-if="payment.methodReceive.length > 0 && payment.numberReceive">\n                        <hr/>\n                        <div class="col-md-3">\n                            <span>{{method.historic}}</span>\n                        </div>\n                        <div class="col-md-6">\n                            <span>{{method.destination}}</span>\n                        </div>\n                        <div class="col-md-2">\n                            <span class="pull-right">{{method.value | currency: "R$ "}}</span>\n                        </div>\n                        <div class="col-md-1">\n                            <a type="button" class="text-danger pull-right" uib-tooltip="Excluir"\n                               ng-click="removeLeaf(payment.methodReceive, $index)">\n                                <span class="glyphicon glyphicon-remove"></span>\n                            </a>\n                        </div>\n                    </div>\n                    \x3c!--</editor-fold>--\x3e\n\n                </div>\n                \x3c!--</editor-fold>--\x3e\n\n                <div class="row" ng-if="payment.methodReceive.length > 0 && payment.numberReceive ">\n                    <div class="col-md-2 pull-right" style="padding-left:0;">\n                        <label>&nbsp;</label><br/>\n                        <button class="btn btn-block btn-primary gmd raised" ng-click="makePayment(payment)">Realizar Recebimento\n                        </button>\n                    </div>\n                    <div class="col-md-2 pull-right" style="margin-right:2%;">\n                        <label>&nbsp;</label><br/>\n                        <button type="button" class="btn btn-block btn-outline btn-default gmd raised" ng-click="printReceipt()">\n                            Imprimir Recibo\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n<div class="col-md-12" ng-show="parcels.length == 0">\n    <label class="text-danger">Nenhuma parcela selecionada para Receber.</label>\n</div>');
    } ]), module.exports = path;
}, function(module, exports) {
    module.exports = function(module) {
        return module.webpackPolyfill || (module.deprecate = function() {}, module.paths = [], 
        module.children || (module.children = []), Object.defineProperty(module, "loaded", {
            enumerable: !0,
            get: function() {
                return module.l;
            }
        }), Object.defineProperty(module, "id", {
            enumerable: !0,
            get: function() {
                return module.i;
            }
        }), module.webpackPolyfill = 1), module;
    };
} ]);